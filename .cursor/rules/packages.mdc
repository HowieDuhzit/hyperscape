---
description:
globs:
alwaysApply: false
---

# Packages in this project

We have the following packages:

## Generation

Responsible for 3D generation of all items, characters, mobs, buildings, etc. Uses meshy.ai and OpenAI. Standalone package which outputs JSON and 3D models, this can be consumed by the RPG for dynamic runtime generation, but also comes with its own scripts and CLI for generation and testing.

## Hyperfy

three.js based world engine. Should stay pure to world engine and NOT include any code specific to the RPG, but should be flexible and extensible to allow games such as the RPG to be built. IT IS VERY IMPORTANT that we don't add RPG code or modify or hardcode stuff into Hyperfy, it needs to be a flexible world/metaverse engine for all games.

## Plugin Hyperfy

This is a plugin for elizaOS agents to connect to Hyperfy. This should be general and not have RPG code specific to the RPG, but it needs to dynamically load in the available actions from the game so that it can contextually give the agents a list of actions they can perform when those actions are valid. For example, a use item action is valid on an item in the agent's inventory. All elizaOS code should go here, and any action definitions should not be specific to elizaOS agents, but should just be a general manifest of available actions that the client can receive.

## RPG

This is an RPG game based on Runescape, but with a twist-- everything is AI generated. The world, the lore, the items, the mobs, the player, the animation, everything. The RPG is built on Hyperfy, but is cleanly separated from it. It uses Hyperfy's generic structure and serialization system to build a full-scale MMORPG. We make need to add systems to enable persistent, serialization, shared state, and anti-cheat. We will build general system implementations into Hyperfy as needed which are extended and customized by the RPG for this specific game. It's the difference between the framework and application layer, and it's very important we keep this boundary.

## test-framework

This is a standalone Hyperfy testing framework which we can use for the RPG to test everything. We want to test data on Systems, in the three.js scene graph and visually through the browser, as well as with logs in Playwright and whatever else we can get in terms of actual telemetry on the actual game. We don't use mocks or unit tests, we ONLY do gameplay testing on the real gameplay elements, real game engine, etc. This prevents us from creating garbage tests and hallucinated code that doesn't actually work. We should make sure this test framework is robust, and then used in the RPG to test every single aspect of the RPG. But we want this standalone so we can use it for other games as well, so no hardcoded RPG stuff.