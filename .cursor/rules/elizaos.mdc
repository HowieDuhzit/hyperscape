# ElizaOS Actions, Providers, and Services Architecture

## Table of Contents

1. [Overview](#overview)
2. [Actions](#actions)
3. [Providers](#providers)
4. [Services](#services)
5. [Hyperfy Integration](#hyperfy-integration)
6. [Architecture Flow](#architecture-flow)
7. [Best Practices](#best-practices)

## Overview

ElizaOS is an AI agent framework that uses a modular architecture based on three core concepts:

- **Actions**: Discrete operations that agents can perform in response to messages
- **Providers**: Context suppliers that inject relevant information into the agent's decision-making
- **Services**: Persistent connections and functionality managers (databases, APIs, game worlds)

These components work together to create intelligent agents that can perceive their environment, make decisions, and take actions.

## Actions

### What are Actions?

Actions are the executable capabilities of an ElizaOS agent. They define what an agent can DO in response to user input or environmental stimuli. Each action is a self-contained module that:

- Validates whether it can be executed in the current context
- Handles the execution logic
- Provides examples for the AI to learn from
- Returns structured results

### Action Structure

Every action in ElizaOS follows this interface:

```typescript
interface Action {
  name: string;                    // Unique identifier
  similes: string[];              // Alternative names/aliases
  description: string;            // What the action does
  validate: (runtime, message, state) => Promise<boolean>;
  handler: (runtime, message, state, options, callback) => Promise<ActionResult>;
  examples: ActionExample[][];    // Training examples
}
```

### Action Lifecycle

1. **Discovery**: The agent identifies available actions through the actions provider
2. **Validation**: Each action's `validate` function checks if it can be executed
3. **Selection**: The AI model chooses appropriate actions based on context
4. **Execution**: The `handler` function performs the action
5. **Callback**: Results are communicated back through the callback
6. **Result**: Structured data is returned for further processing

### Example: Reply Action

The `REPLY` action demonstrates a basic communication action:

```typescript
export const replyAction = {
  name: 'REPLY',
  similes: ['GREET', 'RESPOND', 'SEND_REPLY'],
  description: "Sends a direct message into in-game chat",
  
  validate: async (runtime) => {
    return true; // Always available
  },
  
  handler: async (runtime, message, state, options, callback) => {
    // Generate response using LLM
    const response = await runtime.useModel(ModelType.OBJECT_LARGE, {
      prompt: composePromptFromState({ state, template: replyTemplate })
    });
    
    // Send via callback
    await callback({
      text: response.message,
      actions: ['REPLY'],
      source: 'hyperfy'
    });
    
    return {
      text: response.message,
      values: { replied: true },
      data: { action: 'REPLY' }
    };
  }
}
```

### Complex Actions: Build/Edit

The `HYPERFY_EDIT_ENTITY` action shows how complex operations work:

1. **Multi-step Processing**: Extracts operations from user intent
2. **Validation**: Ensures world and build systems are available
3. **Execution**: Performs multiple scene edits (duplicate, move, scale, delete)
4. **Summarization**: Generates natural language summary of changes
5. **Error Handling**: Gracefully handles failures with retry logic

### Action Chaining

Actions can be chained together for complex behaviors:
- `GOTO` → `USE_ITEM`: Navigate to an object then interact with it
- `REPLY` → `WALK_RANDOMLY`: Respond to user then start wandering
- `PERCEPTION` → `BUILD`: Look around then modify the environment

## Providers

### What are Providers?

Providers inject contextual information into the agent's decision-making process. They gather and format relevant data that helps the AI understand the current situation and make appropriate decisions.

### Provider Structure

```typescript
interface Provider {
  name: string;              // Identifier used in templates
  description: string;       // What information it provides
  dynamic?: boolean;         // Whether content changes over time
  get: (runtime, message, state?) => Promise<ProviderResult>;
}

interface ProviderResult {
  text: string;      // Formatted text for LLM context
  values: object;    // Structured data for templates
  data: object;      // Raw data for processing
}
```

### Types of Providers

#### 1. **World State Provider** (`HYPERFY_WORLD_STATE`)
Provides real-time information about the 3D world:
- Entity positions and rotations
- Nearby interactable objects
- Other players/NPCs in the area
- Recent chat messages
- Agent's current position and state

#### 2. **Character Provider** (`CHARACTER`)
Supplies agent personality and behavior:
- Biography and backstory
- Communication style
- Example conversations
- Topics of interest
- System behavior rules

#### 3. **Actions Provider** (`ACTIONS`)
Lists available actions based on context:
- Valid actions for current state
- Action descriptions and examples
- Formatted for LLM understanding

#### 4. **Emote Provider** (`HYPERFY_EMOTE_LIST`)
Simple provider for available animations:
- List of emote names
- Descriptions of each animation
- Helps agent express emotions visually

### Provider Integration

Providers are automatically invoked when composing state:

```typescript
const state = await runtime.composeState(message, [
  'HYPERFY_WORLD_STATE',    // Current world information
  'CHARACTER',               // Agent personality
  'ACTIONS'                  // Available actions
]);
```

The composed state includes all provider outputs formatted for the LLM.

## Services

### What are Services?

Services are long-lived components that manage external connections, APIs, and stateful operations. Unlike actions (which are stateless), services maintain persistent connections and provide ongoing functionality.

### Service Structure

```typescript
interface Service {
  // Not shown in code but typical pattern:
  initialize(): Promise<void>;
  isConnected(): boolean;
  cleanup(): Promise<void>;
}
```

### HyperfyService Architecture

The HyperfyService manages the connection to Hyperfy virtual worlds:

1. **Connection Management**
   - WebSocket connection to world server
   - Authentication and session handling
   - Reconnection logic
   - Connection state tracking

2. **World Interface**
   - Access to world entities
   - Player/agent controls
   - Chat system interface
   - Build/edit capabilities

3. **Sub-Managers**
   - MessageManager: Handles chat history and message sending
   - BuildManager: Provides world editing capabilities
   - Controls: Agent movement and interaction

### HyperfyGameService

Extends base functionality for game-specific features:

```typescript
class HyperfyGameService {
  // Player movement in 3D space
  async movePlayer(playerId, position) {
    const world = this.hyperfyService.getWorld();
    world.entities.players.get(playerId).position = position;
    world.network.send('playerMove', { playerId, position });
  }
  
  // Game-specific actions
  async startTask(playerId, taskId) { }
  async performKill(killerId, victimId) { }
  async reportBody(reporterId, bodyId) { }
  async castVote(voterId, targetId) { }
}
```

## Hyperfy Integration

### Connection Flow

1. **Service Initialization**
   ```
   ElizaOS Runtime → HyperfyService → WebSocket → Hyperfy World
   ```

2. **Agent Embodiment**
   - Service creates visual representation in world
   - Establishes control interface
   - Begins receiving world updates

3. **Perception Loop**
   - World state provider polls environment
   - Updates include positions, nearby objects, chat
   - Information formatted for AI consumption

4. **Action Execution**
   - User input triggers action selection
   - Action validates against world state
   - Handler uses service methods to affect world
   - Results broadcast to all connected clients

### Integration Points

#### 1. **World State Synchronization**
The world provider continuously updates the agent's understanding:
- Entity positions via THREE.js vectors
- Quaternion rotations for orientations
- Scale information for objects
- Real-time chat messages

#### 2. **Control Interface**
Actions use the control system to:
- Navigate to positions (`goto(x, z)`)
- Follow entities (`followEntity(id)`)
- Interact with objects (`performAction(id)`)
- Start/stop behaviors (`startRandomWalk()`)

#### 3. **Build System**
Complex world modifications through:
- Entity duplication
- Position/rotation/scale transforms
- Entity deletion
- Asset importing

#### 4. **Message System**
Bi-directional communication:
- Receiving player messages
- Sending agent responses
- Tracking conversation history
- Managing message context

## Architecture Flow

### Complete Action Flow

1. **Input Reception**
   ```
   Player Message → Hyperfy World → WebSocket → HyperfyService
   ```

2. **Context Composition**
   ```
   Runtime.composeState() → 
     - Character Provider (personality)
     - World Provider (environment)
     - Actions Provider (capabilities)
   ```

3. **Decision Making**
   ```
   LLM processes composed state →
     Selects appropriate action(s) →
     Extracts parameters
   ```

4. **Action Execution**
   ```
   Action.validate() → 
   Action.handler() →
     - Use HyperfyService methods
     - Modify world state
     - Send callbacks
   ```

5. **Result Broadcasting**
   ```
   World state changes →
   Network broadcast →
   All clients update
   ```

### State Management

ElizaOS maintains state at multiple levels:

1. **Runtime State**: Core agent memory and context
2. **Service State**: Persistent connections and session data
3. **World State**: Current 3D environment snapshot
4. **Action State**: Temporary execution context

## Best Practices

### Action Development

1. **Clear Validation**
   - Check all prerequisites in `validate()`
   - Return false if action impossible
   - Don't throw errors in validation

2. **Robust Error Handling**
   - Try-catch in handlers
   - Graceful degradation
   - Meaningful error messages

3. **Comprehensive Examples**
   - Cover success cases
   - Include failure scenarios
   - Show parameter variations

4. **Callback Usage**
   - Always call callback for UI updates
   - Include metadata for debugging
   - Use appropriate response format

### Provider Implementation

1. **Efficient Data Gathering**
   - Cache when appropriate
   - Minimize computation
   - Filter irrelevant information

2. **Clear Formatting**
   - Structure text for LLM comprehension
   - Use headers and sections
   - Include only relevant context

3. **Data Types**
   - `text`: Formatted for LLM
   - `values`: For template variables
   - `data`: Raw for processing

### Service Design

1. **Connection Resilience**
   - Implement reconnection logic
   - Handle network interruptions
   - Maintain state across disconnects

2. **Resource Management**
   - Clean up connections
   - Remove event listeners
   - Clear intervals/timeouts

3. **Method Organization**
   - Group related functionality
   - Consistent error handling
   - Clear method naming

### Integration Guidelines

1. **Loose Coupling**
   - Actions shouldn't depend on specific services
   - Use runtime.getService() for access
   - Handle service unavailability

2. **Event-Driven Updates**
   - Use callbacks for async operations
   - Emit events for state changes
   - Subscribe to relevant world events

3. **Performance Considerations**
   - Throttle frequent updates
   - Batch operations when possible
   - Use efficient data structures

## Conclusion

The ElizaOS architecture provides a flexible framework for creating intelligent agents that can perceive and act in virtual worlds. Through the combination of:

- **Actions** for capabilities
- **Providers** for context
- **Services** for connections

Agents can engage in complex behaviors while maintaining clean separation of concerns. The Hyperfy integration demonstrates how this architecture scales to support real-time 3D virtual worlds with multiple participants, complex interactions, and persistent state.

The modular design allows developers to extend functionality by adding new actions, providers, or services without modifying core systems, making ElizaOS a powerful platform for creating embodied AI agents.
description: ElizaOS AI agent integration into Hyperfy
alwaysApply: false
---
