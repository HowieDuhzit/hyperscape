{
  "version": 3,
  "sources": ["../../../../node_modules/eventemitter3/index.js", "../../../../node_modules/three-mesh-bvh/src/core/Constants.js", "../../../../node_modules/three-mesh-bvh/src/core/build/geometryUtils.js", "../../../../node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js", "../../../../node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js", "../../../../node_modules/three-mesh-bvh/src/core/build/splitUtils.js", "../../../../node_modules/three-mesh-bvh/src/core/MeshBVHNode.js", "../../../../node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js", "../../../../node_modules/three-mesh-bvh/src/core/build/buildUtils.js", "../../../../node_modules/three-mesh-bvh/src/core/build/buildTree.js", "../../../../node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js", "../../../../node_modules/three-mesh-bvh/src/math/MathUtilities.js", "../../../../node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js", "../../../../node_modules/three-mesh-bvh/src/math/OrientedBox.js", "../../../../node_modules/three-mesh-bvh/src/utils/PrimitivePool.js", "../../../../node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js", "../../../../node_modules/three-mesh-bvh/src/core/utils/BufferStack.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/shapecast.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js", "../../../../node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js", "../../../../node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js", "../../../../node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/refit.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js", "../../../../node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js", "../../../../node_modules/three-mesh-bvh/src/utils/BufferUtils.js", "../../../../node_modules/three-mesh-bvh/src/core/cast/bvhcast.js", "../../../../node_modules/three-mesh-bvh/src/core/MeshBVH.js", "../../../../node_modules/three-mesh-bvh/src/objects/MeshBVHHelper.js", "../../../../node_modules/three-mesh-bvh/src/debug/Debug.js", "../../../../node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js", "../../../../node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js", "../../../../node_modules/three-mesh-bvh/src/gpu/VertexAttributeTexture.js", "../../../../node_modules/three-mesh-bvh/src/gpu/MeshBVHUniformStruct.js", "../../../../node_modules/three-mesh-bvh/src/utils/StaticGeometryGenerator.js", "../../../../node_modules/three-mesh-bvh/src/gpu/glsl/common_functions.glsl.js", "../../../../node_modules/three-mesh-bvh/src/gpu/glsl/bvh_distance_functions.glsl.js", "../../../../node_modules/three-mesh-bvh/src/gpu/glsl/bvh_ray_functions.glsl.js", "../../../../node_modules/three-mesh-bvh/src/gpu/glsl/bvh_struct_definitions.glsl.js", "../../../../node_modules/three-mesh-bvh/src/index.js", "../../src/rpg/world/WorldGenerator.ts", "../../src/rpg/world/WorldInitializer.ts", "../../src/rpg/RPGWorldManager.ts", "index.ts", "../../../../node_modules/eventemitter3/index.mjs", "../../src/core/systems/System.ts", "../../src/rpg/systems/ConstructionSystem.ts", "../../src/rpg/types/index.ts", "../../src/rpg/systems/combat/HitCalculator.ts", "../../src/rpg/systems/combat/DamageCalculator.ts", "../../src/rpg/systems/combat/CombatAnimationManager.ts", "../../src/rpg/systems/CombatSystem.ts", "../../src/rpg/systems/inventory/EquipmentBonusCalculator.ts", "../../src/rpg/systems/inventory/ItemRegistry.ts", "../../src/rpg/systems/InventorySystem.ts", "../../src/rpg/systems/quests/QuestDefinitions.ts", "../../src/rpg/systems/QuestSystem.ts", "../../src/rpg/systems/SkillsSystem.ts", "../../src/rpg/systems/BankingSystem.ts", "../../src/rpg/systems/TradingSystem.ts", "../../src/rpg/systems/NavigationSystem.ts", "../../src/rpg/systems/loot/LootTableManager.ts", "../../src/rpg/systems/loot/DropCalculator.ts", "../../src/rpg/systems/LootSystem.ts", "../../src/core/extras/three.ts", "../../src/core/extras/Vector3Enhanced.ts", "../../src/rpg/systems/spawning/CircularSpawnArea.ts", "../../src/rpg/systems/spawning/SpatialIndex.ts", "../../src/rpg/systems/spawning/SpawnConditionChecker.ts", "../../src/core/entities/Entity.ts", "../../src/rpg/entities/RPGEntity.ts", "../../src/rpg/systems/SpawningSystem.ts", "../../src/rpg/entities/NPCEntity.ts", "../../src/rpg/systems/npc/NPCBehaviorManager.ts", "../../src/rpg/systems/npc/NPCDialogueManager.ts", "../../src/rpg/systems/npc/NPCSpawnManager.ts", "../../src/core/env.ts", "../../src/rpg/config/ConfigLoader.ts", "../../src/core/config.ts", "../../src/core/logger.ts", "../../src/rpg/systems/NPCSystem.ts", "../../src/rpg/systems/StatsSystem.ts", "../../src/rpg/systems/MovementSystem.ts", "../../src/rpg/systems/DeathRespawnSystem.ts", "../../src/rpg/systems/PvPSystem.ts", "../../src/rpg/systems/ShopSystem.ts", "../../src/rpg/systems/items/ItemDefinitions.ts", "../../src/rpg/systems/GrandExchangeSystem.ts", "../../src/rpg/systems/PrayerSystem.ts", "../../src/rpg/systems/MagicSystem.ts", "../../src/rpg/systems/MinigameSystem.ts", "../../src/rpg/systems/ClanSystem.ts", "../../../../node_modules/lodash-es/_freeGlobal.js", "../../../../node_modules/lodash-es/_root.js", "../../../../node_modules/lodash-es/_Symbol.js", "../../../../node_modules/lodash-es/_getRawTag.js", "../../../../node_modules/lodash-es/_objectToString.js", "../../../../node_modules/lodash-es/_baseGetTag.js", "../../../../node_modules/lodash-es/isObjectLike.js", "../../../../node_modules/lodash-es/isBoolean.js", "../../../../node_modules/lodash-es/isNumber.js", "../../src/core/nodes/Node.ts", "../../src/core/extras/getTrianglesFromGeometry.ts", "../../src/core/extras/getTextureBytesFromMaterial.ts", "../../src/core/nodes/Mesh.ts", "../../src/rpg/systems/VisualRepresentationSystem.ts", "../../src/rpg/systems/AgentPlayerSystem.ts", "../../src/rpg/systems/ItemSpawnSystem.ts", "../../src/rpg/systems/ResourceSpawnSystem.ts", "../../src/rpg/ui/UIRenderer.ts", "../../src/rpg/ui/InputHandler.ts", "../../src/rpg/ui/KeybindingSystem.ts", "../../src/rpg/ui/UISystem.ts", "../../src/rpg/index.ts"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "// Split strategy constants\nexport const CENTER = 0;\nexport const AVERAGE = 1;\nexport const SAH = 2;\n\n// Traversal constants\nexport const NOT_INTERSECTED = 0;\nexport const INTERSECTED = 1;\nexport const CONTAINED = 2;\n\n// SAH cost constants\n// TODO: hone these costs more. The relative difference between them should be the\n// difference in measured time to perform a triangle intersection vs traversing\n// bounds.\nexport const TRIANGLE_INTERSECT_COST = 1.25;\nexport const TRAVERSAL_COST = 1;\n\n\n// Build constants\nexport const BYTES_PER_NODE = 6 * 4 + 4 + 4;\nexport const IS_LEAFNODE_FLAG = 0xFFFF;\n\n// EPSILON for computing floating point error during build\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nexport const FLOAT32_EPSILON = Math.pow( 2, - 24 );\n\nexport const SKIP_GENERATION = Symbol( 'SKIP_GENERATION' );\n", "import { BufferAttribute } from 'three';\n\nexport function getVertexCount( geo ) {\n\n\treturn geo.index ? geo.index.count : geo.attributes.position.count;\n\n}\n\nexport function getTriCount( geo ) {\n\n\treturn getVertexCount( geo ) / 3;\n\n}\n\nexport function getIndexArray( vertexCount, BufferConstructor = ArrayBuffer ) {\n\n\tif ( vertexCount > 65535 ) {\n\n\t\treturn new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t} else {\n\n\t\treturn new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t}\n\n}\n\n// ensures that an index is present on the geometry\nexport function ensureIndex( geo, options ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tconst index = getIndexArray( vertexCount, BufferConstructor );\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nexport function getFullGeometryRange( geo, range ) {\n\n\tconst triCount = getTriCount( geo );\n\tconst drawRange = range ? range : geo.drawRange;\n\tconst start = drawRange.start / 3;\n\tconst end = ( drawRange.start + drawRange.count ) / 3;\n\n\tconst offset = Math.max( 0, start );\n\tconst count = Math.min( triCount, end ) - offset;\n\treturn [ {\n\t\toffset: Math.floor( offset ),\n\t\tcount: Math.floor( count ),\n\t} ];\n\n}\n\nexport function getRootIndexRanges( geo, range ) {\n\n\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\treturn getFullGeometryRange( geo, range );\n\n\t}\n\n\tconst ranges = [];\n\tconst rangeBoundaries = new Set();\n\n\tconst drawRange = range ? range : geo.drawRange;\n\tconst drawRangeStart = drawRange.start / 3;\n\tconst drawRangeEnd = ( drawRange.start + drawRange.count ) / 3;\n\tfor ( const group of geo.groups ) {\n\n\t\tconst groupStart = group.start / 3;\n\t\tconst groupEnd = ( group.start + group.count ) / 3;\n\t\trangeBoundaries.add( Math.max( drawRangeStart, groupStart ) );\n\t\trangeBoundaries.add( Math.min( drawRangeEnd, groupEnd ) );\n\n\t}\n\n\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\tconst start = sortedBoundaries[ i ];\n\t\tconst end = sortedBoundaries[ i + 1 ];\n\n\t\tranges.push( {\n\t\t\toffset: Math.floor( start ),\n\t\t\tcount: Math.floor( end - start ),\n\t\t} );\n\n\t}\n\n\treturn ranges;\n\n}\n\nexport function hasGroupGaps( geometry, range ) {\n\n\tconst vertexCount = getTriCount( geometry );\n\tconst groups = getRootIndexRanges( geometry, range )\n\t\t.sort( ( a, b ) => a.offset - b.offset );\n\n\tconst finalGroup = groups[ groups.length - 1 ];\n\tfinalGroup.count = Math.min( vertexCount - finalGroup.offset, finalGroup.count );\n\n\tlet total = 0;\n\tgroups.forEach( ( { count } ) => total += count );\n\treturn vertexCount !== total;\n\n}\n", "import { FLOAT32_EPSILON } from '../Constants.js';\nimport { getTriCount } from './geometryUtils.js';\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in \"target\".\n// A bounding box is computed for the centroids of the triangles, as well, and placed in \"centroidTarget\".\n// These are computed together to avoid redundant accesses to bounds array.\nexport function getBounds( triangleBounds, offset, count, target, centroidTarget ) {\n\n\tlet minx = Infinity;\n\tlet miny = Infinity;\n\tlet minz = Infinity;\n\tlet maxx = - Infinity;\n\tlet maxy = - Infinity;\n\tlet maxz = - Infinity;\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tconst hx = triangleBounds[ i + 1 ];\n\t\tconst lx = cx - hx;\n\t\tconst rx = cx + hx;\n\t\tif ( lx < minx ) minx = lx;\n\t\tif ( rx > maxx ) maxx = rx;\n\t\tif ( cx < cminx ) cminx = cx;\n\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tconst hy = triangleBounds[ i + 3 ];\n\t\tconst ly = cy - hy;\n\t\tconst ry = cy + hy;\n\t\tif ( ly < miny ) miny = ly;\n\t\tif ( ry > maxy ) maxy = ry;\n\t\tif ( cy < cminy ) cminy = cy;\n\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tconst hz = triangleBounds[ i + 5 ];\n\t\tconst lz = cz - hz;\n\t\tconst rz = cz + hz;\n\t\tif ( lz < minz ) minz = lz;\n\t\tif ( rz > maxz ) maxz = rz;\n\t\tif ( cz < cminz ) cminz = cz;\n\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\ttarget[ 0 ] = minx;\n\ttarget[ 1 ] = miny;\n\ttarget[ 2 ] = minz;\n\n\ttarget[ 3 ] = maxx;\n\ttarget[ 4 ] = maxy;\n\ttarget[ 5 ] = maxz;\n\n\tcentroidTarget[ 0 ] = cminx;\n\tcentroidTarget[ 1 ] = cminy;\n\tcentroidTarget[ 2 ] = cminz;\n\n\tcentroidTarget[ 3 ] = cmaxx;\n\tcentroidTarget[ 4 ] = cmaxy;\n\tcentroidTarget[ 5 ] = cmaxz;\n\n}\n\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nexport function computeTriangleBounds( geo, target = null, offset = null, count = null ) {\n\n\tconst posAttr = geo.attributes.position;\n\tconst index = geo.index ? geo.index.array : null;\n\tconst triCount = getTriCount( geo );\n\tconst normalized = posAttr.normalized;\n\tlet triangleBounds;\n\tif ( target === null ) {\n\n\t\ttriangleBounds = new Float32Array( triCount * 6 );\n\t\toffset = 0;\n\t\tcount = triCount;\n\n\t} else {\n\n\t\ttriangleBounds = target;\n\t\toffset = offset || 0;\n\t\tcount = count || triCount;\n\n\t}\n\n\t// used for non-normalized positions\n\tconst posArr = posAttr.array;\n\n\t// support for an interleaved position buffer\n\tconst bufferOffset = posAttr.offset || 0;\n\tlet stride = 3;\n\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\tstride = posAttr.data.stride;\n\n\t}\n\n\t// used for normalized positions\n\tconst getters = [ 'getX', 'getY', 'getZ' ];\n\n\tfor ( let tri = offset; tri < offset + count; tri ++ ) {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst tri6 = tri * 6;\n\n\t\tlet ai = tri3 + 0;\n\t\tlet bi = tri3 + 1;\n\t\tlet ci = tri3 + 2;\n\n\t\tif ( index ) {\n\n\t\t\tai = index[ ai ];\n\t\t\tbi = index[ bi ];\n\t\t\tci = index[ ci ];\n\n\t\t}\n\n\t\t// we add the stride and offset here since we access the array directly\n\t\t// below for the sake of performance\n\t\tif ( ! normalized ) {\n\n\t\t\tai = ai * stride + bufferOffset;\n\t\t\tbi = bi * stride + bufferOffset;\n\t\t\tci = ci * stride + bufferOffset;\n\n\t\t}\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tlet a, b, c;\n\n\t\t\tif ( normalized ) {\n\n\t\t\t\ta = posAttr[ getters[ el ] ]( ai );\n\t\t\t\tb = posAttr[ getters[ el ] ]( bi );\n\t\t\t\tc = posAttr[ getters[ el ] ]( ci );\n\n\t\t\t} else {\n\n\t\t\t\ta = posArr[ ai + el ];\n\t\t\t\tb = posArr[ bi + el ];\n\t\t\t\tc = posArr[ ci + el ];\n\n\t\t\t}\n\n\t\t\tlet min = a;\n\t\t\tif ( b < min ) min = b;\n\t\t\tif ( c < min ) min = c;\n\n\t\t\tlet max = a;\n\t\t\tif ( b > max ) max = b;\n\t\t\tif ( c > max ) max = c;\n\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t// worked with.\n\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\tconst el2 = el * 2;\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t}\n\n\t}\n\n\treturn triangleBounds;\n\n}\n", "export function arrayToBox( nodeIndex32, array, target ) {\n\n\ttarget.min.x = array[ nodeIndex32 ];\n\ttarget.min.y = array[ nodeIndex32 + 1 ];\n\ttarget.min.z = array[ nodeIndex32 + 2 ];\n\n\ttarget.max.x = array[ nodeIndex32 + 3 ];\n\ttarget.max.y = array[ nodeIndex32 + 4 ];\n\ttarget.max.z = array[ nodeIndex32 + 5 ];\n\n\treturn target;\n\n}\n\nexport function makeEmptyBounds( target ) {\n\n\ttarget[ 0 ] = target[ 1 ] = target[ 2 ] = Infinity;\n\ttarget[ 3 ] = target[ 4 ] = target[ 5 ] = - Infinity;\n\n}\n\nexport function getLongestEdgeIndex( bounds ) {\n\n\tlet splitDimIdx = - 1;\n\tlet splitDist = - Infinity;\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\tif ( dist > splitDist ) {\n\n\t\t\tsplitDist = dist;\n\t\t\tsplitDimIdx = i;\n\n\t\t}\n\n\t}\n\n\treturn splitDimIdx;\n\n}\n\n// copies bounds a into bounds b\nexport function copyBounds( source, target ) {\n\n\ttarget.set( source );\n\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds( a, b, target ) {\n\n\tlet aVal, bVal;\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst d3 = d + 3;\n\n\t\t// set the minimum values\n\t\taVal = a[ d ];\n\t\tbVal = b[ d ];\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\n\n\t\t// set the max values\n\t\taVal = a[ d3 ];\n\t\tbVal = b[ d3 ];\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\n\n\t}\n\n}\n\n// expands the given bounds by the provided triangle bounds\nexport function expandByTriangleBounds( startIndex, triangleBounds, bounds ) {\n\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst tCenter = triangleBounds[ startIndex + 2 * d ];\n\t\tconst tHalf = triangleBounds[ startIndex + 2 * d + 1 ];\n\n\t\tconst tMin = tCenter - tHalf;\n\t\tconst tMax = tCenter + tHalf;\n\n\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\tbounds[ d ] = tMin;\n\n\t\t}\n\n\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t}\n\n\t}\n\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea( bounds ) {\n\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\n\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\n\n}\n", "import { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds, expandByTriangleBounds } from '../../utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST } from '../Constants.js';\n\nconst BIN_COUNT = 32;\nconst binsSort = ( a, b ) => a.candidate - b.candidate;\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\treturn {\n\n\t\tcount: 0,\n\t\tbounds: new Float32Array( 6 ),\n\t\trightCacheBounds: new Float32Array( 6 ),\n\t\tleftCacheBounds: new Float32Array( 6 ),\n\t\tcandidate: 0,\n\n\t};\n\n} );\nconst leftBounds = new Float32Array( 6 );\n\nexport function getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\tlet axis = - 1;\n\tlet pos = 0;\n\n\t// Center\n\tif ( strategy === CENTER ) {\n\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t}\n\n\t} else if ( strategy === AVERAGE ) {\n\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t}\n\n\t} else if ( strategy === SAH ) {\n\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t// iterate over all axes\n\t\tconst cStart = offset * 6;\n\t\tconst cEnd = ( offset + count ) * 6;\n\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t// If we have fewer triangles than we're planning to split then just check all\n\t\t\t// the triangle positions because it will be faster.\n\t\t\tif ( count < BIN_COUNT / 4 ) {\n\n\t\t\t\t// initialize the bin candidates\n\t\t\t\tconst truncatedBins = [ ...sahBins ];\n\t\t\t\ttruncatedBins.length = count;\n\n\t\t\t\t// set the candidates\n\t\t\t\tlet b = 0;\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6, b ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ b ];\n\t\t\t\t\tbin.candidate = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tbin.count = 0;\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tbounds,\n\t\t\t\t\t\tleftCacheBounds,\n\t\t\t\t\t\trightCacheBounds,\n\t\t\t\t\t} = bin;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\trightCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\trightCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tleftCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\tleftCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bounds );\n\n\t\t\t\t}\n\n\t\t\t\ttruncatedBins.sort( binsSort );\n\n\t\t\t\t// remove redundant splits\n\t\t\t\tlet splitCount = count;\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\twhile ( bi + 1 < splitCount && truncatedBins[ bi + 1 ].candidate === bin.candidate ) {\n\n\t\t\t\t\t\ttruncatedBins.splice( bi + 1, 1 );\n\t\t\t\t\t\tsplitCount --;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// find the appropriate bin for each triangle and expand the bounds.\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst center = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\tif ( center >= bin.candidate ) {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.leftCacheBounds );\n\t\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// expand all the bounds\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\tconst leftCount = bin.count;\n\t\t\t\t\tconst rightCount = count - bin.count;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tconst leftBounds = bin.leftCacheBounds;\n\t\t\t\t\tconst rightBounds = bin.rightCacheBounds;\n\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rightProb = 0;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// reset the bins\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tbin.count = 0;\n\t\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over all center positions\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t\t// considered to be on the right side of the split\n\t\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.bounds );\n\n\t\t\t\t}\n\n\t\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t\t}\n\n\t\t\t\tlet leftCount = 0;\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst binCount = bin.count;\n\t\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t\t// don't do anything with the bounds if the new bounds have no triangles\n\t\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tleftCount += binCount;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tlet rightProb = 0;\n\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\n\n\t}\n\n\treturn { axis, pos };\n\n}\n\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\tlet avg = 0;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t}\n\n\treturn avg / count;\n\n}\n", "export class MeshBVHNode {\n\n\tconstructor() {\n\n\t\t// internal nodes have boundingData, left, right, and splitAxis\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\n\n\t\tthis.boundingData = new Float32Array( 6 );\n\n\t}\n\n}\n", "/********************************************************/\n/* This file is generated from \"sortUtils.template.js\". */\n/********************************************************/\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t}\n\n\n\t\t\t// swap bounds\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nexport { partition };\n", "/********************************************************/\n/* This file is generated from \"sortUtils.template.js\". */\n/********************************************************/\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition_indirect( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\t\t\tlet t = indirectBuffer[ left ];\n\t\t\tindirectBuffer[ left ] = indirectBuffer[ right ];\n\t\t\tindirectBuffer[ right ] = t;\n\n\n\t\t\t// swap bounds\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nexport { partition_indirect };\n", "export function IS_LEAF( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n}\n\nexport function OFFSET( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function COUNT( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 14 ];\n\n}\n\nexport function LEFT_NODE( n32 ) {\n\n\treturn n32 + 8;\n\n}\n\nexport function RIGHT_NODE( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function SPLIT_AXIS( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 7 ];\n\n}\n\nexport function BOUNDING_DATA_INDEX( n32 ) {\n\n\treturn n32;\n\n}\n", "import { BYTES_PER_NODE, IS_LEAFNODE_FLAG } from '../Constants.js';\nimport { IS_LEAF } from '../utils/nodeBufferUtils.js';\n\nlet float32Array, uint32Array, uint16Array, uint8Array;\nconst MAX_POINTER = Math.pow( 2, 32 );\n\nexport function countNodes( node ) {\n\n\tif ( 'count' in node ) {\n\n\t\treturn 1;\n\n\t} else {\n\n\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t}\n\n}\n\nexport function populateBuffer( byteOffset, node, buffer ) {\n\n\tfloat32Array = new Float32Array( buffer );\n\tuint32Array = new Uint32Array( buffer );\n\tuint16Array = new Uint16Array( buffer );\n\tuint8Array = new Uint8Array( buffer );\n\n\treturn _populateBuffer( byteOffset, node );\n\n}\n\n// pack structure\n// boundingData  \t\t\t\t: 6 float32\n// right / offset \t\t\t\t: 1 uint32\n// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\nfunction _populateBuffer( byteOffset, node ) {\n\n\tconst stride4Offset = byteOffset / 4;\n\tconst stride2Offset = byteOffset / 2;\n\tconst isLeaf = 'count' in node;\n\tconst boundingData = node.boundingData;\n\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t}\n\n\tif ( isLeaf ) {\n\n\t\tif ( node.buffer ) {\n\n\t\t\tconst buffer = node.buffer;\n\t\t\tuint8Array.set( new Uint8Array( buffer ), byteOffset );\n\n\t\t\tfor ( let offset = byteOffset, l = byteOffset + buffer.byteLength; offset < l; offset += BYTES_PER_NODE ) {\n\n\t\t\t\tconst offset2 = offset / 2;\n\t\t\t\tif ( ! IS_LEAF( offset2, uint16Array ) ) {\n\n\t\t\t\t\tuint32Array[ ( offset / 4 ) + 6 ] += stride4Offset;\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn byteOffset + buffer.byteLength;\n\n\t\t} else {\n\n\t\t\tconst offset = node.offset;\n\t\t\tconst count = node.count;\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = node.left;\n\t\tconst right = node.right;\n\t\tconst splitAxis = node.splitAxis;\n\n\t\tlet nextUnusedPointer;\n\t\tnextUnusedPointer = _populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\tif ( ( nextUnusedPointer / 4 ) > MAX_POINTER ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t}\n\n\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\tnextUnusedPointer = _populateBuffer( nextUnusedPointer, right );\n\n\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\treturn nextUnusedPointer;\n\n\t}\n\n}\n", "import { ensureIndex, getFullGeometryRange, getRootIndexRanges, getTriCount, hasGroupGaps, } from './geometryUtils.js';\nimport { getBounds, computeTriangleBounds } from './computeBoundsUtils.js';\nimport { getOptimalSplit } from './splitUtils.js';\nimport { MeshBVHNode } from '../MeshBVHNode.js';\nimport { BYTES_PER_NODE } from '../Constants.js';\n\nimport { partition } from './sortUtils.generated.js';\nimport { partition_indirect } from './sortUtils_indirect.generated.js';\nimport { countNodes, populateBuffer } from './buildUtils.js';\n\nexport function generateIndirectBuffer( geometry, useSharedArrayBuffer ) {\n\n\tconst triCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\tconst useUint32 = triCount > 2 ** 16;\n\tconst byteCount = useUint32 ? 4 : 2;\n\n\tconst buffer = useSharedArrayBuffer ? new SharedArrayBuffer( triCount * byteCount ) : new ArrayBuffer( triCount * byteCount );\n\tconst indirectBuffer = useUint32 ? new Uint32Array( buffer ) : new Uint16Array( buffer );\n\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\tindirectBuffer[ i ] = i;\n\n\t}\n\n\treturn indirectBuffer;\n\n}\n\nexport function buildTree( bvh, triangleBounds, offset, count, options ) {\n\n\t// epxand variables\n\tconst {\n\t\tmaxDepth,\n\t\tverbose,\n\t\tmaxLeafTris,\n\t\tstrategy,\n\t\tonProgress,\n\t\tindirect,\n\t} = options;\n\tconst indirectBuffer = bvh._indirectBuffer;\n\tconst geometry = bvh.geometry;\n\tconst indexArray = geometry.index ? geometry.index.array : null;\n\tconst partionFunc = indirect ? partition_indirect : partition;\n\n\t// generate intermediate variables\n\tconst totalTriangles = getTriCount( geometry );\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\tlet reachedMaxDepth = false;\n\n\tconst root = new MeshBVHNode();\n\tgetBounds( triangleBounds, offset, count, root.boundingData, cacheCentroidBoundingData );\n\tsplitNode( root, offset, count, cacheCentroidBoundingData );\n\treturn root;\n\n\tfunction triggerProgress( trianglesProcessed ) {\n\n\t\tif ( onProgress ) {\n\n\t\t\tonProgress( trianglesProcessed / totalTriangles );\n\n\t\t}\n\n\t}\n\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\treachedMaxDepth = true;\n\t\t\tif ( verbose ) {\n\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\tconsole.warn( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// early out if we've met our capacity\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// Find where to split the volume\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\tif ( split.axis === - 1 ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\tconst splitOffset = partionFunc( indirectBuffer, indexArray, triangleBounds, offset, count, split );\n\n\t\t// create the two new child nodes\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\n\t\t} else {\n\n\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t// create the left child and compute its bounding box\n\t\t\tconst left = new MeshBVHNode();\n\t\t\tconst lstart = offset;\n\t\t\tconst lcount = splitOffset - offset;\n\t\t\tnode.left = left;\n\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t// repeat for right\n\t\t\tconst right = new MeshBVHNode();\n\t\t\tconst rstart = splitOffset;\n\t\t\tconst rcount = count - lcount;\n\t\t\tnode.right = right;\n\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nexport function buildPackedTree( bvh, options ) {\n\n\tconst geometry = bvh.geometry;\n\tif ( options.indirect ) {\n\n\t\tbvh._indirectBuffer = generateIndirectBuffer( geometry, options.useSharedArrayBuffer );\n\n\t\tif ( hasGroupGaps( geometry, options.range ) && ! options.verbose ) {\n\n\t\t\tconsole.warn(\n\t\t\t\t'MeshBVH: Provided geometry contains groups or a range that do not fully span the vertex contents while using the \"indirect\" option. ' +\n\t\t\t\t'BVH may incorrectly report intersections on unrendered portions of the geometry.'\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tif ( ! bvh._indirectBuffer ) {\n\n\t\tensureIndex( geometry, options );\n\n\t}\n\n\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\n\tconst triangleBounds = computeTriangleBounds( geometry );\n\tconst geometryRanges = options.indirect ? getFullGeometryRange( geometry, options.range ) : getRootIndexRanges( geometry, options.range );\n\tbvh._roots = geometryRanges.map( range => {\n\n\t\tconst root = buildTree( bvh, triangleBounds, range.offset, range.count, options );\n\t\tconst nodeCount = countNodes( root );\n\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\n\t\tpopulateBuffer( 0, root, buffer );\n\t\treturn buffer;\n\n\t} );\n\n}\n", "import { Vector3 } from 'three';\n\nexport class SeparatingAxisBounds {\n\n\tconstructor() {\n\n\t\tthis.min = Infinity;\n\t\tthis.max = - Infinity;\n\n\t}\n\n\tsetFromPointsField( points, field ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = p[ field ];\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tsetFromPoints( axis, points ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = axis.dot( p );\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tisSeparated( other ) {\n\n\t\treturn this.min > other.max || other.min > this.max;\n\n\t}\n\n}\n\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\n\n\tconst p = new Vector3();\n\treturn function setFromBox( axis, box ) {\n\n\t\tconst boxMin = box.min;\n\t\tconst boxMax = box.max;\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\n\n\t\t\t\t\tconst val = axis.dot( p );\n\t\t\t\t\tmin = Math.min( val, min );\n\t\t\t\t\tmax = Math.max( val, max );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t};\n\n} )();\n\nexport const areIntersecting = ( function () {\n\n\tconst cacheSatBounds = new SeparatingAxisBounds();\n\treturn function areIntersecting( shape1, shape2 ) {\n\n\t\tconst points1 = shape1.points;\n\t\tconst satAxes1 = shape1.satAxes;\n\t\tconst satBounds1 = shape1.satBounds;\n\n\t\tconst points2 = shape2.points;\n\t\tconst satAxes2 = shape2.satAxes;\n\t\tconst satBounds2 = shape2.satBounds;\n\n\t\t// check axes of the first shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds1[ i ];\n\t\t\tconst sa = satAxes1[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check axes of the second shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds2[ i ];\n\t\t\tconst sa = satAxes2[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t};\n\n} )();\n", "import { Vector3, Vector2, Plane, Line3 } from 'three';\n\nexport const closestPointLineToLine = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst v02 = new Vector3();\n\treturn function closestPointLineToLine( l1, l2, result ) {\n\n\t\tconst v0 = l1.start;\n\t\tconst v10 = dir1;\n\t\tconst v2 = l2.start;\n\t\tconst v32 = dir2;\n\n\t\tv02.subVectors( v0, v2 );\n\t\tdir1.subVectors( l1.end, l1.start );\n\t\tdir2.subVectors( l2.end, l2.start );\n\n\t\t// float d0232 = v02.Dot(v32);\n\t\tconst d0232 = v02.dot( v32 );\n\n\t\t// float d3210 = v32.Dot(v10);\n\t\tconst d3210 = v32.dot( v10 );\n\n\t\t// float d3232 = v32.Dot(v32);\n\t\tconst d3232 = v32.dot( v32 );\n\n\t\t// float d0210 = v02.Dot(v10);\n\t\tconst d0210 = v02.dot( v10 );\n\n\t\t// float d1010 = v10.Dot(v10);\n\t\tconst d1010 = v10.dot( v10 );\n\n\t\t// float denom = d1010*d3232 - d3210*d3210;\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\n\n\t\tlet d, d2;\n\t\tif ( denom !== 0 ) {\n\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\n\n\t\t} else {\n\n\t\t\td = 0;\n\n\t\t}\n\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\n\n\t\tresult.x = d;\n\t\tresult.y = d2;\n\n\t};\n\n} )();\n\nexport const closestPointsSegmentToSegment = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n\tconst paramResult = new Vector2();\n\tconst temp1 = new Vector3();\n\tconst temp2 = new Vector3();\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\n\n\t\tclosestPointLineToLine( l1, l2, paramResult );\n\n\t\tlet d = paramResult.x;\n\t\tlet d2 = paramResult.y;\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\n\n\t\t\tl1.at( d, target1 );\n\t\t\tl2.at( d2, target2 );\n\n\t\t\treturn;\n\n\t\t} else if ( d >= 0 && d <= 1 ) {\n\n\t\t\t// Only d2 is out of bounds.\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tl2.at( 0, target2 );\n\n\t\t\t} else {\n\n\t\t\t\tl2.at( 1, target2 );\n\n\t\t\t}\n\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\n\t\t\treturn;\n\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\n\n\t\t\t// Only d is out of bounds.\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tl1.at( 0, target1 );\n\n\t\t\t} else {\n\n\t\t\t\tl1.at( 1, target1 );\n\n\t\t\t}\n\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// Both u and u2 are out of bounds.\n\t\t\tlet p;\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tp = l1.start;\n\n\t\t\t} else {\n\n\t\t\t\tp = l1.end;\n\n\t\t\t}\n\n\t\t\tlet p2;\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tp2 = l2.start;\n\n\t\t\t} else {\n\n\t\t\t\tp2 = l2.end;\n\n\t\t\t}\n\n\t\t\tconst closestPoint = temp1;\n\t\t\tconst closestPoint2 = temp2;\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\n\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\n\n\t\t\t\ttarget1.copy( closestPoint );\n\t\t\t\ttarget2.copy( p2 );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\ttarget1.copy( p );\n\t\t\t\ttarget2.copy( closestPoint2 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n} )();\n\n\nexport const sphereIntersectTriangle = ( function () {\n\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n\tconst closestPointTemp = new Vector3();\n\tconst projectedPointTemp = new Vector3();\n\tconst planeTemp = new Plane();\n\tconst lineTemp = new Line3();\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\n\n\t\tconst { radius, center } = sphere;\n\t\tconst { a, b, c } = triangle;\n\n\t\t// phase 1\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = b;\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = b;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\n\n\t\t// phase 2\n\t\tconst plane = triangle.getPlane( planeTemp );\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\n\t\tif ( dp <= radius ) {\n\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\n\t\t\tconst cp = triangle.containsPoint( pp );\n\t\t\tif ( cp ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n} )();\n", "import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\n\nconst ZERO_EPSILON = 1e-15;\nfunction isNearZero( value ) {\n\n\treturn Math.abs( value ) < ZERO_EPSILON;\n\n}\n\nexport class ExtendedTriangle extends Triangle {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.isExtendedTriangle = true;\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.points = [ this.a, this.b, this.c ];\n\t\tthis.sphere = new Sphere();\n\t\tthis.plane = new Plane();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst a = this.a;\n\t\tconst b = this.b;\n\t\tconst c = this.c;\n\t\tconst points = this.points;\n\n\t\tconst satAxes = this.satAxes;\n\t\tconst satBounds = this.satBounds;\n\n\t\tconst axis0 = satAxes[ 0 ];\n\t\tconst sab0 = satBounds[ 0 ];\n\t\tthis.getNormal( axis0 );\n\t\tsab0.setFromPoints( axis0, points );\n\n\t\tconst axis1 = satAxes[ 1 ];\n\t\tconst sab1 = satBounds[ 1 ];\n\t\taxis1.subVectors( a, b );\n\t\tsab1.setFromPoints( axis1, points );\n\n\t\tconst axis2 = satAxes[ 2 ];\n\t\tconst sab2 = satBounds[ 2 ];\n\t\taxis2.subVectors( b, c );\n\t\tsab2.setFromPoints( axis2, points );\n\n\t\tconst axis3 = satAxes[ 3 ];\n\t\tconst sab3 = satBounds[ 3 ];\n\t\taxis3.subVectors( c, a );\n\t\tsab3.setFromPoints( axis3, points );\n\n\t\tthis.sphere.setFromPoints( this.points );\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\tthis.needsUpdate = false;\n\n\t}\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\tconst edge = new Line3();\n\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\tconst { start, end } = segment;\n\t\tconst points = this.points;\n\t\tlet distSq;\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check the triangle edges\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\tedge.start.copy( points[ i ] );\n\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check end points\n\t\tthis.closestPointToPoint( start, point1 );\n\t\tdistSq = start.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t}\n\n\t\tthis.closestPointToPoint( end, point1 );\n\t\tdistSq = end.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri2 = new ExtendedTriangle();\n\tconst arr1 = new Array( 3 );\n\tconst arr2 = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\tconst dir = new Vector3();\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst tempDir = new Vector3();\n\tconst edge = new Line3();\n\tconst edge1 = new Line3();\n\tconst edge2 = new Line3();\n\tconst tempPoint = new Vector3();\n\n\tfunction triIntersectPlane( tri, plane, targetEdge ) {\n\n\t\t// find the edge that intersects the other triangle plane\n\t\tconst points = tri.points;\n\t\tlet count = 0;\n\t\tlet startPointIntersection = - 1;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst { start, end } = edge;\n\t\t\tstart.copy( points[ i ] );\n\t\t\tend.copy( points[ ( i + 1 ) % 3 ] );\n\t\t\tedge.delta( dir );\n\n\t\t\tconst startIntersects = isNearZero( plane.distanceToPoint( start ) );\n\t\t\tif ( isNearZero( plane.normal.dot( dir ) ) && startIntersects ) {\n\n\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\ttargetEdge.copy( edge );\n\t\t\t\tcount = 2;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\tconst doesIntersect = plane.intersectLine( edge, tempPoint );\n\t\t\tif ( ! doesIntersect && startIntersects ) {\n\n\t\t\t\ttempPoint.copy( start );\n\n\t\t\t}\n\n\t\t\t// ignore the end point\n\t\t\tif ( ( doesIntersect || startIntersects ) && ! isNearZero( tempPoint.distanceTo( end ) ) ) {\n\n\t\t\t\tif ( count <= 1 ) {\n\n\t\t\t\t\t// assign to the start or end point and save which index was snapped to\n\t\t\t\t\t// the start point if necessary\n\t\t\t\t\tconst point = count === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\tif ( startIntersects ) {\n\n\t\t\t\t\t\tstartPointIntersection = count;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( count >= 2 ) {\n\n\t\t\t\t\t// if we're here that means that there must have been one point that had\n\t\t\t\t\t// snapped to the start point so replace it here\n\t\t\t\t\tconst point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\tcount = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tcount ++;\n\t\t\t\tif ( count === 2 && startPointIntersection === - 1 ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\treturn function intersectsTriangle( other, target = null, suppressLog = false ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\tsaTri2.copy( other );\n\t\t\tsaTri2.update();\n\t\t\tother = saTri2;\n\n\t\t} else if ( other.needsUpdate ) {\n\n\t\t\tother.update();\n\n\t\t}\n\n\t\tconst plane1 = this.plane;\n\t\tconst plane2 = other.plane;\n\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\tconst satBounds1 = this.satBounds;\n\t\t\tconst satAxes1 = this.satAxes;\n\t\t\tarr2[ 0 ] = other.a;\n\t\t\tarr2[ 1 ] = other.b;\n\t\t\tarr2[ 2 ] = other.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst satBounds2 = other.satBounds;\n\t\t\tconst satAxes2 = other.satAxes;\n\t\t\tarr1[ 0 ] = this.a;\n\t\t\tarr1[ 1 ] = this.b;\n\t\t\tarr1[ 2 ] = this.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( target ) {\n\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\tif ( ! suppressLog ) {\n\n\t\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\t}\n\n\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst count1 = triIntersectPlane( this, plane2, edge1 );\n\t\t\tif ( count1 === 1 && other.containsPoint( edge1.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.end );\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find the other triangles edge that intersects this plane\n\t\t\tconst count2 = triIntersectPlane( other, plane1, edge2 );\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge2.end );\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\tedge1.delta( dir1 );\n\t\t\tedge2.delta( dir2 );\n\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\tlet tmp = edge2.start;\n\t\t\t\tedge2.start = edge2.end;\n\t\t\t\tedge2.end = tmp;\n\n\t\t\t}\n\n\t\t\t// check if the edges are overlapping\n\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\tconst separated1 = e1 < s2;\n\t\t\tconst separated2 = s1 < e2;\n\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// assign the target output\n\t\t\tif ( target ) {\n\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\tconst point = new Vector3();\n\tconst point2 = new Vector3();\n\tconst cornerFields = [ 'a', 'b', 'c' ];\n\tconst line1 = new Line3();\n\tconst line2 = new Line3();\n\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check all point distances\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tlet dist;\n\t\t\tconst field = cornerFields[ i ];\n\t\t\tconst otherVec = other[ field ];\n\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t}\n\n\n\t\t\tconst thisVec = this[ field ];\n\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst f11 = cornerFields[ i ];\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n", "import { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\n\nexport class OrientedBox {\n\n\tconstructor( min, max, matrix ) {\n\n\t\tthis.isOrientedBox = true;\n\t\tthis.min = new Vector3();\n\t\tthis.max = new Vector3();\n\t\tthis.matrix = new Matrix4();\n\t\tthis.invMatrix = new Matrix4();\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.needsUpdate = false;\n\n\t\tif ( min ) this.min.copy( min );\n\t\tif ( max ) this.max.copy( max );\n\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t}\n\n\tset( min, max, matrix ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\t\tthis.matrix.copy( matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.min.copy( other.min );\n\t\tthis.max.copy( other.max );\n\t\tthis.matrix.copy( other.matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nOrientedBox.prototype.update = ( function () {\n\n\treturn function update() {\n\n\t\tconst matrix = this.matrix;\n\t\tconst min = this.min;\n\t\tconst max = this.max;\n\n\t\tconst points = this.points;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst minVec = points[ 0 ];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst index = 1 << i;\n\t\t\tconst pi = points[ index ];\n\n\t\t\taxis.subVectors( minVec, pi );\n\t\t\tsb.setFromPoints( axis, points );\n\n\t\t}\n\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\tthis.needsUpdate = false;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsBox = ( function () {\n\n\tconst aabbBounds = new SeparatingAxisBounds();\n\treturn function intersectsBox( box ) {\n\n\t\t// TODO: should this be doing SAT against the AABB?\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\taabbBounds.min = min.x;\n\t\taabbBounds.max = max.x;\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.y;\n\t\taabbBounds.max = max.y;\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.z;\n\t\taabbBounds.max = max.z;\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri = new ExtendedTriangle();\n\tconst pointsArr = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\treturn function intersectsTriangle( triangle ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\tsaTri.copy( triangle );\n\t\t\tsaTri.update();\n\t\t\ttriangle = saTri;\n\n\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\ttriangle.update();\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\n\t\tpointsArr[ 0 ] = triangle.a;\n\t\tpointsArr[ 1 ] = triangle.b;\n\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst sa = satAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\tconst triSatBounds = triangle.satBounds;\n\t\tconst triSatAxes = triangle.satAxes;\n\t\tconst points = this.points;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = triSatBounds[ i ];\n\t\t\tconst sa = triSatAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check crossed axes\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sa1 = satAxes[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\treturn function closestPointToPoint( point, target1 ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\ttarget1\n\t\t\t.copy( point )\n\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t.clamp( this.min, this.max )\n\t\t\t.applyMatrix4( this.matrix );\n\n\t\treturn target1;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToBox = ( function () {\n\n\tconst xyzFields = [ 'x', 'y', 'z' ];\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\t// early out if we find a value below threshold\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tbox.getCenter( point2 );\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tconst threshold2 = threshold * threshold;\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst points = this.points;\n\n\n\t\t// iterate over every edge and compare distances\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check over all these points\n\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate and check all line segment distances\n\t\tlet count = 0;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t// get obb line segments\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t// get aabb line segments\n\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check all the other boxes point\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\tconst l1 = segments1[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n", "export class PrimitivePool {\n\n\tconstructor( getNewPrimitive ) {\n\n\t\tthis._getNewPrimitive = getNewPrimitive;\n\t\tthis._primitives = [];\n\n\t}\n\n\tgetPrimitive() {\n\n\t\tconst primitives = this._primitives;\n\t\tif ( primitives.length === 0 ) {\n\n\t\t\treturn this._getNewPrimitive();\n\n\t\t} else {\n\n\t\t\treturn primitives.pop();\n\n\t\t}\n\n\t}\n\n\treleasePrimitive( primitive ) {\n\n\t\tthis._primitives.push( primitive );\n\n\t}\n\n}\n", "import { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from './PrimitivePool.js';\n\nclass ExtendedTrianglePoolBase extends PrimitivePool {\n\n\tconstructor() {\n\n\t\tsuper( () => new ExtendedTriangle() );\n\n\t}\n\n}\n\nexport const ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\n", "class _BufferStack {\n\n\tconstructor() {\n\n\t\tthis.float32Array = null;\n\t\tthis.uint16Array = null;\n\t\tthis.uint32Array = null;\n\n\t\tconst stack = [];\n\t\tlet prevBuffer = null;\n\t\tthis.setBuffer = buffer => {\n\n\t\t\tif ( prevBuffer ) {\n\n\t\t\t\tstack.push( prevBuffer );\n\n\t\t\t}\n\n\t\t\tprevBuffer = buffer;\n\t\t\tthis.float32Array = new Float32Array( buffer );\n\t\t\tthis.uint16Array = new Uint16Array( buffer );\n\t\t\tthis.uint32Array = new Uint32Array( buffer );\n\n\t\t};\n\n\t\tthis.clearBuffer = () => {\n\n\t\t\tprevBuffer = null;\n\t\t\tthis.float32Array = null;\n\t\t\tthis.uint16Array = null;\n\t\t\tthis.uint32Array = null;\n\n\t\t\tif ( stack.length !== 0 ) {\n\n\t\t\t\tthis.setBuffer( stack.pop() );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\nexport const BufferStack = new _BufferStack();\n", "import { Box3 } from 'three';\nimport { CONTAINED } from '../Constants.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../../utils/PrimitivePool.js';\nimport { COUNT, OFFSET, LEFT_NODE, RIGHT_NODE, IS_LEAF, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\nlet _box1, _box2;\nconst boxStack = [];\nconst boxPool = /* @__PURE__ */ new PrimitivePool( () => new Box3() );\n\nexport function shapecast( bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset ) {\n\n\t// setup\n\t_box1 = boxPool.getPrimitive();\n\t_box2 = boxPool.getPrimitive();\n\tboxStack.push( _box1, _box2 );\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\n\tconst result = shapecastTraverse( 0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t// cleanup\n\tBufferStack.clearBuffer();\n\tboxPool.releasePrimitive( _box1 );\n\tboxPool.releasePrimitive( _box2 );\n\tboxStack.pop();\n\tboxStack.pop();\n\n\tconst length = boxStack.length;\n\tif ( length > 0 ) {\n\n\t\t_box2 = boxStack[ length - 1 ];\n\t\t_box1 = boxStack[ length - 2 ];\n\n\t}\n\n\treturn result;\n\n}\n\nfunction shapecastTraverse(\n\tnodeIndex32,\n\tgeometry,\n\tintersectsBoundsFunc,\n\tintersectsRangeFunc,\n\tnodeScoreFunc = null,\n\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\tdepth = 0\n) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, _box1 );\n\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1 );\n\n\t} else {\n\n\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tlet c1 = left;\n\t\tlet c2 = right;\n\n\t\tlet score1, score2;\n\t\tlet box1, box2;\n\t\tif ( nodeScoreFunc ) {\n\n\t\t\tbox1 = _box1;\n\t\t\tbox2 = _box2;\n\n\t\t\t// bounding data is not offset\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\tc1 = right;\n\t\t\t\tc2 = left;\n\n\t\t\t\tconst temp = score1;\n\t\t\t\tscore1 = score2;\n\t\t\t\tscore2 = temp;\n\n\t\t\t\tbox1 = box2;\n\t\t\t\t// box2 is always set before use below\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Check box 1 intersection\n\t\tif ( ! box1 ) {\n\n\t\t\tbox1 = _box1;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t}\n\n\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\tlet c1StopTraversal;\n\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\tconst count = end - offset;\n\n\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1 );\n\n\t\t} else {\n\n\t\t\tc1StopTraversal =\n\t\t\t\tc1Intersection &&\n\t\t\t\tshapecastTraverse(\n\t\t\t\t\tc1,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\tdepth + 1\n\t\t\t\t);\n\n\t\t}\n\n\t\tif ( c1StopTraversal ) return true;\n\n\t\t// Check box 2 intersection\n\t\t// cached box2 will have been overwritten by previous traversal\n\t\tbox2 = _box2;\n\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\tlet c2StopTraversal;\n\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\tconst count = end - offset;\n\n\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2 );\n\n\t\t} else {\n\n\t\t\tc2StopTraversal =\n\t\t\t\tc2Intersection &&\n\t\t\t\tshapecastTraverse(\n\t\t\t\t\tc2,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\tdepth + 1\n\t\t\t\t);\n\n\t\t}\n\n\t\tif ( c2StopTraversal ) return true;\n\n\t\treturn false;\n\n\t\t// Define these inside the function so it has access to the local variables needed\n\t\t// when converting to the buffer equivalents\n\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t}\n\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t// adjust offset to point to the right node\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\t// return the end offset of the triangle range\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t}\n\n\t}\n\n}\n", "import { Vector3 } from 'three';\n\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1 = /* @__PURE__ */ new Vector3();\n\nexport function closestPointToPoint(\n\tbvh,\n\tpoint,\n\ttarget = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\t// early out if under minThreshold\n\t// skip checking if over maxThreshold\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t// returns Infinity if no value found\n\tconst minThresholdSq = minThreshold * minThreshold;\n\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\tlet closestDistanceSq = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tbvh.shapecast(\n\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t},\n\n\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\ttemp1.copy( temp );\n\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tif ( closestDistanceSq === Infinity ) return null;\n\n\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\tif ( ! target.point ) target.point = temp1.clone();\n\telse target.point.copy( temp1 );\n\ttarget.distance = closestDistance,\n\ttarget.faceIndex = closestDistanceTriIndex;\n\n\treturn target;\n\n}\n", "import { Vector3, Vector2, Triangle, DoubleSide, BackSide, REVISION } from 'three';\n\nconst IS_GT_REVISION_169 = parseInt( REVISION ) >= 169;\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst _vA = /* @__PURE__ */ new Vector3();\nconst _vB = /* @__PURE__ */ new Vector3();\nconst _vC = /* @__PURE__ */ new Vector3();\n\nconst _uvA = /* @__PURE__ */ new Vector2();\nconst _uvB = /* @__PURE__ */ new Vector2();\nconst _uvC = /* @__PURE__ */ new Vector2();\n\nconst _normalA = /* @__PURE__ */ new Vector3();\nconst _normalB = /* @__PURE__ */ new Vector3();\nconst _normalC = /* @__PURE__ */ new Vector3();\n\nconst _intersectionPoint = /* @__PURE__ */ new Vector3();\nfunction checkIntersection( ray, pA, pB, pC, point, side, near, far ) {\n\n\tlet intersect;\n\tif ( side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tconst distance = ray.origin.distanceTo( point );\n\n\tif ( distance < near || distance > far ) return null;\n\n\treturn {\n\n\t\tdistance: distance,\n\t\tpoint: point.clone(),\n\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side, near, far ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tconst intersection = checkIntersection( ray, _vA, _vB, _vC, _intersectionPoint, side, near, far );\n\n\tif ( intersection ) {\n\n\t\tconst barycoord = new Vector3();\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA, _vB, _vC, barycoord );\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv1, a );\n\t\t\t_uvB.fromBufferAttribute( uv1, b );\n\t\t\t_uvC.fromBufferAttribute( uv1, c );\n\n\t\t\tintersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\t_normalA.fromBufferAttribute( normal, a );\n\t\t\t_normalB.fromBufferAttribute( normal, b );\n\t\t\t_normalC.fromBufferAttribute( normal, c );\n\n\t\t\tintersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new Vector3() );\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.faceIndex = a;\n\n\t\tif ( IS_GT_REVISION_169 ) {\n\n\t\t\tintersection.barycoord = barycoord;\n\n\t\t}\n\n\t}\n\n\treturn intersection;\n\n}\n\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri( geo, side, ray, tri, intersections, near, far ) {\n\n\tconst triOffset = tri * 3;\n\tlet a = triOffset + 0;\n\tlet b = triOffset + 1;\n\tlet c = triOffset + 2;\n\n\tconst index = geo.index;\n\tif ( geo.index ) {\n\n\t\ta = index.getX( a );\n\t\tb = index.getX( b );\n\t\tc = index.getX( c );\n\n\t}\n\n\tconst { position, normal, uv, uv1 } = geo.attributes;\n\tconst intersection = checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side, near, far );\n\n\tif ( intersection ) {\n\n\t\tintersection.faceIndex = tri;\n\t\tif ( intersections ) intersections.push( intersection );\n\t\treturn intersection;\n\n\t}\n\n\treturn null;\n\n}\n\nexport { intersectTri };\n", "\nimport { Vector2, Vector3, Triangle } from 'three';\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nexport function setTriangle( tri, i, index, pos ) {\n\n\tconst ta = tri.a;\n\tconst tb = tri.b;\n\tconst tc = tri.c;\n\n\tlet i0 = i;\n\tlet i1 = i + 1;\n\tlet i2 = i + 2;\n\tif ( index ) {\n\n\t\ti0 = index.getX( i0 );\n\t\ti1 = index.getX( i1 );\n\t\ti2 = index.getX( i2 );\n\n\t}\n\n\tta.x = pos.getX( i0 );\n\tta.y = pos.getY( i0 );\n\tta.z = pos.getZ( i0 );\n\n\ttb.x = pos.getX( i1 );\n\ttb.y = pos.getY( i1 );\n\ttb.z = pos.getZ( i1 );\n\n\ttc.x = pos.getX( i2 );\n\ttc.y = pos.getY( i2 );\n\ttc.z = pos.getZ( i2 );\n\n}\n\nconst tempV1 = /* @__PURE__ */ new Vector3();\nconst tempV2 = /* @__PURE__ */ new Vector3();\nconst tempV3 = /* @__PURE__ */ new Vector3();\nconst tempUV1 = /* @__PURE__ */ new Vector2();\nconst tempUV2 = /* @__PURE__ */ new Vector2();\nconst tempUV3 = /* @__PURE__ */ new Vector2();\n\nexport function getTriangleHitPointInfo( point, geometry, triangleIndex, target ) {\n\n\tconst indices = geometry.getIndex().array;\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst uvs = geometry.getAttribute( 'uv' );\n\n\tconst a = indices[ triangleIndex * 3 ];\n\tconst b = indices[ triangleIndex * 3 + 1 ];\n\tconst c = indices[ triangleIndex * 3 + 2 ];\n\n\ttempV1.fromBufferAttribute( positions, a );\n\ttempV2.fromBufferAttribute( positions, b );\n\ttempV3.fromBufferAttribute( positions, c );\n\n\t// find the associated material index\n\tlet materialIndex = 0;\n\tconst groups = geometry.groups;\n\tconst firstVertexIndex = triangleIndex * 3;\n\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\t\tconst { start, count } = group;\n\t\tif ( firstVertexIndex >= start && firstVertexIndex < start + count ) {\n\n\t\t\tmaterialIndex = group.materialIndex;\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// extract barycoord\n\tconst barycoord = target && target.barycoord ? target.barycoord : new Vector3();\n\tTriangle.getBarycoord( point, tempV1, tempV2, tempV3, barycoord );\n\n\t// extract uvs\n\tlet uv = null;\n\tif ( uvs ) {\n\n\t\ttempUV1.fromBufferAttribute( uvs, a );\n\t\ttempUV2.fromBufferAttribute( uvs, b );\n\t\ttempUV3.fromBufferAttribute( uvs, c );\n\n\t\tif ( target && target.uv ) uv = target.uv;\n\t\telse uv = new Vector2();\n\n\t\tTriangle.getInterpolation( point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv );\n\n\t}\n\n\t// adjust the provided target or create a new one\n\tif ( target ) {\n\n\t\tif ( ! target.face ) target.face = { };\n\t\ttarget.face.a = a;\n\t\ttarget.face.b = b;\n\t\ttarget.face.c = c;\n\t\ttarget.face.materialIndex = materialIndex;\n\t\tif ( ! target.face.normal ) target.face.normal = new Vector3();\n\t\tTriangle.getNormal( tempV1, tempV2, tempV3, target.face.normal );\n\n\t\tif ( uv ) target.uv = uv;\n\t\ttarget.barycoord = barycoord;\n\n\t\treturn target;\n\n\t} else {\n\n\t\treturn {\n\t\t\tface: {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\tnormal: Triangle.getNormal( tempV1, tempV2, tempV3, new Vector3() )\n\t\t\t},\n\t\t\tuv: uv,\n\t\t\tbarycoord: barycoord,\n\t\t};\n\n\t}\n\n}\n", "import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris( bvh, side, ray, offset, count, intersections, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\n\t\tintersectTri( geometry, side, ray, i, intersections, near, far );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri( bvh, side, ray, offset, count, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\n\t\tintersection = intersectTri( geometry, side, ray, i, null, near, far );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\n\t\ttri = i;\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri, intersectTris, iterateOverTriangles };\n", "import { IS_LEAFNODE_FLAG } from '../Constants.js';\n\n/****************************************************/\n/* This file is generated from \"refit.template.js\". */\n/****************************************************/\n\nfunction refit( bvh, nodeIndices = null ) {\n\n\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\tnodeIndices = new Set( nodeIndices );\n\n\t}\n\n\tconst geometry = bvh.geometry;\n\tconst indexArr = geometry.index ? geometry.index.array : null;\n\tconst posAttr = geometry.attributes.position;\n\n\tlet buffer, uint32Array, uint16Array, float32Array;\n\tlet byteOffset = 0;\n\tconst roots = bvh._roots;\n\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\tbuffer = roots[ i ];\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t_traverse( 0, byteOffset );\n\t\tbyteOffset += buffer.byteLength;\n\n\t}\n\n\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\tconst node16Index = node32Index * 2;\n\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\tlet minx = Infinity;\n\t\t\tlet miny = Infinity;\n\t\t\tlet minz = Infinity;\n\t\t\tlet maxx = - Infinity;\n\t\t\tlet maxy = - Infinity;\n\t\t\tlet maxz = - Infinity;\n\n\n\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\tlet index = indexArr[ i ];\n\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t}\n\n\n\t\t\tif (\n\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t) {\n\n\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = node32Index + 8;\n\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\tconst offsetRight = right + byteOffset;\n\t\t\tlet forceChildren = force;\n\t\t\tlet includesLeft = false;\n\t\t\tlet includesRight = false;\n\n\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tincludesLeft = true;\n\t\t\t\tincludesRight = true;\n\n\t\t\t}\n\n\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\tlet leftChange = false;\n\t\t\tif ( traverseLeft ) {\n\n\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tlet rightChange = false;\n\t\t\tif ( traverseRight ) {\n\n\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tconst didChange = leftChange || rightChange;\n\t\t\tif ( didChange ) {\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn didChange;\n\n\t\t}\n\n\t}\n\n}\n\nexport { refit };\n", "/**\n * This function performs intersection tests similar to Ray.intersectBox in three.js,\n * with the difference that the box values are read from an array to improve performance.\n */\nexport function intersectRay( nodeIndex32, array, ray, near, far ) {\n\n\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\tconst invdirx = 1 / ray.direction.x,\n\t\tinvdiry = 1 / ray.direction.y,\n\t\tinvdirz = 1 / ray.direction.z;\n\n\tconst ox = ray.origin.x;\n\tconst oy = ray.origin.y;\n\tconst oz = ray.origin.z;\n\n\tlet minx = array[ nodeIndex32 ];\n\tlet maxx = array[ nodeIndex32 + 3 ];\n\n\tlet miny = array[ nodeIndex32 + 1 ];\n\tlet maxy = array[ nodeIndex32 + 3 + 1 ];\n\n\tlet minz = array[ nodeIndex32 + 2 ];\n\tlet maxz = array[ nodeIndex32 + 3 + 2 ];\n\n\tif ( invdirx >= 0 ) {\n\n\t\ttmin = ( minx - ox ) * invdirx;\n\t\ttmax = ( maxx - ox ) * invdirx;\n\n\t} else {\n\n\t\ttmin = ( maxx - ox ) * invdirx;\n\t\ttmax = ( minx - ox ) * invdirx;\n\n\t}\n\n\tif ( invdiry >= 0 ) {\n\n\t\ttymin = ( miny - oy ) * invdiry;\n\t\ttymax = ( maxy - oy ) * invdiry;\n\n\t} else {\n\n\t\ttymin = ( maxy - oy ) * invdiry;\n\t\ttymax = ( miny - oy ) * invdiry;\n\n\t}\n\n\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return false;\n\n\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\tif ( invdirz >= 0 ) {\n\n\t\ttzmin = ( minz - oz ) * invdirz;\n\t\ttzmax = ( maxz - oz ) * invdirz;\n\n\t} else {\n\n\t\ttzmin = ( maxz - oz ) * invdirz;\n\t\ttzmax = ( minz - oz ) * invdirz;\n\n\t}\n\n\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return false;\n\n\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t//return point closest to the ray (positive side)\n\n\treturn tmin <= far && tmax >= near;\n\n}\n", "import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris_indirect( bvh, side, ray, offset, count, intersections, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet vi = _indirectBuffer ? _indirectBuffer[ i ] : i;\n\t\tintersectTri( geometry, side, ray, vi, intersections, near, far );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri_indirect( bvh, side, ray, offset, count, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\t\tintersection = intersectTri( geometry, side, ray, _indirectBuffer ? _indirectBuffer[ i ] : i, null, near, far );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles_indirect(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\t\ttri = bvh.resolveTriangleIndex( i );\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri_indirect, intersectTris_indirect, iterateOverTriangles_indirect };\n", "import { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectTris } from '../utils/iterationUtils.generated.js';\nimport '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nfunction raycast( bvh, root, side, ray, intersects, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects, near, far );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\tintersectTris( bvh, side, ray, offset, count, intersects, near, far );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast };\n", "import { IS_LEAF, OFFSET, COUNT, SPLIT_AXIS, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { intersectClosestTri } from '../utils/iterationUtils.generated.js';\nimport '../utils/iterationUtils_indirect.generated.js';\n\n/***********************************************************/\n/* This file is generated from \"raycastFirst.template.js\". */\n/***********************************************************/\n\nconst _xyzFields = [ 'x', 'y', 'z' ];\n\nfunction raycastFirst( bvh, root, side, ray, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _raycastFirst( 0, bvh, side, ray, near, far );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _raycastFirst( nodeIndex32, bvh, side, ray, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\t// eslint-disable-next-line no-unreachable\n\t\treturn intersectClosestTri( bvh, side, ray, offset, count, near, far );\n\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, near, far );\n\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray, near, far ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, near, far );\n\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray, near, far ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycastFirst };\n", "import { Box3, Matrix4 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../../math/ExtendedTriangle.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { IS_LEAF, OFFSET, COUNT, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\n/*****************************************************************/\n/* This file is generated from \"intersectsGeometry.template.js\". */\n/*****************************************************************/\n/* eslint-disable indent */\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\n\nfunction intersectsGeometry( bvh, root, otherGeometry, geometryToBvh ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tif ( cachedObb === null ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tcachedObb = obb;\n\n\t}\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst thisGeometry = bvh.geometry;\n\t\tconst thisIndex = thisGeometry.index;\n\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\tconst index = otherGeometry.index;\n\t\tconst pos = otherGeometry.attributes.position;\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t// here.\n\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t// if there's a bounds tree\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\tobb2.needsUpdate = true;\n\n\t\t\t// TODO: use a triangle iteration function here\n\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.needsUpdate = true;\n\n\n\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn res;\n\n\t\t} else {\n\n\t\t\t// if we're just dealing with raw geometry\n\n\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\n\n\n\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = nodeIndex32 + 8;\n\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\tconst leftIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( leftIntersection ) return true;\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\tconst rightIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( rightIntersection ) return true;\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport { intersectsGeometry };\n", "import { Matrix4, Vector3 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { getTriCount } from '../build/geometryUtils.js';\nimport { ExtendedTrianglePool } from '../../utils/ExtendedTrianglePool.js';\n\n/*********************************************************************/\n/* This file is generated from \"closestPointToGeometry.template.js\". */\n/*********************************************************************/\n\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\n\nfunction closestPointToGeometry(\n\tbvh,\n\totherGeometry,\n\tgeometryToBvh,\n\ttarget1 = { },\n\ttarget2 = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\tif ( ! otherGeometry.boundingBox ) {\n\n\t\totherGeometry.computeBoundingBox();\n\n\t}\n\n\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\tobb.needsUpdate = true;\n\n\tconst geometry = bvh.geometry;\n\tconst pos = geometry.attributes.position;\n\tconst index = geometry.index;\n\tconst otherPos = otherGeometry.attributes.position;\n\tconst otherIndex = otherGeometry.index;\n\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\tlet tempTarget1 = temp1;\n\tlet tempTargetDest1 = temp2;\n\tlet tempTarget2 = null;\n\tlet tempTargetDest2 = null;\n\n\tif ( target2 ) {\n\n\t\ttempTarget2 = temp3;\n\t\ttempTargetDest2 = temp4;\n\n\t}\n\n\tlet closestDistance = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tlet closestDistanceOtherTriIndex = null;\n\ttempMatrix.copy( geometryToBvh ).invert();\n\tobb2.matrix.copy( tempMatrix );\n\tbvh.shapecast(\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tExtendedTrianglePool.releasePrimitive( triangle );\n\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\tif ( closestDistance === Infinity ) {\n\n\t\treturn null;\n\n\t}\n\n\tif ( ! target1.point ) {\n\n\t\ttarget1.point = tempTargetDest1.clone();\n\n\t} else {\n\n\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t}\n\n\ttarget1.distance = closestDistance,\n\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\tif ( target2 ) {\n\n\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\telse target2.point.copy( tempTargetDest2 );\n\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t}\n\n\treturn target1;\n\n}\n\nexport { closestPointToGeometry };\n", "import { IS_LEAFNODE_FLAG } from '../Constants.js';\n\n/****************************************************/\n/* This file is generated from \"refit.template.js\". */\n/****************************************************/\n\nfunction refit_indirect( bvh, nodeIndices = null ) {\n\n\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\tnodeIndices = new Set( nodeIndices );\n\n\t}\n\n\tconst geometry = bvh.geometry;\n\tconst indexArr = geometry.index ? geometry.index.array : null;\n\tconst posAttr = geometry.attributes.position;\n\n\tlet buffer, uint32Array, uint16Array, float32Array;\n\tlet byteOffset = 0;\n\tconst roots = bvh._roots;\n\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\tbuffer = roots[ i ];\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t_traverse( 0, byteOffset );\n\t\tbyteOffset += buffer.byteLength;\n\n\t}\n\n\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\tconst node16Index = node32Index * 2;\n\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\tlet minx = Infinity;\n\t\t\tlet miny = Infinity;\n\t\t\tlet minz = Infinity;\n\t\t\tlet maxx = - Infinity;\n\t\t\tlet maxy = - Infinity;\n\t\t\tlet maxz = - Infinity;\n\n\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\tconst t = 3 * bvh.resolveTriangleIndex( i );\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tlet index = t + j;\n\t\t\t\t\tindex = indexArr ? indexArr[ index ] : index;\n\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (\n\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t) {\n\n\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = node32Index + 8;\n\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\tconst offsetRight = right + byteOffset;\n\t\t\tlet forceChildren = force;\n\t\t\tlet includesLeft = false;\n\t\t\tlet includesRight = false;\n\n\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tincludesLeft = true;\n\t\t\t\tincludesRight = true;\n\n\t\t\t}\n\n\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\tlet leftChange = false;\n\t\t\tif ( traverseLeft ) {\n\n\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tlet rightChange = false;\n\t\t\tif ( traverseRight ) {\n\n\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tconst didChange = leftChange || rightChange;\n\t\t\tif ( didChange ) {\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn didChange;\n\n\t\t}\n\n\t}\n\n}\n\nexport { refit_indirect };\n", "import { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectTris_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nfunction raycast_indirect( bvh, root, side, ray, intersects, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects, near, far );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris_indirect( bvh, side, ray, offset, count, intersects, near, far );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast_indirect };\n", "import { IS_LEAF, OFFSET, COUNT, SPLIT_AXIS, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectClosestTri_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/***********************************************************/\n/* This file is generated from \"raycastFirst.template.js\". */\n/***********************************************************/\n\nconst _xyzFields = [ 'x', 'y', 'z' ];\n\nfunction raycastFirst_indirect( bvh, root, side, ray, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _raycastFirst( 0, bvh, side, ray, near, far );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _raycastFirst( nodeIndex32, bvh, side, ray, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\treturn intersectClosestTri_indirect( bvh, side, ray, offset, count, near, far );\n\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, near, far );\n\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray, near, far ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, near, far );\n\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray, near, far ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycastFirst_indirect };\n", "import { Box3, Matrix4 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../../math/ExtendedTriangle.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { IS_LEAF, OFFSET, COUNT, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\n/*****************************************************************/\n/* This file is generated from \"intersectsGeometry.template.js\". */\n/*****************************************************************/\n/* eslint-disable indent */\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\n\nfunction intersectsGeometry_indirect( bvh, root, otherGeometry, geometryToBvh ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tif ( cachedObb === null ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tcachedObb = obb;\n\n\t}\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst thisGeometry = bvh.geometry;\n\t\tconst thisIndex = thisGeometry.index;\n\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\tconst index = otherGeometry.index;\n\t\tconst pos = otherGeometry.attributes.position;\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t// here.\n\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t// if there's a bounds tree\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\tobb2.needsUpdate = true;\n\n\t\t\t// TODO: use a triangle iteration function here\n\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * bvh.resolveTriangleIndex( i ), thisIndex, thisPos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn res;\n\n\t\t} else {\n\n\t\t\t// if we're just dealing with raw geometry\n\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\tsetTriangle( triangle, 3 * ti, thisIndex, thisPos );\n\n\n\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = nodeIndex32 + 8;\n\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\tconst leftIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( leftIntersection ) return true;\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\tconst rightIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( rightIntersection ) return true;\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport { intersectsGeometry_indirect };\n", "import { Matrix4, Vector3 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { getTriCount } from '../build/geometryUtils.js';\nimport { ExtendedTrianglePool } from '../../utils/ExtendedTrianglePool.js';\n\n/*********************************************************************/\n/* This file is generated from \"closestPointToGeometry.template.js\". */\n/*********************************************************************/\n\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\n\nfunction closestPointToGeometry_indirect(\n\tbvh,\n\totherGeometry,\n\tgeometryToBvh,\n\ttarget1 = { },\n\ttarget2 = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\tif ( ! otherGeometry.boundingBox ) {\n\n\t\totherGeometry.computeBoundingBox();\n\n\t}\n\n\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\tobb.needsUpdate = true;\n\n\tconst geometry = bvh.geometry;\n\tconst pos = geometry.attributes.position;\n\tconst index = geometry.index;\n\tconst otherPos = otherGeometry.attributes.position;\n\tconst otherIndex = otherGeometry.index;\n\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\tlet tempTarget1 = temp1;\n\tlet tempTargetDest1 = temp2;\n\tlet tempTarget2 = null;\n\tlet tempTargetDest2 = null;\n\n\tif ( target2 ) {\n\n\t\ttempTarget2 = temp3;\n\t\ttempTargetDest2 = temp4;\n\n\t}\n\n\tlet closestDistance = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tlet closestDistanceOtherTriIndex = null;\n\ttempMatrix.copy( geometryToBvh ).invert();\n\tobb2.matrix.copy( tempMatrix );\n\tbvh.shapecast(\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * ti2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tExtendedTrianglePool.releasePrimitive( triangle );\n\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\tif ( closestDistance === Infinity ) {\n\n\t\treturn null;\n\n\t}\n\n\tif ( ! target1.point ) {\n\n\t\ttarget1.point = tempTargetDest1.clone();\n\n\t} else {\n\n\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t}\n\n\ttarget1.distance = closestDistance,\n\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\tif ( target2 ) {\n\n\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\telse target2.point.copy( tempTargetDest2 );\n\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t}\n\n\treturn target1;\n\n}\n\nexport { closestPointToGeometry_indirect };\n", "export function isSharedArrayBufferSupported() {\n\n\treturn typeof SharedArrayBuffer !== 'undefined';\n\n}\n\nexport function convertToBufferType( array, BufferConstructor ) {\n\n\tif ( array === null ) {\n\n\t\treturn array;\n\n\t} else if ( array.buffer ) {\n\n\t\tconst buffer = array.buffer;\n\t\tif ( buffer.constructor === BufferConstructor ) {\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tconst ArrayConstructor = array.constructor;\n\t\tconst result = new ArrayConstructor( new BufferConstructor( buffer.byteLength ) );\n\t\tresult.set( array );\n\t\treturn result;\n\n\t} else {\n\n\t\tif ( array.constructor === BufferConstructor ) {\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tconst result = new BufferConstructor( array.byteLength );\n\t\tnew Uint8Array( result ).set( new Uint8Array( array ) );\n\t\treturn result;\n\n\t}\n\n}\n", "import { Box3, Matrix4 } from 'three';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { BOUNDING_DATA_INDEX, COUNT, IS_LEAF, LEFT_NODE, OFFSET, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../../utils/PrimitivePool.js';\n\nconst _bufferStack1 = new BufferStack.constructor();\nconst _bufferStack2 = new BufferStack.constructor();\nconst _boxPool = new PrimitivePool( () => new Box3() );\nconst _leftBox1 = new Box3();\nconst _rightBox1 = new Box3();\n\nconst _leftBox2 = new Box3();\nconst _rightBox2 = new Box3();\n\nlet _active = false;\n\nexport function bvhcast( bvh, otherBvh, matrixToLocal, intersectsRanges ) {\n\n\tif ( _active ) {\n\n\t\tthrow new Error( 'MeshBVH: Recursive calls to bvhcast not supported.' );\n\n\t}\n\n\t_active = true;\n\n\tconst roots = bvh._roots;\n\tconst otherRoots = otherBvh._roots;\n\tlet result;\n\tlet offset1 = 0;\n\tlet offset2 = 0;\n\tconst invMat = new Matrix4().copy( matrixToLocal ).invert();\n\n\t// iterate over the first set of roots\n\tfor ( let i = 0, il = roots.length; i < il; i ++ ) {\n\n\t\t_bufferStack1.setBuffer( roots[ i ] );\n\t\toffset2 = 0;\n\n\t\t// prep the initial root box\n\t\tconst localBox = _boxPool.getPrimitive();\n\t\tarrayToBox( BOUNDING_DATA_INDEX( 0 ), _bufferStack1.float32Array, localBox );\n\t\tlocalBox.applyMatrix4( invMat );\n\n\t\t// iterate over the second set of roots\n\t\tfor ( let j = 0, jl = otherRoots.length; j < jl; j ++ ) {\n\n\t\t\t_bufferStack2.setBuffer( otherRoots[ j ] );\n\n\t\t\tresult = _traverse(\n\t\t\t\t0, 0, matrixToLocal, invMat, intersectsRanges,\n\t\t\t\toffset1, offset2, 0, 0,\n\t\t\t\tlocalBox,\n\t\t\t);\n\n\t\t\t_bufferStack2.clearBuffer();\n\t\t\toffset2 += otherRoots[ j ].length;\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// release stack info\n\t\t_boxPool.releasePrimitive( localBox );\n\t\t_bufferStack1.clearBuffer();\n\t\toffset1 += roots[ i ].length;\n\n\t\tif ( result ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t_active = false;\n\treturn result;\n\n}\n\nfunction _traverse(\n\tnode1Index32,\n\tnode2Index32,\n\tmatrix2to1,\n\tmatrix1to2,\n\tintersectsRangesFunc,\n\n\t// offsets for ids\n\tnode1IndexByteOffset = 0,\n\tnode2IndexByteOffset = 0,\n\n\t// tree depth\n\tdepth1 = 0,\n\tdepth2 = 0,\n\n\tcurrBox = null,\n\treversed = false,\n\n) {\n\n\t// get the buffer stacks associated with the current indices\n\tlet bufferStack1, bufferStack2;\n\tif ( reversed ) {\n\n\t\tbufferStack1 = _bufferStack2;\n\t\tbufferStack2 = _bufferStack1;\n\n\t} else {\n\n\t\tbufferStack1 = _bufferStack1;\n\t\tbufferStack2 = _bufferStack2;\n\n\t}\n\n\t// get the local instances of the typed buffers\n\tconst\n\t\tfloat32Array1 = bufferStack1.float32Array,\n\t\tuint32Array1 = bufferStack1.uint32Array,\n\t\tuint16Array1 = bufferStack1.uint16Array,\n\t\tfloat32Array2 = bufferStack2.float32Array,\n\t\tuint32Array2 = bufferStack2.uint32Array,\n\t\tuint16Array2 = bufferStack2.uint16Array;\n\n\tconst node1Index16 = node1Index32 * 2;\n\tconst node2Index16 = node2Index32 * 2;\n\tconst isLeaf1 = IS_LEAF( node1Index16, uint16Array1 );\n\tconst isLeaf2 = IS_LEAF( node2Index16, uint16Array2 );\n\tlet result = false;\n\tif ( isLeaf2 && isLeaf1 ) {\n\n\t\t// if both bounds are leaf nodes then fire the callback if the boxes intersect\n\t\tif ( reversed ) {\n\n\t\t\tresult = intersectsRangesFunc(\n\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tresult = intersectsRangesFunc(\n\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t);\n\n\t\t}\n\n\t} else if ( isLeaf2 ) {\n\n\t\t// SWAP\n\t\t// If we've traversed to the leaf node on the other bvh then we need to swap over\n\t\t// to traverse down the first one\n\n\t\t// get the new box to use\n\t\tconst newBox = _boxPool.getPrimitive();\n\t\tarrayToBox( BOUNDING_DATA_INDEX( node2Index32 ), float32Array2, newBox );\n\t\tnewBox.applyMatrix4( matrix2to1 );\n\n\t\t// get the child bounds to check before traversal\n\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\tresult = (\n\t\t\tintersectCl1 && _traverse(\n\t\t\t\tnode2Index32, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\tnewBox, ! reversed,\n\t\t\t)\n\t\t) || (\n\t\t\tintersectCr1 && _traverse(\n\t\t\t\tnode2Index32, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\tnewBox, ! reversed,\n\t\t\t)\n\t\t);\n\n\t\t_boxPool.releasePrimitive( newBox );\n\n\t} else {\n\n\t\t// if neither are leaves then we should swap if one of the children does not\n\t\t// intersect with the current bounds\n\n\t\t// get the child bounds to check\n\t\tconst cl2 = LEFT_NODE( node2Index32 );\n\t\tconst cr2 = RIGHT_NODE( node2Index32, uint32Array2 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cl2 ), float32Array2, _leftBox2 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cr2 ), float32Array2, _rightBox2 );\n\n\t\tconst leftIntersects = currBox.intersectsBox( _leftBox2 );\n\t\tconst rightIntersects = currBox.intersectsBox( _rightBox2 );\n\t\tif ( leftIntersects && rightIntersects ) {\n\n\t\t\t// continue to traverse both children if they both intersect\n\t\t\tresult = _traverse(\n\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\tcurrBox, reversed,\n\t\t\t) || _traverse(\n\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\tcurrBox, reversed,\n\t\t\t);\n\n\t\t} else if ( leftIntersects ) {\n\n\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// SWAP\n\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\tnewBox.copy( _leftBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\tresult = (\n\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\tcl2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t) || (\n\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\tcl2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t}\n\n\t\t} else if ( rightIntersects ) {\n\n\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// SWAP\n\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\tnewBox.copy( _rightBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\tresult = (\n\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\tcr2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t) || (\n\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\tcr2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n", "import { BufferAttribute, Box3, FrontSide } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG, SKIP_GENERATION } from './Constants.js';\nimport { buildPackedTree } from './build/buildTree.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { ExtendedTrianglePool } from '../utils/ExtendedTrianglePool.js';\nimport { shapecast } from './cast/shapecast.js';\nimport { closestPointToPoint } from './cast/closestPointToPoint.js';\n\nimport { iterateOverTriangles } from './utils/iterationUtils.generated.js';\nimport { refit } from './cast/refit.generated.js';\nimport { raycast } from './cast/raycast.generated.js';\nimport { raycastFirst } from './cast/raycastFirst.generated.js';\nimport { intersectsGeometry } from './cast/intersectsGeometry.generated.js';\nimport { closestPointToGeometry } from './cast/closestPointToGeometry.generated.js';\n\nimport { iterateOverTriangles_indirect } from './utils/iterationUtils_indirect.generated.js';\nimport { refit_indirect } from './cast/refit_indirect.generated.js';\nimport { raycast_indirect } from './cast/raycast_indirect.generated.js';\nimport { raycastFirst_indirect } from './cast/raycastFirst_indirect.generated.js';\nimport { intersectsGeometry_indirect } from './cast/intersectsGeometry_indirect.generated.js';\nimport { closestPointToGeometry_indirect } from './cast/closestPointToGeometry_indirect.generated.js';\nimport { isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\nimport { setTriangle } from '../utils/TriangleUtilities.js';\nimport { bvhcast } from './cast/bvhcast.js';\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst tempBox = /* @__PURE__ */ new Box3();\nexport const DEFAULT_OPTIONS = {\n\tstrategy: CENTER,\n\tmaxDepth: 40,\n\tmaxLeafTris: 10,\n\tuseSharedArrayBuffer: false,\n\tsetBoundingBox: true,\n\tonProgress: null,\n\tindirect: false,\n\tverbose: true,\n\trange: null\n};\n\nexport class MeshBVH {\n\n\tstatic serialize( bvh, options = {} ) {\n\n\t\toptions = {\n\t\t\tcloneBuffers: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst rootData = bvh._roots;\n\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\tconst indexAttribute = geometry.getIndex();\n\t\tlet result;\n\t\tif ( options.cloneBuffers ) {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\tindex: indexAttribute ? indexAttribute.array.slice() : null,\n\t\t\t\tindirectBuffer: indirectBuffer ? indirectBuffer.slice() : null,\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData,\n\t\t\t\tindex: indexAttribute ? indexAttribute.array : null,\n\t\t\t\tindirectBuffer: indirectBuffer,\n\t\t\t};\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\toptions = {\n\t\t\tsetIndex: true,\n\t\t\tindirect: Boolean( data.indirectBuffer ),\n\t\t\t...options,\n\t\t};\n\n\t\tconst { index, roots, indirectBuffer } = data;\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\tbvh._roots = roots;\n\t\tbvh._indirectBuffer = indirectBuffer || null;\n\n\t\tif ( options.setIndex ) {\n\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\n\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvh;\n\n\t}\n\n\tget indirect() {\n\n\t\treturn ! ! this._indirectBuffer;\n\n\t}\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t}\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\t...DEFAULT_OPTIONS,\n\n\t\t\t// undocumented options\n\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t}, options );\n\n\t\tif ( options.useSharedArrayBuffer && ! isSharedArrayBufferSupported() ) {\n\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t}\n\n\t\t// retain references to the geometry so we can use them it without having to\n\t\t// take a geometry reference in every function.\n\t\tthis.geometry = geometry;\n\t\tthis._roots = null;\n\t\tthis._indirectBuffer = null;\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\tbuildPackedTree( this, options );\n\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.resolveTriangleIndex = options.indirect ? i => this._indirectBuffer[ i ] : i => i;\n\n\t}\n\n\trefit( nodeIndices = null ) {\n\n\t\tconst refitFunc = this.indirect ? refit_indirect : refit;\n\t\treturn refitFunc( this, nodeIndices );\n\n\t}\n\n\ttraverse( callback, rootIndex = 0 ) {\n\n\t\tconst buffer = this._roots[ rootIndex ];\n\t\tconst uint32Array = new Uint32Array( buffer );\n\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t_traverse( 0 );\n\n\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: use node functions here\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Core Cast Functions */\n\traycast( ray, materialOrSide = FrontSide, near = 0, far = Infinity ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst intersects = [];\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tconst raycastFunc = this.indirect ? raycast_indirect : raycast;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst startCount = intersects.length;\n\n\t\t\traycastFunc( this, i, materialSide, ray, intersects, near, far );\n\n\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn intersects;\n\n\t}\n\n\traycastFirst( ray, materialOrSide = FrontSide, near = 0, far = Infinity ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tlet closestResult = null;\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tconst raycastFirstFunc = this.indirect ? raycastFirst_indirect : raycastFirst;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst result = raycastFirstFunc( this, i, materialSide, ray, near, far );\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\tclosestResult = result;\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestResult;\n\n\t}\n\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\tlet result = false;\n\t\tconst roots = this._roots;\n\t\tconst intersectsGeometryFunc = this.indirect ? intersectsGeometry_indirect : intersectsGeometry;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tresult = intersectsGeometryFunc( this, i, otherGeometry, geomToMesh );\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tshapecast( callbacks ) {\n\n\t\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\t\tconst iterateFunc = this.indirect ? iterateOverTriangles_indirect : iterateOverTriangles;\n\t\tlet {\n\t\t\tboundsTraverseOrder,\n\t\t\tintersectsBounds,\n\t\t\tintersectsRange,\n\t\t\tintersectsTriangle,\n\t\t} = callbacks;\n\n\t\t// wrap the intersectsRange function\n\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t} else if ( ! intersectsRange ) {\n\n\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\treturn contained;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// run shapecast\n\t\tlet result = false;\n\t\tlet byteOffset = 0;\n\t\tconst roots = this._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst root = roots[ i ];\n\t\t\tresult = shapecast( this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tbyteOffset += root.byteLength;\n\n\t\t}\n\n\t\tExtendedTrianglePool.releasePrimitive( triangle );\n\n\t\treturn result;\n\n\t}\n\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\tlet {\n\t\t\tintersectsRanges,\n\t\t\tintersectsTriangles,\n\t\t} = callbacks;\n\n\t\tconst triangle1 = ExtendedTrianglePool.getPrimitive();\n\t\tconst indexAttr1 = this.geometry.index;\n\t\tconst positionAttr1 = this.geometry.attributes.position;\n\t\tconst assignTriangle1 = this.indirect ?\n\t\t\ti1 => {\n\n\n\t\t\t\tconst ti = this.resolveTriangleIndex( i1 );\n\t\t\t\tsetTriangle( triangle1, ti * 3, indexAttr1, positionAttr1 );\n\n\t\t\t} :\n\t\t\ti1 => {\n\n\t\t\t\tsetTriangle( triangle1, i1 * 3, indexAttr1, positionAttr1 );\n\n\t\t\t};\n\n\t\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\t\tconst indexAttr2 = otherBvh.geometry.index;\n\t\tconst positionAttr2 = otherBvh.geometry.attributes.position;\n\t\tconst assignTriangle2 = otherBvh.indirect ?\n\t\t\ti2 => {\n\n\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\tsetTriangle( triangle2, ti2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t} :\n\t\t\ti2 => {\n\n\t\t\t\tsetTriangle( triangle2, i2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t};\n\n\t\t// generate triangle callback if needed\n\t\tif ( intersectsTriangles ) {\n\n\t\t\tconst iterateOverDoubleTriangles = ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) => {\n\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\tassignTriangle2( i2 );\n\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\tassignTriangle1( i1 );\n\n\t\t\t\t\t\ttriangle1.needsUpdate = true;\n\n\t\t\t\t\t\tif ( intersectsTriangles( triangle1, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvhcast( this, otherBvh, matrixToLocal, intersectsRanges );\n\n\t}\n\n\n\t/* Derived Cast Functions */\n\tintersectsBox( box, boxToMesh ) {\n\n\t\tobb.set( box.min, box.max, boxToMesh );\n\t\tobb.needsUpdate = true;\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\tconst closestPointToGeometryFunc = this.indirect ? closestPointToGeometry_indirect : closestPointToGeometry;\n\t\treturn closestPointToGeometryFunc(\n\t\t\tthis,\n\t\t\totherGeometry,\n\t\t\tgeometryToBvh,\n\t\t\ttarget1,\n\t\t\ttarget2,\n\t\t\tminThreshold,\n\t\t\tmaxThreshold,\n\t\t);\n\n\t}\n\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\treturn closestPointToPoint(\n\t\t\tthis,\n\t\t\tpoint,\n\t\t\ttarget,\n\t\t\tminThreshold,\n\t\t\tmaxThreshold,\n\t\t);\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\ttarget.makeEmpty();\n\n\t\tconst roots = this._roots;\n\t\troots.forEach( buffer => {\n\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\ttarget.union( tempBox );\n\n\t\t} );\n\n\t\treturn target;\n\n\t}\n\n}\n", "import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry, Mesh, Matrix4 } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst matrix = /* @__PURE__ */ new Matrix4();\n\nclass MeshBVHRootHelper extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tgetVertexPosition( ...args ) {\n\n\t\t// implement this function so it works with Box3.setFromObject\n\t\treturn Mesh.prototype.getVertexPosition.call( this, ...args );\n\n\t}\n\n\tconstructor( bvh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootHelper';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.bvh = bvh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.bvh;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth >= targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth >= targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHHelper extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh = null, bvh = null, depth = 10 ) {\n\n\t\t// handle bvh, depth signature\n\t\tif ( mesh instanceof MeshBVH ) {\n\n\t\t\tdepth = bvh || 10;\n\t\t\tbvh = mesh;\n\t\t\tmesh = null;\n\n\t\t}\n\n\t\t// handle mesh, depth signature\n\t\tif ( typeof bvh === 'number' ) {\n\n\t\t\tdepth = bvh;\n\t\t\tbvh = null;\n\n\t\t}\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHHelper';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.bvh = bvh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis.objectIndex = 0;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.mesh;\n\t\tlet bvh = this.bvh || mesh.geometry.boundsTree || null;\n\t\tif ( mesh.isBatchedMesh && mesh.boundsTrees && ! bvh ) {\n\n\t\t\t// get the bvh from a batchedMesh if not provided\n\t\t\t// TODO: we should have an official way to get the geometry index cleanly\n\t\t\tconst drawInfo = mesh._drawInfo[ this.objectIndex ];\n\t\t\tif ( drawInfo ) {\n\n\t\t\t\tbvh = mesh.boundsTrees[ drawInfo.geometryIndex ] || bvh;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tconst { depth, edgeMaterial, meshMaterial, displayParents, displayEdges } = this;\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootHelper( bvh, edgeMaterial, depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.bvh = bvh;\n\t\t\troot.depth = depth;\n\t\t\troot.displayParents = displayParents;\n\t\t\troot.displayEdges = displayEdges;\n\t\t\troot.material = displayEdges ? edgeMaterial : meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst parent = this.parent;\n\n\t\tif ( mesh !== null ) {\n\n\t\t\tmesh.updateWorldMatrix( true, false );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( parent.matrixWorld )\n\t\t\t\t\t.invert()\n\t\t\t\t\t.multiply( mesh.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\t// handle batched and instanced mesh bvhs\n\t\t\tif ( mesh.isInstancedMesh || mesh.isBatchedMesh ) {\n\n\t\t\t\tmesh.getMatrixAt( this.objectIndex, matrix );\n\t\t\t\tthis.matrix.multiply( matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrix.decompose(\n\t\t\t\tthis.position,\n\t\t\t\tthis.quaternion,\n\t\t\t\tthis.scale,\n\t\t\t);\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\t\tthis.bvh = source.bvh;\n\t\tthis.opacity = source.opacity;\n\t\tthis.color.copy( source.color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHHelper( this.mesh, this.bvh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport class MeshBVHVisualizer extends MeshBVHHelper {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconsole.warn( 'MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.' );\n\n\t}\n\n}\n\nexport { MeshBVHHelper };\n", "import { Box3, Vector3 } from 'three';\nimport { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../core/Constants.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\n\nconst _box1 = /* @__PURE__ */ new Box3();\nconst _box2 = /* @__PURE__ */ new Box3();\nconst _vec = /* @__PURE__ */ new Vector3();\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize( el ) {\n\n\tswitch ( typeof el ) {\n\n\t\tcase 'number':\n\t\t\treturn 8;\n\t\tcase 'string':\n\t\t\treturn el.length * 2;\n\t\tcase 'boolean':\n\t\t\treturn 4;\n\t\tdefault:\n\t\t\treturn 0;\n\n\t}\n\n}\n\nfunction isTypedArray( arr ) {\n\n\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\n\treturn regex.test( arr.constructor.name );\n\n}\n\nfunction getRootExtremes( bvh, group ) {\n\n\tconst result = {\n\t\tnodeCount: 0,\n\t\tleafNodeCount: 0,\n\n\t\tdepth: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\ttris: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\tsplits: [ 0, 0, 0 ],\n\t\tsurfaceAreaScore: 0,\n\t};\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\n\n\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\n\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\n\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\n\n\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\n\n\t\tresult.nodeCount ++;\n\t\tif ( isLeaf ) {\n\n\t\t\tresult.leafNodeCount ++;\n\n\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\n\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\n\n\t\t\tresult.tris.min = Math.min( count, result.tris.min );\n\t\t\tresult.tris.max = Math.max( count, result.tris.max );\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n\n\t\t} else {\n\n\t\t\tresult.splits[ offsetOrSplit ] ++;\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n\n\t\t}\n\n\t}, group );\n\n\t// If there are no leaf nodes because the tree hasn't finished generating yet.\n\tif ( result.tris.min === Infinity ) {\n\n\t\tresult.tris.min = 0;\n\t\tresult.tris.max = 0;\n\n\t}\n\n\tif ( result.depth.min === Infinity ) {\n\n\t\tresult.depth.min = 0;\n\t\tresult.depth.max = 0;\n\n\t}\n\n\treturn result;\n\n}\n\nfunction getBVHExtremes( bvh ) {\n\n\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\n\n}\n\nfunction estimateMemoryInBytes( obj ) {\n\n\tconst traversed = new Set();\n\tconst stack = [ obj ];\n\tlet bytes = 0;\n\n\twhile ( stack.length ) {\n\n\t\tconst curr = stack.pop();\n\t\tif ( traversed.has( curr ) ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\ttraversed.add( curr );\n\n\t\tfor ( let key in curr ) {\n\n\t\t\tif ( ! Object.hasOwn( curr, key ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tbytes += getPrimitiveSize( key );\n\n\t\t\tconst value = curr[ key ];\n\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\n\n\t\t\t\tif ( isTypedArray( value ) ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( isSharedArrayBufferSupported() && value instanceof SharedArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstack.push( value );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tbytes += getPrimitiveSize( value );\n\n\t\t\t}\n\n\n\t\t}\n\n\t}\n\n\treturn bytes;\n\n}\n\nfunction validateBounds( bvh ) {\n\n\tconst geometry = bvh.geometry;\n\tconst depthStack = [];\n\tconst index = geometry.index;\n\tconst position = geometry.getAttribute( 'position' );\n\tlet passes = true;\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tdepth,\n\t\t\tisLeaf,\n\t\t\tboundingData,\n\t\t\toffset,\n\t\t\tcount,\n\t\t};\n\t\tdepthStack[ depth ] = info;\n\n\t\tarrayToBox( 0, boundingData, _box1 );\n\t\tconst parent = depthStack[ depth - 1 ];\n\n\t\tif ( isLeaf ) {\n\n\t\t\t// check triangles\n\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\tconst triIndex = bvh.resolveTriangleIndex( i );\n\t\t\t\tlet i0 = 3 * triIndex;\n\t\t\t\tlet i1 = 3 * triIndex + 1;\n\t\t\t\tlet i2 = 3 * triIndex + 2;\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\ti0 = index.getX( i0 );\n\t\t\t\t\ti1 = index.getX( i1 );\n\t\t\t\t\ti2 = index.getX( i2 );\n\n\t\t\t\t}\n\n\t\t\t\tlet isContained;\n\n\t\t\t\t_vec.fromBufferAttribute( position, i0 );\n\t\t\t\tisContained = _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i1 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i2 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\tconsole.assert( isContained, 'Leaf bounds does not fully contain triangle.' );\n\t\t\t\tpasses = passes && isContained;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parent ) {\n\n\t\t\t// check if my bounds fit in my parents\n\t\t\tarrayToBox( 0, boundingData, _box2 );\n\n\t\t\tconst isContained = _box2.containsBox( _box1 );\n\t\t\tconsole.assert( isContained, 'Parent bounds does not fully contain child.' );\n\t\t\tpasses = passes && isContained;\n\n\t\t}\n\n\t} );\n\n\treturn passes;\n\n}\n\n// Returns a simple, human readable object that represents the BVH.\nfunction getJSONStructure( bvh ) {\n\n\tconst depthStack = [];\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tbounds: arrayToBox( 0, boundingData, new Box3() ),\n\t\t};\n\n\t\tif ( isLeaf ) {\n\n\t\t\tinfo.count = count;\n\t\t\tinfo.offset = offset;\n\n\t\t} else {\n\n\t\t\tinfo.left = null;\n\t\t\tinfo.right = null;\n\n\t\t}\n\n\t\tdepthStack[ depth ] = info;\n\n\t\t// traversal hits the left then right node\n\t\tconst parent = depthStack[ depth - 1 ];\n\t\tif ( parent ) {\n\n\t\t\tif ( parent.left === null ) {\n\n\t\t\t\tparent.left = info;\n\n\t\t\t} else {\n\n\t\t\t\tparent.right = info;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn depthStack[ 0 ];\n\n}\n\nexport { estimateMemoryInBytes, getBVHExtremes, validateBounds, getJSONStructure };\n", "// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\treturn hit;\n\n}\n", "import { Ray, Matrix4, Mesh, Vector3, Sphere, BatchedMesh, REVISION } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst IS_REVISION_166 = parseInt( REVISION ) >= 166;\nconst ray = /* @__PURE__ */ new Ray();\nconst direction = /* @__PURE__ */ new Vector3();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\nconst origBatchedRaycastFunc = BatchedMesh.prototype.raycast;\nconst _worldScale = /* @__PURE__ */ new Vector3();\nconst _mesh = /* @__PURE__ */ new Mesh();\nconst _batchIntersects = [];\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.isBatchedMesh ) {\n\n\t\tacceleratedBatchedMeshRaycast.call( this, raycaster, intersects );\n\n\t} else {\n\n\t\tacceleratedMeshRaycast.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nfunction acceleratedBatchedMeshRaycast( raycaster, intersects ) {\n\n\tif ( this.boundsTrees ) {\n\n\t\t// TODO: remove use of geometry info, instance info when r170 is minimum version\n\t\tconst boundsTrees = this.boundsTrees;\n\t\tconst drawInfo = this._drawInfo || this._instanceInfo;\n\t\tconst drawRanges = this._drawRanges || this._geometryInfo;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\t_mesh.material = this.material;\n\t\t_mesh.geometry = this.geometry;\n\n\t\tconst oldBoundsTree = _mesh.geometry.boundsTree;\n\t\tconst oldDrawRange = _mesh.geometry.drawRange;\n\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\n\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\t// TODO: provide new method to get instances count instead of 'drawInfo.length'\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( ! this.getVisibleAt( i ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// TODO: use getGeometryIndex\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\n\n\t\t\t_mesh.geometry.boundsTree = boundsTrees[ geometryId ];\n\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\n\n\t\t\tif ( ! _mesh.geometry.boundsTree ) {\n\n\t\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\n\t\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\n\n\t\t\t\tconst drawRange = drawRanges[ geometryId ];\n\t\t\t\t_mesh.geometry.setDrawRange( drawRange.start, drawRange.count );\n\n\t\t\t}\n\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\n\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\n\n\t\t\t\tconst intersect = _batchIntersects[ j ];\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersect.batchId = i;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_batchIntersects.length = 0;\n\n\t\t}\n\n\t\t_mesh.geometry.boundsTree = oldBoundsTree;\n\t\t_mesh.geometry.drawRange = oldDrawRange;\n\t\t_mesh.material = null;\n\t\t_mesh.geometry = null;\n\n\t} else {\n\n\t\torigBatchedRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nfunction acceleratedMeshRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\t\tdirection.copy( ray.direction ).multiply( _worldScale );\n\n\t\tconst scaleFactor = direction.length();\n\t\tconst near = raycaster.near / scaleFactor;\n\t\tconst far = raycaster.far / scaleFactor;\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material, near, far ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material, near, far );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options = {} ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n\nexport function computeBatchedBoundsTree( index = - 1, options = {} ) {\n\n\tif ( ! IS_REVISION_166 ) {\n\n\t\tthrow new Error( 'BatchedMesh: Three r166+ is required to compute bounds trees.' );\n\n\t}\n\n\tif ( options.indirect ) {\n\n\t\tconsole.warn( '\"Indirect\" is set to false because it is not supported for BatchedMesh.' );\n\n\t}\n\n\toptions = {\n\t\t...options,\n\t\tindirect: false,\n\t\trange: null\n\t};\n\n\tconst drawRanges = this._drawRanges || this._geometryInfo;\n\tconst geometryCount = this._geometryCount;\n\tif ( ! this.boundsTrees ) {\n\n\t\tthis.boundsTrees = new Array( geometryCount ).fill( null );\n\n\t}\n\n\tconst boundsTrees = this.boundsTrees;\n\twhile ( boundsTrees.length < geometryCount ) {\n\n\t\tboundsTrees.push( null );\n\n\t}\n\n\tif ( index < 0 ) {\n\n\t\tfor ( let i = 0; i < geometryCount; i ++ ) {\n\n\t\t\toptions.range = drawRanges[ i ];\n\t\t\tboundsTrees[ i ] = new MeshBVH( this.geometry, options );\n\n\t\t}\n\n\t\treturn boundsTrees;\n\n\t} else {\n\n\t\tif ( index < drawRanges.length ) {\n\n\t\t\toptions.range = drawRanges[ index ];\n\t\t\tboundsTrees[ index ] = new MeshBVH( this.geometry, options );\n\n\t\t}\n\n\t\treturn boundsTrees[ index ] || null;\n\n\t}\n\n}\n\nexport function disposeBatchedBoundsTree( index = - 1 ) {\n\n\tif ( index < 0 ) {\n\n\t\tthis.boundsTrees.fill( null );\n\n\t} else {\n\n\t\tif ( index < this.boundsTree.length ) {\n\n\t\t\tthis.boundsTrees[ index ] = null;\n\n\t\t}\n\n\t}\n\n}\n", "import {\n\tDataTexture,\n\tFloatType,\n\tIntType,\n\tUnsignedIntType,\n\tByteType,\n\tUnsignedByteType,\n\tShortType,\n\tUnsignedShortType,\n\n\tRedFormat,\n\tRGFormat,\n\tRGBAFormat,\n\n\tRedIntegerFormat,\n\tRGIntegerFormat,\n\tRGBAIntegerFormat,\n\n\tNearestFilter,\n} from 'three';\n\nfunction countToStringFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return 'R';\n\t\tcase 2: return 'RG';\n\t\tcase 3: return 'RGBA';\n\t\tcase 4: return 'RGBA';\n\n\t}\n\n\tthrow new Error();\n\n}\n\nfunction countToFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return RedFormat;\n\t\tcase 2: return RGFormat;\n\t\tcase 3: return RGBAFormat;\n\t\tcase 4: return RGBAFormat;\n\n\t}\n\n}\n\nfunction countToIntFormat( count ) {\n\n\tswitch ( count ) {\n\n\t\tcase 1: return RedIntegerFormat;\n\t\tcase 2: return RGIntegerFormat;\n\t\tcase 3: return RGBAIntegerFormat;\n\t\tcase 4: return RGBAIntegerFormat;\n\n\t}\n\n}\n\nexport class VertexAttributeTexture extends DataTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.generateMipmaps = false;\n\t\tthis.overrideItemSize = null;\n\t\tthis._forcedType = null;\n\n\t}\n\n\tupdateFrom( attr ) {\n\n\t\tconst overrideItemSize = this.overrideItemSize;\n\t\tconst originalItemSize = attr.itemSize;\n\t\tconst originalCount = attr.count;\n\t\tif ( overrideItemSize !== null ) {\n\n\t\t\tif ( ( originalItemSize * originalCount ) % overrideItemSize !== 0.0 ) {\n\n\t\t\t\tthrow new Error( 'VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.' );\n\n\t\t\t}\n\n\t\t\tattr.itemSize = overrideItemSize;\n\t\t\tattr.count = originalCount * originalItemSize / overrideItemSize;\n\n\t\t}\n\n\t\tconst itemSize = attr.itemSize;\n\t\tconst count = attr.count;\n\t\tconst normalized = attr.normalized;\n\t\tconst originalBufferCons = attr.array.constructor;\n\t\tconst byteCount = originalBufferCons.BYTES_PER_ELEMENT;\n\t\tlet targetType = this._forcedType;\n\t\tlet finalStride = itemSize;\n\n\t\t// derive the type of texture this should be in the shader\n\t\tif ( targetType === null ) {\n\n\t\t\tswitch ( originalBufferCons ) {\n\n\t\t\t\tcase Float32Array:\n\t\t\t\t\ttargetType = FloatType;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint8Array:\n\t\t\t\tcase Uint16Array:\n\t\t\t\tcase Uint32Array:\n\t\t\t\t\ttargetType = UnsignedIntType;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int8Array:\n\t\t\t\tcase Int16Array:\n\t\t\t\tcase Int32Array:\n\t\t\t\t\ttargetType = IntType;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get the target format to store the texture as\n\t\tlet type, format, normalizeValue, targetBufferCons;\n\t\tlet internalFormat = countToStringFormat( itemSize );\n\t\tswitch ( targetType ) {\n\n\t\t\tcase FloatType:\n\t\t\t\tnormalizeValue = 1.0;\n\t\t\t\tformat = countToFormat( itemSize );\n\n\t\t\t\tif ( normalized && byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = originalBufferCons;\n\t\t\t\t\tinternalFormat += '8';\n\n\t\t\t\t\tif ( originalBufferCons === Uint8Array ) {\n\n\t\t\t\t\t\ttype = UnsignedByteType;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttype = ByteType;\n\t\t\t\t\t\tinternalFormat += '_SNORM';\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Float32Array;\n\t\t\t\t\tinternalFormat += '32F';\n\t\t\t\t\ttype = FloatType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase IntType:\n\t\t\t\tinternalFormat += byteCount * 8 + 'I';\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = Int8Array;\n\t\t\t\t\ttype = ByteType;\n\n\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\ttargetBufferCons = Int16Array;\n\t\t\t\t\ttype = ShortType;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Int32Array;\n\t\t\t\t\ttype = IntType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase UnsignedIntType:\n\t\t\t\tinternalFormat += byteCount * 8 + 'UI';\n\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\ttargetBufferCons = Uint8Array;\n\t\t\t\t\ttype = UnsignedByteType;\n\n\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\ttargetBufferCons = Uint16Array;\n\t\t\t\t\ttype = UnsignedShortType;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetBufferCons = Uint32Array;\n\t\t\t\t\ttype = UnsignedIntType;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// there will be a mismatch between format length and final length because\n\t\t// RGBFormat and RGBIntegerFormat was removed\n\t\tif ( finalStride === 3 && ( format === RGBAFormat || format === RGBAIntegerFormat ) ) {\n\n\t\t\tfinalStride = 4;\n\n\t\t}\n\n\t\t// copy the data over to the new texture array\n\t\tconst dimension = Math.ceil( Math.sqrt( count ) ) || 1;\n\t\tconst length = finalStride * dimension * dimension;\n\t\tconst dataArray = new targetBufferCons( length );\n\n\t\t// temporarily set the normalized state to false since we have custom normalization logic\n\t\tconst originalNormalized = attr.normalized;\n\t\tattr.normalized = false;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tconst ii = finalStride * i;\n\t\t\tdataArray[ ii ] = attr.getX( i ) / normalizeValue;\n\n\t\t\tif ( itemSize >= 2 ) {\n\n\t\t\t\tdataArray[ ii + 1 ] = attr.getY( i ) / normalizeValue;\n\n\t\t\t}\n\n\t\t\tif ( itemSize >= 3 ) {\n\n\t\t\t\tdataArray[ ii + 2 ] = attr.getZ( i ) / normalizeValue;\n\n\t\t\t\tif ( finalStride === 4 ) {\n\n\t\t\t\t\tdataArray[ ii + 3 ] = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( itemSize >= 4 ) {\n\n\t\t\t\tdataArray[ ii + 3 ] = attr.getW( i ) / normalizeValue;\n\n\t\t\t}\n\n\t\t}\n\n\t\tattr.normalized = originalNormalized;\n\n\t\tthis.internalFormat = internalFormat;\n\t\tthis.format = format;\n\t\tthis.type = type;\n\t\tthis.image.width = dimension;\n\t\tthis.image.height = dimension;\n\t\tthis.image.data = dataArray;\n\t\tthis.needsUpdate = true;\n\t\tthis.dispose();\n\n\t\tattr.itemSize = originalItemSize;\n\t\tattr.count = originalCount;\n\n\t}\n\n}\n\nexport class UIntVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = UnsignedIntType;\n\n\t}\n\n}\n\nexport class IntVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = IntType;\n\n\t}\n\n\n}\n\nexport class FloatVertexAttributeTexture extends VertexAttributeTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._forcedType = FloatType;\n\n\t}\n\n}\n", "import {\n\tDataTexture,\n\tFloatType,\n\tUnsignedIntType,\n\tRGBAFormat,\n\tRGIntegerFormat,\n\tNearestFilter,\n\tBufferAttribute,\n} from 'three';\nimport {\n\tFloatVertexAttributeTexture,\n\tUIntVertexAttributeTexture,\n} from './VertexAttributeTexture.js';\nimport { BYTES_PER_NODE } from '../core/Constants.js';\nimport {\n\tBOUNDING_DATA_INDEX,\n\tCOUNT,\n\tIS_LEAF,\n\tRIGHT_NODE,\n\tOFFSET,\n\tSPLIT_AXIS,\n} from '../core/utils/nodeBufferUtils.js';\nimport { getIndexArray, getVertexCount } from '../core/build/geometryUtils.js';\n\nexport class MeshBVHUniformStruct {\n\n\tconstructor() {\n\n\t\tthis.index = new UIntVertexAttributeTexture();\n\t\tthis.position = new FloatVertexAttributeTexture();\n\t\tthis.bvhBounds = new DataTexture();\n\t\tthis.bvhContents = new DataTexture();\n\t\tthis._cachedIndexAttr = null;\n\n\t\tthis.index.overrideItemSize = 3;\n\n\t}\n\n\tupdateFrom( bvh ) {\n\n\t\tconst { geometry } = bvh;\n\t\tbvhToTextures( bvh, this.bvhBounds, this.bvhContents );\n\n\t\tthis.position.updateFrom( geometry.attributes.position );\n\n\t\t// dereference a new index attribute if we're using indirect storage\n\t\tif ( bvh.indirect ) {\n\n\t\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\t\tif (\n\t\t\t\tthis._cachedIndexAttr === null ||\n\t\t\t\tthis._cachedIndexAttr.count !== indirectBuffer.length\n\t\t\t) {\n\n\t\t\t\tif ( geometry.index ) {\n\n\t\t\t\t\tthis._cachedIndexAttr = geometry.index.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst array = getIndexArray( getVertexCount( geometry ) );\n\t\t\t\t\tthis._cachedIndexAttr = new BufferAttribute( array, 1, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdereferenceIndex( geometry, indirectBuffer, this._cachedIndexAttr );\n\t\t\tthis.index.updateFrom( this._cachedIndexAttr );\n\n\t\t} else {\n\n\t\t\tthis.index.updateFrom( geometry.index );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tconst { index, position, bvhBounds, bvhContents } = this;\n\n\t\tif ( index ) index.dispose();\n\t\tif ( position ) position.dispose();\n\t\tif ( bvhBounds ) bvhBounds.dispose();\n\t\tif ( bvhContents ) bvhContents.dispose();\n\n\t}\n\n}\n\nfunction dereferenceIndex( geometry, indirectBuffer, target ) {\n\n\tconst unpacked = target.array;\n\tconst indexArray = geometry.index ? geometry.index.array : null;\n\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst v3 = 3 * indirectBuffer[ i ];\n\t\tfor ( let c = 0; c < 3; c ++ ) {\n\n\t\t\tunpacked[ i3 + c ] = indexArray ? indexArray[ v3 + c ] : v3 + c;\n\n\t\t}\n\n\t}\n\n}\n\nfunction bvhToTextures( bvh, boundsTexture, contentsTexture ) {\n\n\tconst roots = bvh._roots;\n\n\tif ( roots.length !== 1 ) {\n\n\t\tthrow new Error( 'MeshBVHUniformStruct: Multi-root BVHs not supported.' );\n\n\t}\n\n\tconst root = roots[ 0 ];\n\tconst uint16Array = new Uint16Array( root );\n\tconst uint32Array = new Uint32Array( root );\n\tconst float32Array = new Float32Array( root );\n\n\t// Both bounds need two elements per node so compute the height so it's twice as long as\n\t// the width so we can expand the row by two and still have a square texture\n\tconst nodeCount = root.byteLength / BYTES_PER_NODE;\n\tconst boundsDimension = 2 * Math.ceil( Math.sqrt( nodeCount / 2 ) );\n\tconst boundsArray = new Float32Array( 4 * boundsDimension * boundsDimension );\n\n\tconst contentsDimension = Math.ceil( Math.sqrt( nodeCount ) );\n\tconst contentsArray = new Uint32Array( 2 * contentsDimension * contentsDimension );\n\n\tfor ( let i = 0; i < nodeCount; i ++ ) {\n\n\t\tconst nodeIndex32 = i * BYTES_PER_NODE / 4;\n\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\tconst boundsIndex = BOUNDING_DATA_INDEX( nodeIndex32 );\n\t\tfor ( let b = 0; b < 3; b ++ ) {\n\n\t\t\tboundsArray[ 8 * i + 0 + b ] = float32Array[ boundsIndex + 0 + b ];\n\t\t\tboundsArray[ 8 * i + 4 + b ] = float32Array[ boundsIndex + 3 + b ];\n\n\t\t}\n\n\t\tif ( IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\n\t\t\tconst mergedLeafCount = 0xffff0000 | count;\n\t\t\tcontentsArray[ i * 2 + 0 ] = mergedLeafCount;\n\t\t\tcontentsArray[ i * 2 + 1 ] = offset;\n\n\t\t} else {\n\n\t\t\tconst rightIndex = 4 * RIGHT_NODE( nodeIndex32, uint32Array ) / BYTES_PER_NODE;\n\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\n\t\t\tcontentsArray[ i * 2 + 0 ] = splitAxis;\n\t\t\tcontentsArray[ i * 2 + 1 ] = rightIndex;\n\n\t\t}\n\n\t}\n\n\tboundsTexture.image.data = boundsArray;\n\tboundsTexture.image.width = boundsDimension;\n\tboundsTexture.image.height = boundsDimension;\n\tboundsTexture.format = RGBAFormat;\n\tboundsTexture.type = FloatType;\n\tboundsTexture.internalFormat = 'RGBA32F';\n\tboundsTexture.minFilter = NearestFilter;\n\tboundsTexture.magFilter = NearestFilter;\n\tboundsTexture.generateMipmaps = false;\n\tboundsTexture.needsUpdate = true;\n\tboundsTexture.dispose();\n\n\tcontentsTexture.image.data = contentsArray;\n\tcontentsTexture.image.width = contentsDimension;\n\tcontentsTexture.image.height = contentsDimension;\n\tcontentsTexture.format = RGIntegerFormat;\n\tcontentsTexture.type = UnsignedIntType;\n\tcontentsTexture.internalFormat = 'RG32UI';\n\tcontentsTexture.minFilter = NearestFilter;\n\tcontentsTexture.magFilter = NearestFilter;\n\tcontentsTexture.generateMipmaps = false;\n\tcontentsTexture.needsUpdate = true;\n\tcontentsTexture.dispose();\n\n}\n", "import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\n\nconst _positionVector = /*@__PURE__*/ new Vector3();\nconst _normalVector = /*@__PURE__*/ new Vector3();\nconst _tangentVector = /*@__PURE__*/ new Vector3();\nconst _tangentVector4 = /*@__PURE__*/ new Vector4();\n\nconst _morphVector = /*@__PURE__*/ new Vector3();\nconst _temp = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\n\n// Confirms that the two provided attributes are compatible\nfunction validateAttributes( attr1, attr2 ) {\n\n\tif ( ! attr1 && ! attr2 ) {\n\n\t\treturn;\n\n\t}\n\n\tconst sameCount = attr1.count === attr2.count;\n\tconst sameNormalized = attr1.normalized === attr2.normalized;\n\tconst sameType = attr1.array.constructor === attr2.array.constructor;\n\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\n\n\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\n\n\t\tthrow new Error();\n\n\t}\n\n}\n\n// Clones the given attribute with a new compatible buffer attribute but no data\nfunction createAttributeClone( attr, countOverride = null ) {\n\n\tconst cons = attr.array.constructor;\n\tconst normalized = attr.normalized;\n\tconst itemSize = attr.itemSize;\n\tconst count = countOverride === null ? attr.count : countOverride;\n\n\treturn new BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\n\n}\n\n// target offset is the number of elements in the target buffer stride to skip before copying the\n// attributes contents in to.\nfunction copyAttributeContents( attr, target, targetOffset = 0 ) {\n\n\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\tconst itemSize = attr.itemSize;\n\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\n\n\t\t\tconst io = i + targetOffset;\n\t\t\ttarget.setX( io, attr.getX( i ) );\n\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\n\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\n\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = target.array;\n\t\tconst cons = array.constructor;\n\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\n\t\ttemp.set( attr.array );\n\n\t}\n\n}\n\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\nfunction addScaledMatrix( target, matrix, scale ) {\n\n\tconst targetArray = target.elements;\n\tconst matrixArray = matrix.elements;\n\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\n\n\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\n\n\t}\n\n}\n\n// A version of \"SkinnedMesh.boneTransform\" for normals\nfunction boneNormalTransform( mesh, index, target ) {\n\n\tconst skeleton = mesh.skeleton;\n\tconst geometry = mesh.geometry;\n\tconst bones = skeleton.bones;\n\tconst boneInverses = skeleton.boneInverses;\n\n\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t_matrix.elements.fill( 0 );\n\n\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\tif ( weight !== 0 ) {\n\n\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\n\n\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\n\n\t\t}\n\n\t}\n\n\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\n\ttarget.transformDirection( _matrix );\n\n\treturn target;\n\n}\n\n// Applies the morph target data to the target vector\nfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\n\n\t_morphVector.set( 0, 0, 0 );\n\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\n\n\t\tconst influence = morphInfluences[ j ];\n\t\tconst morphAttribute = morphData[ j ];\n\n\t\tif ( influence === 0 ) continue;\n\n\t\t_temp.fromBufferAttribute( morphAttribute, i );\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\t_morphVector.addScaledVector( _temp, influence );\n\n\t\t} else {\n\n\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\n\n\t\t}\n\n\t}\n\n\ttarget.add( _morphVector );\n\n}\n\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in place\nfunction mergeBufferGeometries( geometries, options = { useGroups: false, updateIndex: false, skipAttributes: [] }, targetGeometry = new BufferGeometry() ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\tconst { useGroups = false, updateIndex = false, skipAttributes = [] } = options;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst attributes = {};\n\n\tlet offset = 0;\n\n\ttargetGeometry.clearGroups();\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) {\n\n\t\t\t\tattributes[ name ] = [];\n\n\t\t\t}\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tthrow new Error( 'StaticGeometryGenerator: Make sure all geometries have the same number of attributes.' );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: The geometry must have either an index or a position attribute' );\n\n\t\t\t}\n\n\t\t\ttargetGeometry.addGroup( offset, count, i );\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\tif ( isIndexed ) {\n\n\t\tlet forceUpdateIndex = false;\n\t\tif ( ! targetGeometry.index ) {\n\n\t\t\tlet indexCount = 0;\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tindexCount += geometries[ i ].index.count;\n\n\t\t\t}\n\n\t\t\ttargetGeometry.setIndex( new BufferAttribute( new Uint32Array( indexCount ), 1, false ) );\n\t\t\tforceUpdateIndex = true;\n\n\t\t}\n\n\t\tif ( updateIndex || forceUpdateIndex ) {\n\n\t\t\tconst targetIndex = targetGeometry.index;\n\t\t\tlet targetOffset = 0;\n\t\t\tlet indexOffset = 0;\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tif ( skipAttributes[ i ] !== true ) {\n\n\t\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\t\ttargetIndex.setX( targetOffset, index.getX( j ) + indexOffset );\n\t\t\t\t\t\ttargetOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometry.attributes.position.count;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// merge attributes\n\tfor ( const name in attributes ) {\n\n\t\tconst attrList = attributes[ name ];\n\t\tif ( ! ( name in targetGeometry.attributes ) ) {\n\n\t\t\tlet count = 0;\n\t\t\tfor ( const key in attrList ) {\n\n\t\t\t\tcount += attrList[ key ].count;\n\n\t\t\t}\n\n\t\t\ttargetGeometry.setAttribute( name, createAttributeClone( attributes[ name ][ 0 ], count ) );\n\n\t\t}\n\n\t\tconst targetAttribute = targetGeometry.attributes[ name ];\n\t\tlet offset = 0;\n\t\tfor ( let i = 0, l = attrList.length; i < l; i ++ ) {\n\n\t\t\tconst attr = attrList[ i ];\n\t\t\tif ( skipAttributes[ i ] !== true ) {\n\n\t\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\n\n\t\t\t}\n\n\t\t\toffset += attr.count;\n\n\t\t}\n\n\t}\n\n\treturn targetGeometry;\n\n}\n\nfunction checkTypedArrayEquality( a, b ) {\n\n\tif ( a === null || b === null ) {\n\n\t\treturn a === b;\n\n\t}\n\n\tif ( a.length !== b.length ) {\n\n\t\treturn false;\n\n\t}\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nfunction invertGeometry( geometry ) {\n\n\tconst { index, attributes } = geometry;\n\tif ( index ) {\n\n\t\tfor ( let i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\tconst v0 = index.getX( i );\n\t\t\tconst v2 = index.getX( i + 2 );\n\t\t\tindex.setX( i, v2 );\n\t\t\tindex.setX( i + 2, v0 );\n\n\t\t}\n\n\t} else {\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attr = attributes[ key ];\n\t\t\tconst itemSize = attr.itemSize;\n\t\t\tfor ( let i = 0, l = attr.count; i < l; i += 3 ) {\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tconst v0 = attr.getComponent( i, j );\n\t\t\t\t\tconst v2 = attr.getComponent( i + 2, j );\n\t\t\t\t\tattr.setComponent( i, j, v2 );\n\t\t\t\t\tattr.setComponent( i + 2, j, v0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n\n}\n\n// Checks whether the geometry changed between this and last evaluation\nclass GeometryDiff {\n\n\tconstructor( mesh ) {\n\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.geometryHash = null;\n\t\tthis.boneMatrices = null;\n\t\tthis.primitiveCount = - 1;\n\t\tthis.mesh = mesh;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.mesh;\n\t\tconst geometry = mesh.geometry;\n\t\tconst skeleton = mesh.skeleton;\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\tthis.matrixWorld.copy( mesh.matrixWorld );\n\t\tthis.geometryHash = geometry.attributes.position.version;\n\t\tthis.primitiveCount = primitiveCount;\n\n\t\tif ( skeleton ) {\n\n\t\t\t// ensure the bone matrix array is updated to the appropriate length\n\t\t\tif ( ! skeleton.boneTexture ) {\n\n\t\t\t\tskeleton.computeBoneTexture();\n\n\t\t\t}\n\n\t\t\tskeleton.update();\n\n\t\t\t// copy data if possible otherwise clone it\n\t\t\tconst boneMatrices = skeleton.boneMatrices;\n\t\t\tif ( ! this.boneMatrices || this.boneMatrices.length !== boneMatrices.length ) {\n\n\t\t\t\tthis.boneMatrices = boneMatrices.slice();\n\n\t\t\t} else {\n\n\t\t\t\tthis.boneMatrices.set( boneMatrices );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boneMatrices = null;\n\n\t\t}\n\n\t}\n\n\tdidChange() {\n\n\t\tconst mesh = this.mesh;\n\t\tconst geometry = mesh.geometry;\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\tconst identical =\n\t\t\tthis.matrixWorld.equals( mesh.matrixWorld ) &&\n\t\t\tthis.geometryHash === geometry.attributes.position.version &&\n\t\t\tcheckTypedArrayEquality( mesh.skeleton && mesh.skeleton.boneMatrices || null, this.boneMatrices ) &&\n\t\t\tthis.primitiveCount === primitiveCount;\n\n\t\treturn ! identical;\n\n\t}\n\n}\n\nexport class StaticGeometryGenerator {\n\n\tconstructor( meshes ) {\n\n\t\tif ( ! Array.isArray( meshes ) ) {\n\n\t\t\tmeshes = [ meshes ];\n\n\t\t}\n\n\t\tconst finalMeshes = [];\n\t\tmeshes.forEach( object => {\n\n\t\t\tobject.traverseVisible( c => {\n\n\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\tfinalMeshes.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tthis.meshes = finalMeshes;\n\t\tthis.useGroups = true;\n\t\tthis.applyWorldTransforms = true;\n\t\tthis.attributes = [ 'position', 'normal', 'color', 'tangent', 'uv', 'uv2' ];\n\t\tthis._intermediateGeometry = new Array( finalMeshes.length ).fill().map( () => new BufferGeometry() );\n\t\tthis._diffMap = new WeakMap();\n\n\t}\n\n\tgetMaterials() {\n\n\t\tconst materials = [];\n\t\tthis.meshes.forEach( mesh => {\n\n\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\tmaterials.push( ...mesh.material );\n\n\t\t\t} else {\n\n\t\t\t\tmaterials.push( mesh.material );\n\n\t\t\t}\n\n\t\t} );\n\t\treturn materials;\n\n\t}\n\n\tgenerate( targetGeometry = new BufferGeometry() ) {\n\n\t\t// track which attributes have been updated and which to skip to avoid unnecessary attribute copies\n\t\tlet skipAttributes = [];\n\t\tconst { meshes, useGroups, _intermediateGeometry, _diffMap } = this;\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\tconst mesh = meshes[ i ];\n\t\t\tconst geom = _intermediateGeometry[ i ];\n\t\t\tconst diff = _diffMap.get( mesh );\n\t\t\tif ( ! diff || diff.didChange( mesh ) ) {\n\n\t\t\t\tthis._convertToStaticGeometry( mesh, geom );\n\t\t\t\tskipAttributes.push( false );\n\n\t\t\t\tif ( ! diff ) {\n\n\t\t\t\t\t_diffMap.set( mesh, new GeometryDiff( mesh ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdiff.update();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tskipAttributes.push( true );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( _intermediateGeometry.length === 0 ) {\n\n\t\t\t// if there are no geometries then just create a fake empty geometry to provide\n\t\t\ttargetGeometry.setIndex( null );\n\n\t\t\t// remove all geometry\n\t\t\tconst attrs = targetGeometry.attributes;\n\t\t\tfor ( const key in attrs ) {\n\n\t\t\t\ttargetGeometry.deleteAttribute( key );\n\n\t\t\t}\n\n\t\t\t// create dummy attributes\n\t\t\tfor ( const key in this.attributes ) {\n\n\t\t\t\ttargetGeometry.setAttribute( this.attributes[ key ], new BufferAttribute( new Float32Array( 0 ), 4, false ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tmergeBufferGeometries( _intermediateGeometry, { useGroups, skipAttributes }, targetGeometry );\n\n\t\t}\n\n\t\tfor ( const key in targetGeometry.attributes ) {\n\n\t\t\ttargetGeometry.attributes[ key ].needsUpdate = true;\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n\t_convertToStaticGeometry( mesh, targetGeometry = new BufferGeometry() ) {\n\n\t\tconst geometry = mesh.geometry;\n\t\tconst applyWorldTransforms = this.applyWorldTransforms;\n\t\tconst includeNormal = this.attributes.includes( 'normal' );\n\t\tconst includeTangent = this.attributes.includes( 'tangent' );\n\t\tconst attributes = geometry.attributes;\n\t\tconst targetAttributes = targetGeometry.attributes;\n\n\t\t// initialize the attributes if they don't exist\n\t\tif ( ! targetGeometry.index && geometry.index ) {\n\n\t\t\ttargetGeometry.index = geometry.index.clone();\n\n\t\t}\n\n\t\tif ( ! targetAttributes.position ) {\n\n\t\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\n\n\t\t}\n\n\t\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\n\n\t\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\n\n\t\t}\n\n\t\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\n\n\t\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\n\n\t\t}\n\n\t\t// ensure the attributes are consistent\n\t\tvalidateAttributes( geometry.index, targetGeometry.index );\n\t\tvalidateAttributes( attributes.position, targetAttributes.position );\n\n\t\tif ( includeNormal ) {\n\n\t\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\n\n\t\t}\n\n\t\tif ( includeTangent ) {\n\n\t\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\n\n\t\t}\n\n\t\t// generate transformed vertex attribute data\n\t\tconst position = attributes.position;\n\t\tconst normal = includeNormal ? attributes.normal : null;\n\t\tconst tangent = includeTangent ? attributes.tangent : null;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphNormal = geometry.morphAttributes.normal;\n\t\tconst morphTangent = geometry.morphAttributes.tangent;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\tconst morphInfluences = mesh.morphTargetInfluences;\n\t\tconst normalMatrix = new Matrix3();\n\t\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\n\n\t\t// copy the index\n\t\tif ( geometry.index ) {\n\n\t\t\ttargetGeometry.index.array.set( geometry.index.array );\n\n\t\t}\n\n\t\t// copy and apply other attributes\n\t\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\n\n\t\t\t_positionVector.fromBufferAttribute( position, i );\n\t\t\tif ( normal ) {\n\n\t\t\t\t_normalVector.fromBufferAttribute( normal, i );\n\n\t\t\t}\n\n\t\t\tif ( tangent ) {\n\n\t\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\n\t\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\n\n\t\t\t}\n\n\t\t\t// apply morph target transform\n\t\t\tif ( morphInfluences ) {\n\n\t\t\t\tif ( morphPosition ) {\n\n\t\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphNormal ) {\n\n\t\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphTangent ) {\n\n\t\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// apply bone transform\n\t\t\tif ( mesh.isSkinnedMesh ) {\n\n\t\t\t\tmesh.applyBoneTransform( i, _positionVector );\n\t\t\t\tif ( normal ) {\n\n\t\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( tangent ) {\n\n\t\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the vectors of the attributes\n\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\n\n\t\t\tif ( normal ) {\n\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\n\n\t\t\t}\n\n\t\t\tif ( tangent ) {\n\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// copy other attributes over\n\t\tfor ( const i in this.attributes ) {\n\n\t\t\tconst key = this.attributes[ i ];\n\t\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( ! targetAttributes[ key ] ) {\n\n\t\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\n\n\t\t\t}\n\n\t\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\n\t\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\n\n\t\t}\n\n\t\tif ( mesh.matrixWorld.determinant() < 0 ) {\n\n\t\t\tinvertGeometry( targetGeometry );\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n}\n", "export const common_functions = /* glsl */`\n\n// A stack of uint32 indices can can store the indices for\n// a perfectly balanced tree with a depth up to 31. Lower stack\n// depth gets higher performance.\n//\n// However not all trees are balanced. Best value to set this to\n// is the trees max depth.\n#ifndef BVH_STACK_DEPTH\n#define BVH_STACK_DEPTH 60\n#endif\n\n#ifndef INFINITY\n#define INFINITY 1e20\n#endif\n\n// Utilities\nuvec4 uTexelFetch1D( usampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nivec4 iTexelFetch1D( isampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nvec4 texelFetch1D( sampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nvec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {\n\n\treturn\n\t\tbarycoord.x * texelFetch1D( tex, faceIndices.x ) +\n\t\tbarycoord.y * texelFetch1D( tex, faceIndices.y ) +\n\t\tbarycoord.z * texelFetch1D( tex, faceIndices.z );\n\n}\n\nvoid ndcToCameraRay(\n\tvec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,\n\tout vec3 rayOrigin, out vec3 rayDirection\n) {\n\n\t// get camera look direction and near plane for camera clipping\n\tvec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );\n\tvec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );\n\tfloat near = abs( nearVector.z / nearVector.w );\n\n\t// get the camera direction and position from camera matrices\n\tvec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );\n\tdirection /= direction.w;\n\tdirection = cameraWorld * direction - origin;\n\n\t// slide the origin along the ray until it sits at the near clip plane position\n\torigin.xyz += direction.xyz * near / dot( direction, lookDirection );\n\n\trayOrigin = origin.xyz;\n\trayDirection = direction.xyz;\n\n}\n`;\n", "// Distance to Point\nexport const bvh_distance_functions = /* glsl */`\n\nfloat dot2( vec3 v ) {\n\n\treturn dot( v, v );\n\n}\n\n// https://www.shadertoy.com/view/ttfGWl\nvec3 closestPointToTriangle( vec3 p, vec3 v0, vec3 v1, vec3 v2, out vec3 barycoord ) {\n\n    vec3 v10 = v1 - v0;\n    vec3 v21 = v2 - v1;\n    vec3 v02 = v0 - v2;\n\n\tvec3 p0 = p - v0;\n\tvec3 p1 = p - v1;\n\tvec3 p2 = p - v2;\n\n    vec3 nor = cross( v10, v02 );\n\n    // method 2, in barycentric space\n    vec3  q = cross( nor, p0 );\n    float d = 1.0 / dot2( nor );\n    float u = d * dot( q, v02 );\n    float v = d * dot( q, v10 );\n    float w = 1.0 - u - v;\n\n\tif( u < 0.0 ) {\n\n\t\tw = clamp( dot( p2, v02 ) / dot2( v02 ), 0.0, 1.0 );\n\t\tu = 0.0;\n\t\tv = 1.0 - w;\n\n\t} else if( v < 0.0 ) {\n\n\t\tu = clamp( dot( p0, v10 ) / dot2( v10 ), 0.0, 1.0 );\n\t\tv = 0.0;\n\t\tw = 1.0 - u;\n\n\t} else if( w < 0.0 ) {\n\n\t\tv = clamp( dot( p1, v21 ) / dot2( v21 ), 0.0, 1.0 );\n\t\tw = 0.0;\n\t\tu = 1.0-v;\n\n\t}\n\n\tbarycoord = vec3( u, v, w );\n    return u * v1 + v * v2 + w * v0;\n\n}\n\nfloat distanceToTriangles(\n\t// geometry info and triangle range\n\tsampler2D positionAttr, usampler2D indexAttr, uint offset, uint count,\n\n\t// point and cut off range\n\tvec3 point, float closestDistanceSquared,\n\n\t// outputs\n\tinout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord, inout float side, inout vec3 outPoint\n) {\n\n\tbool found = false;\n\tvec3 localBarycoord;\n\tfor ( uint i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\tuvec3 indices = uTexelFetch1D( indexAttr, i ).xyz;\n\t\tvec3 a = texelFetch1D( positionAttr, indices.x ).rgb;\n\t\tvec3 b = texelFetch1D( positionAttr, indices.y ).rgb;\n\t\tvec3 c = texelFetch1D( positionAttr, indices.z ).rgb;\n\n\t\t// get the closest point and barycoord\n\t\tvec3 closestPoint = closestPointToTriangle( point, a, b, c, localBarycoord );\n\t\tvec3 delta = point - closestPoint;\n\t\tfloat sqDist = dot2( delta );\n\t\tif ( sqDist < closestDistanceSquared ) {\n\n\t\t\t// set the output results\n\t\t\tclosestDistanceSquared = sqDist;\n\t\t\tfaceIndices = uvec4( indices.xyz, i );\n\t\t\tfaceNormal = normalize( cross( a - b, b - c ) );\n\t\t\tbarycoord = localBarycoord;\n\t\t\toutPoint = closestPoint;\n\t\t\tside = sign( dot( faceNormal, delta ) );\n\n\t\t}\n\n\t}\n\n\treturn closestDistanceSquared;\n\n}\n\nfloat distanceSqToBounds( vec3 point, vec3 boundsMin, vec3 boundsMax ) {\n\n\tvec3 clampedPoint = clamp( point, boundsMin, boundsMax );\n\tvec3 delta = point - clampedPoint;\n\treturn dot( delta, delta );\n\n}\n\nfloat distanceSqToBVHNodeBoundsPoint( vec3 point, sampler2D bvhBounds, uint currNodeIndex ) {\n\n\tuint cni2 = currNodeIndex * 2u;\n\tvec3 boundsMin = texelFetch1D( bvhBounds, cni2 ).xyz;\n\tvec3 boundsMax = texelFetch1D( bvhBounds, cni2 + 1u ).xyz;\n\treturn distanceSqToBounds( point, boundsMin, boundsMax );\n\n}\n\n// use a macro to hide the fact that we need to expand the struct into separate fields\n#define\\\n\tbvhClosestPointToPoint(\\\n\t\tbvh,\\\n\t\tpoint, faceIndices, faceNormal, barycoord, side, outPoint\\\n\t)\\\n\t_bvhClosestPointToPoint(\\\n\t\tbvh.position, bvh.index, bvh.bvhBounds, bvh.bvhContents,\\\n\t\tpoint, faceIndices, faceNormal, barycoord, side, outPoint\\\n\t)\n\nfloat _bvhClosestPointToPoint(\n\t// bvh info\n\tsampler2D bvh_position, usampler2D bvh_index, sampler2D bvh_bvhBounds, usampler2D bvh_bvhContents,\n\n\t// point to check\n\tvec3 point,\n\n\t// output variables\n\tinout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,\n\tinout float side, inout vec3 outPoint\n ) {\n\n\t// stack needs to be twice as long as the deepest tree we expect because\n\t// we push both the left and right child onto the stack every traversal\n\tint ptr = 0;\n\tuint stack[ BVH_STACK_DEPTH ];\n\tstack[ 0 ] = 0u;\n\n\tfloat closestDistanceSquared = pow( 100000.0, 2.0 );\n\tbool found = false;\n\twhile ( ptr > - 1 && ptr < BVH_STACK_DEPTH ) {\n\n\t\tuint currNodeIndex = stack[ ptr ];\n\t\tptr --;\n\n\t\t// check if we intersect the current bounds\n\t\tfloat boundsHitDistance = distanceSqToBVHNodeBoundsPoint( point, bvh_bvhBounds, currNodeIndex );\n\t\tif ( boundsHitDistance > closestDistanceSquared ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tuvec2 boundsInfo = uTexelFetch1D( bvh_bvhContents, currNodeIndex ).xy;\n\t\tbool isLeaf = bool( boundsInfo.x & 0xffff0000u );\n\t\tif ( isLeaf ) {\n\n\t\t\tuint count = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint offset = boundsInfo.y;\n\t\t\tclosestDistanceSquared = distanceToTriangles(\n\t\t\t\tbvh_position, bvh_index, offset, count, point, closestDistanceSquared,\n\n\t\t\t\t// outputs\n\t\t\t\tfaceIndices, faceNormal, barycoord, side, outPoint\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tuint leftIndex = currNodeIndex + 1u;\n\t\t\tuint splitAxis = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint rightIndex = boundsInfo.y;\n\t\t\tbool leftToRight = distanceSqToBVHNodeBoundsPoint( point, bvh_bvhBounds, leftIndex ) < distanceSqToBVHNodeBoundsPoint( point, bvh_bvhBounds, rightIndex );//rayDirection[ splitAxis ] >= 0.0;\n\t\t\tuint c1 = leftToRight ? leftIndex : rightIndex;\n\t\t\tuint c2 = leftToRight ? rightIndex : leftIndex;\n\n\t\t\t// set c2 in the stack so we traverse it later. We need to keep track of a pointer in\n\t\t\t// the stack while we traverse. The second pointer added is the one that will be\n\t\t\t// traversed first\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c2;\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c1;\n\n\t\t}\n\n\t}\n\n\treturn sqrt( closestDistanceSquared );\n\n}\n`;\n", "export const bvh_ray_functions = /* glsl */`\n\n#ifndef TRI_INTERSECT_EPSILON\n#define TRI_INTERSECT_EPSILON 1e-5\n#endif\n\n// Raycasting\nbool intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax, out float dist ) {\n\n\t// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/\n\t// https://tavianator.com/2011/ray_box.html\n\tvec3 invDir = 1.0 / rayDirection;\n\n\t// find intersection distances for each plane\n\tvec3 tMinPlane = invDir * ( boundsMin - rayOrigin );\n\tvec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );\n\n\t// get the min and max distances from each intersection\n\tvec3 tMinHit = min( tMaxPlane, tMinPlane );\n\tvec3 tMaxHit = max( tMaxPlane, tMinPlane );\n\n\t// get the furthest hit distance\n\tvec2 t = max( tMinHit.xx, tMinHit.yz );\n\tfloat t0 = max( t.x, t.y );\n\n\t// get the minimum hit distance\n\tt = min( tMaxHit.xx, tMaxHit.yz );\n\tfloat t1 = min( t.x, t.y );\n\n\t// set distance to 0.0 if the ray starts inside the box\n\tdist = max( t0, 0.0 );\n\n\treturn t1 >= dist;\n\n}\n\nbool intersectsTriangle(\n\tvec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,\n\tout vec3 barycoord, out vec3 norm, out float dist, out float side\n) {\n\n\t// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d\n\tvec3 edge1 = b - a;\n\tvec3 edge2 = c - a;\n\tnorm = cross( edge1, edge2 );\n\n\tfloat det = - dot( rayDirection, norm );\n\tfloat invdet = 1.0 / det;\n\n\tvec3 AO = rayOrigin - a;\n\tvec3 DAO = cross( AO, rayDirection );\n\n\tvec4 uvt;\n\tuvt.x = dot( edge2, DAO ) * invdet;\n\tuvt.y = - dot( edge1, DAO ) * invdet;\n\tuvt.z = dot( AO, norm ) * invdet;\n\tuvt.w = 1.0 - uvt.x - uvt.y;\n\n\t// set the hit information\n\tbarycoord = uvt.wxy; // arranged in A, B, C order\n\tdist = uvt.z;\n\tside = sign( det );\n\tnorm = side * normalize( norm );\n\n\t// add an epsilon to avoid misses between triangles\n\tuvt += vec4( TRI_INTERSECT_EPSILON );\n\n\treturn all( greaterThanEqual( uvt, vec4( 0.0 ) ) );\n\n}\n\nbool intersectTriangles(\n\t// geometry info and triangle range\n\tsampler2D positionAttr, usampler2D indexAttr, uint offset, uint count,\n\n\t// ray\n\tvec3 rayOrigin, vec3 rayDirection,\n\n\t// outputs\n\tinout float minDistance, inout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,\n\tinout float side, inout float dist\n) {\n\n\tbool found = false;\n\tvec3 localBarycoord, localNormal;\n\tfloat localDist, localSide;\n\tfor ( uint i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\tuvec3 indices = uTexelFetch1D( indexAttr, i ).xyz;\n\t\tvec3 a = texelFetch1D( positionAttr, indices.x ).rgb;\n\t\tvec3 b = texelFetch1D( positionAttr, indices.y ).rgb;\n\t\tvec3 c = texelFetch1D( positionAttr, indices.z ).rgb;\n\n\t\tif (\n\t\t\tintersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )\n\t\t\t&& localDist < minDistance\n\t\t) {\n\n\t\t\tfound = true;\n\t\t\tminDistance = localDist;\n\n\t\t\tfaceIndices = uvec4( indices.xyz, i );\n\t\t\tfaceNormal = localNormal;\n\n\t\t\tside = localSide;\n\t\t\tbarycoord = localBarycoord;\n\t\t\tdist = localDist;\n\n\t\t}\n\n\t}\n\n\treturn found;\n\n}\n\nbool intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, sampler2D bvhBounds, uint currNodeIndex, out float dist ) {\n\n\tuint cni2 = currNodeIndex * 2u;\n\tvec3 boundsMin = texelFetch1D( bvhBounds, cni2 ).xyz;\n\tvec3 boundsMax = texelFetch1D( bvhBounds, cni2 + 1u ).xyz;\n\treturn intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax, dist );\n\n}\n\n// use a macro to hide the fact that we need to expand the struct into separate fields\n#define\\\n\tbvhIntersectFirstHit(\\\n\t\tbvh,\\\n\t\trayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist\\\n\t)\\\n\t_bvhIntersectFirstHit(\\\n\t\tbvh.position, bvh.index, bvh.bvhBounds, bvh.bvhContents,\\\n\t\trayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist\\\n\t)\n\nbool _bvhIntersectFirstHit(\n\t// bvh info\n\tsampler2D bvh_position, usampler2D bvh_index, sampler2D bvh_bvhBounds, usampler2D bvh_bvhContents,\n\n\t// ray\n\tvec3 rayOrigin, vec3 rayDirection,\n\n\t// output variables split into separate variables due to output precision\n\tinout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,\n\tinout float side, inout float dist\n) {\n\n\t// stack needs to be twice as long as the deepest tree we expect because\n\t// we push both the left and right child onto the stack every traversal\n\tint ptr = 0;\n\tuint stack[ BVH_STACK_DEPTH ];\n\tstack[ 0 ] = 0u;\n\n\tfloat triangleDistance = INFINITY;\n\tbool found = false;\n\twhile ( ptr > - 1 && ptr < BVH_STACK_DEPTH ) {\n\n\t\tuint currNodeIndex = stack[ ptr ];\n\t\tptr --;\n\n\t\t// check if we intersect the current bounds\n\t\tfloat boundsHitDistance;\n\t\tif (\n\t\t\t! intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh_bvhBounds, currNodeIndex, boundsHitDistance )\n\t\t\t|| boundsHitDistance > triangleDistance\n\t\t) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tuvec2 boundsInfo = uTexelFetch1D( bvh_bvhContents, currNodeIndex ).xy;\n\t\tbool isLeaf = bool( boundsInfo.x & 0xffff0000u );\n\n\t\tif ( isLeaf ) {\n\n\t\t\tuint count = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint offset = boundsInfo.y;\n\n\t\t\tfound = intersectTriangles(\n\t\t\t\tbvh_position, bvh_index, offset, count,\n\t\t\t\trayOrigin, rayDirection, triangleDistance,\n\t\t\t\tfaceIndices, faceNormal, barycoord, side, dist\n\t\t\t) || found;\n\n\t\t} else {\n\n\t\t\tuint leftIndex = currNodeIndex + 1u;\n\t\t\tuint splitAxis = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint rightIndex = boundsInfo.y;\n\n\t\t\tbool leftToRight = rayDirection[ splitAxis ] >= 0.0;\n\t\t\tuint c1 = leftToRight ? leftIndex : rightIndex;\n\t\t\tuint c2 = leftToRight ? rightIndex : leftIndex;\n\n\t\t\t// set c2 in the stack so we traverse it later. We need to keep track of a pointer in\n\t\t\t// the stack while we traverse. The second pointer added is the one that will be\n\t\t\t// traversed first\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c2;\n\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c1;\n\n\t\t}\n\n\t}\n\n\treturn found;\n\n}\n`;\n", "// Note that a struct cannot be used for the hit record including faceIndices, faceNormal, barycoord,\n// side, and dist because on some mobile GPUS (such as Adreno) numbers are afforded less precision specifically\n// when in a struct leading to inaccurate hit results. See KhronosGroup/WebGL#3351 for more details.\nexport const bvh_struct_definitions = /* glsl */`\nstruct BVH {\n\n\tusampler2D index;\n\tsampler2D position;\n\n\tsampler2D bvhBounds;\n\tusampler2D bvhContents;\n\n};\n`;\n", "export { MeshBVH } from './core/MeshBVH.js';\nexport { MeshBVHHelper } from './objects/MeshBVHHelper.js';\nexport { CENTER, AVERAGE, SAH, NOT_INTERSECTED, INTERSECTED, CONTAINED } from './core/Constants.js';\nexport { getBVHExtremes, estimateMemoryInBytes, getJSONStructure, validateBounds } from './debug/Debug.js';\nexport * from './utils/ExtensionUtilities.js';\nexport { getTriangleHitPointInfo } from './utils/TriangleUtilities.js';\nexport * from './math/ExtendedTriangle.js';\nexport * from './math/OrientedBox.js';\nexport * from './gpu/MeshBVHUniformStruct.js';\nexport * from './gpu/VertexAttributeTexture.js';\nexport * from './utils/StaticGeometryGenerator.js';\nexport * as BVHShaderGLSL from './gpu/BVHShaderGLSL.js';\n\n// backwards compatibility\nimport * as BVHShaderGLSL from './gpu/BVHShaderGLSL.js';\nexport const shaderStructs = BVHShaderGLSL.bvh_struct_definitions;\nexport const shaderDistanceFunction = BVHShaderGLSL.bvh_distance_functions;\nexport const shaderIntersectFunction = `\n\t${ BVHShaderGLSL.common_functions }\n\t${ BVHShaderGLSL.bvh_ray_functions }\n`;\n", "/**\r\n * World Generator - Creates and populates the game world\r\n * Spawns cities, NPCs, resources, and quest locations\r\n */\r\n\r\nimport type { World } from '../../types'\r\nimport type { Vector3 } from '../types'\r\n\r\nexport interface WorldRegion {\r\n  id: string\r\n  name: string\r\n  bounds: {\r\n    min: Vector3\r\n    max: Vector3\r\n  }\r\n  type: RegionType\r\n  level: number // Recommended player level\r\n  features: string[]\r\n}\r\n\r\nexport enum RegionType {\r\n  CITY = 'city',\r\n  WILDERNESS = 'wilderness',\r\n  DUNGEON = 'dungeon',\r\n  VILLAGE = 'village',\r\n  FOREST = 'forest',\r\n  DESERT = 'desert',\r\n  MOUNTAIN = 'mountain',\r\n  SWAMP = 'swamp'\r\n}\r\n\r\nexport interface SpawnDefinition {\r\n  type: 'npc' | 'resource' | 'item' | 'building'\r\n  id: string\r\n  position: Vector3\r\n  rotation?: number\r\n  metadata?: any\r\n}\r\n\r\nexport class WorldGenerator {\r\n  private world: World\r\n  private regions: Map<string, WorldRegion> = new Map()\r\n  private spawnPoints: SpawnDefinition[] = []\r\n  \r\n  constructor(world: World) {\r\n    this.world = world\r\n  }\r\n\r\n  /**\r\n   * Generate the entire game world\r\n   */\r\n  async generateWorld(): Promise<void> {\r\n    console.log('[WorldGenerator] Starting world generation...')\r\n    \r\n    // Create regions\r\n    this.createRegions()\r\n    \r\n    // Generate terrain (placeholder for actual terrain generation)\r\n    await this.generateTerrain()\r\n    \r\n    // Generate cities and villages\r\n    await this.generateCities()\r\n    \r\n    // Generate wilderness areas\r\n    await this.generateWilderness()\r\n    \r\n    // Generate dungeons\r\n    await this.generateDungeons()\r\n    \r\n    // Spawn all entities\r\n    await this.spawnEntities()\r\n    \r\n    console.log('[WorldGenerator] World generation complete!')\r\n  }\r\n\r\n  /**\r\n   * Create world regions\r\n   */\r\n  private createRegions(): void {\r\n    // Main city - Lumbridge equivalent\r\n    this.addRegion({\r\n      id: 'lumbridge',\r\n      name: 'Lumbridge',\r\n      bounds: {\r\n        min: { x: -100, y: 0, z: -100 },\r\n        max: { x: 100, y: 50, z: 100 }\r\n      },\r\n      type: RegionType.CITY,\r\n      level: 1,\r\n      features: ['castle', 'general_store', 'bank', 'church', 'graveyard']\r\n    })\r\n\r\n    // Starting village - Tutorial Island equivalent\r\n    this.addRegion({\r\n      id: 'tutorial_island',\r\n      name: 'Tutorial Island',\r\n      bounds: {\r\n        min: { x: -500, y: 0, z: -500 },\r\n        max: { x: -300, y: 30, z: -300 }\r\n      },\r\n      type: RegionType.VILLAGE,\r\n      level: 1,\r\n      features: ['tutorial_npcs', 'training_dummies', 'basic_resources']\r\n    })\r\n\r\n    // Varrock - Major city\r\n    this.addRegion({\r\n      id: 'varrock',\r\n      name: 'Varrock',\r\n      bounds: {\r\n        min: { x: 200, y: 0, z: -200 },\r\n        max: { x: 500, y: 60, z: 100 }\r\n      },\r\n      type: RegionType.CITY,\r\n      level: 10,\r\n      features: ['grand_exchange', 'palace', 'museum', 'bank', 'shops']\r\n    })\r\n\r\n    // Wilderness\r\n    this.addRegion({\r\n      id: 'wilderness',\r\n      name: 'The Wilderness',\r\n      bounds: {\r\n        min: { x: -200, y: 0, z: 200 },\r\n        max: { x: 200, y: 50, z: 600 }\r\n      },\r\n      type: RegionType.WILDERNESS,\r\n      level: 20,\r\n      features: ['pvp_enabled', 'dangerous_npcs', 'rare_resources']\r\n    })\r\n\r\n    // Forest area\r\n    this.addRegion({\r\n      id: 'misthalin_forest',\r\n      name: 'Misthalin Forest',\r\n      bounds: {\r\n        min: { x: -300, y: 0, z: -100 },\r\n        max: { x: -100, y: 40, z: 100 }\r\n      },\r\n      type: RegionType.FOREST,\r\n      level: 5,\r\n      features: ['trees', 'wildlife', 'hidden_paths']\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add a region\r\n   */\r\n  private addRegion(region: WorldRegion): void {\r\n    this.regions.set(region.id, region)\r\n  }\r\n\r\n  /**\r\n   * Generate terrain (placeholder)\r\n   */\r\n  private async generateTerrain(): Promise<void> {\r\n    // In a real implementation, this would generate heightmaps,\r\n    // place terrain textures, create rivers, etc.\r\n    console.log('[WorldGenerator] Generating terrain...')\r\n  }\r\n\r\n  /**\r\n   * Generate cities\r\n   */\r\n  private async generateCities(): Promise<void> {\r\n    console.log('[WorldGenerator] Generating cities...')\r\n    \r\n    // Generate Lumbridge\r\n    await this.generateLumbridge()\r\n    \r\n    // Generate Varrock\r\n    await this.generateVarrock()\r\n    \r\n    // Generate Tutorial Island\r\n    await this.generateTutorialIsland()\r\n  }\r\n\r\n  /**\r\n   * Generate Lumbridge\r\n   */\r\n  private async generateLumbridge(): Promise<void> {\r\n    const region = this.regions.get('lumbridge')\r\n    if (!region) return\r\n\r\n    // Castle\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'lumbridge_castle',\r\n      position: { x: 0, y: 0, z: 0 },\r\n      metadata: {\r\n        name: 'Lumbridge Castle',\r\n        floors: 3,\r\n        rooms: ['throne_room', 'kitchen', 'bank', 'courtyard']\r\n      }\r\n    })\r\n\r\n    // General Store\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'lumbridge_general_store',\r\n      position: { x: 30, y: 0, z: 20 },\r\n      metadata: {\r\n        name: 'Bob\\'s Brilliant Axes',\r\n        shopType: 'general'\r\n      }\r\n    })\r\n\r\n    // Bank\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'lumbridge_bank',\r\n      position: { x: 0, y: 0, z: 30 },\r\n      metadata: {\r\n        name: 'Lumbridge Bank',\r\n        bankChests: 5\r\n      }\r\n    })\r\n\r\n    // NPCs\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'duke_horacio',\r\n      position: { x: 0, y: 10, z: 0 },\r\n      metadata: {\r\n        name: 'Duke Horacio',\r\n        level: 2,\r\n        dialogue: 'quest_start',\r\n        quests: ['cooks_assistant']\r\n      }\r\n    })\r\n\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'lumbridge_guide',\r\n      position: { x: 10, y: 0, z: 10 },\r\n      metadata: {\r\n        name: 'Lumbridge Guide',\r\n        level: 2,\r\n        dialogue: 'help',\r\n        topics: ['getting_started', 'controls', 'skills']\r\n      }\r\n    })\r\n\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'hans',\r\n      position: { x: 20, y: 0, z: -10 },\r\n      rotation: 0,\r\n      metadata: {\r\n        name: 'Hans',\r\n        level: 1,\r\n        patrol: true,\r\n        patrolRadius: 50\r\n      }\r\n    })\r\n\r\n    // Shop NPCs\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'bob',\r\n      position: { x: 30, y: 0, z: 20 },\r\n      metadata: {\r\n        name: 'Bob',\r\n        level: 1,\r\n        shop: 'general_store',\r\n        dialogue: 'shop'\r\n      }\r\n    })\r\n\r\n    // Resources around Lumbridge\r\n    for (let i = 0; i < 10; i++) {\r\n      this.addSpawn({\r\n        type: 'resource',\r\n        id: 'tree_normal',\r\n        position: {\r\n          x: -50 + Math.random() * 100,\r\n          y: 0,\r\n          z: -50 + Math.random() * 100\r\n        },\r\n        metadata: {\r\n          resourceType: 'tree',\r\n          tier: 1,\r\n          respawnTime: 30000\r\n        }\r\n      })\r\n    }\r\n\r\n    // Fishing spots\r\n    for (let i = 0; i < 3; i++) {\r\n      this.addSpawn({\r\n        type: 'resource',\r\n        id: 'fishing_spot_shrimp',\r\n        position: {\r\n          x: -80 + i * 10,\r\n          y: 0,\r\n          z: 50\r\n        },\r\n        metadata: {\r\n          resourceType: 'fishing_spot',\r\n          fish: ['shrimp', 'anchovies'],\r\n          tool: 'small_net'\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate Varrock\r\n   */\r\n  private async generateVarrock(): Promise<void> {\r\n    const region = this.regions.get('varrock')\r\n    if (!region) return\r\n\r\n    // Grand Exchange\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'grand_exchange',\r\n      position: { x: 350, y: 0, z: -50 },\r\n      metadata: {\r\n        name: 'Grand Exchange',\r\n        clerks: 4,\r\n        bankers: 2\r\n      }\r\n    })\r\n\r\n    // Palace\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'varrock_palace',\r\n      position: { x: 350, y: 0, z: 0 },\r\n      metadata: {\r\n        name: 'Varrock Palace',\r\n        floors: 2,\r\n        guards: 8\r\n      }\r\n    })\r\n\r\n    // GE Clerks\r\n    for (let i = 0; i < 4; i++) {\r\n      this.addSpawn({\r\n        type: 'npc',\r\n        id: `ge_clerk_${i}`,\r\n        position: {\r\n          x: 340 + i * 10,\r\n          y: 0,\r\n          z: -50\r\n        },\r\n        metadata: {\r\n          name: 'Grand Exchange Clerk',\r\n          level: 2,\r\n          dialogue: 'grand_exchange'\r\n        }\r\n      })\r\n    }\r\n\r\n    // More shops and NPCs\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'aubury',\r\n      position: { x: 300, y: 0, z: 50 },\r\n      metadata: {\r\n        name: 'Aubury',\r\n        level: 41,\r\n        shop: 'rune_shop',\r\n        dialogue: 'shop',\r\n        teleport: 'essence_mine'\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Generate Tutorial Island\r\n   */\r\n  private async generateTutorialIsland(): Promise<void> {\r\n    const region = this.regions.get('tutorial_island')\r\n    if (!region) return\r\n\r\n    // Tutorial building\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'tutorial_building',\r\n      position: { x: -400, y: 0, z: -400 },\r\n      metadata: {\r\n        name: 'Tutorial Building',\r\n        rooms: ['main_hall', 'combat_room', 'skill_room']\r\n      }\r\n    })\r\n\r\n    // Gielinor Guide (starting NPC)\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'gielinor_guide',\r\n      position: { x: -400, y: 0, z: -400 },\r\n      metadata: {\r\n        name: 'Gielinor Guide',\r\n        level: 2,\r\n        dialogue: 'tutorial_start',\r\n        tutorialStep: 0\r\n      }\r\n    })\r\n\r\n    // Combat Instructor\r\n    this.addSpawn({\r\n      type: 'npc',\r\n      id: 'combat_instructor',\r\n      position: { x: -380, y: 0, z: -400 },\r\n      metadata: {\r\n        name: 'Combat Instructor',\r\n        level: 146,\r\n        dialogue: 'tutorial_combat',\r\n        tutorialStep: 3\r\n      }\r\n    })\r\n\r\n    // Training dummies\r\n    for (let i = 0; i < 3; i++) {\r\n      this.addSpawn({\r\n        type: 'npc',\r\n        id: `training_dummy_${i}`,\r\n        position: {\r\n          x: -380 + i * 5,\r\n          y: 0,\r\n          z: -390\r\n        },\r\n        metadata: {\r\n          name: 'Training Dummy',\r\n          level: 1,\r\n          attackable: true,\r\n          noLoot: true,\r\n          respawnTime: 1000\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate wilderness areas\r\n   */\r\n  private async generateWilderness(): Promise<void> {\r\n    console.log('[WorldGenerator] Generating wilderness...')\r\n    \r\n    const region = this.regions.get('wilderness')\r\n    if (!region) return\r\n\r\n    // Dangerous NPCs\r\n    const monsters = [\r\n      { id: 'skeleton', level: 25, count: 10 },\r\n      { id: 'chaos_druid', level: 13, count: 5 },\r\n      { id: 'hill_giant', level: 28, count: 3 },\r\n      { id: 'moss_giant', level: 42, count: 2 }\r\n    ]\r\n\r\n    for (const monster of monsters) {\r\n      for (let i = 0; i < monster.count; i++) {\r\n        this.addSpawn({\r\n          type: 'npc',\r\n          id: `${monster.id}_${i}`,\r\n          position: {\r\n            x: region.bounds.min.x + Math.random() * (region.bounds.max.x - region.bounds.min.x),\r\n            y: 0,\r\n            z: region.bounds.min.z + Math.random() * (region.bounds.max.z - region.bounds.min.z)\r\n          },\r\n          metadata: {\r\n            name: monster.id.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\r\n            level: monster.level,\r\n            aggressive: true,\r\n            aggroRange: 5,\r\n            drops: 'standard',\r\n            respawnTime: 60000\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // Rare resources\r\n    for (let i = 0; i < 5; i++) {\r\n      this.addSpawn({\r\n        type: 'resource',\r\n        id: 'runite_rock',\r\n        position: {\r\n          x: region.bounds.min.x + Math.random() * (region.bounds.max.x - region.bounds.min.x),\r\n          y: 0,\r\n          z: region.bounds.min.z + Math.random() * (region.bounds.max.z - region.bounds.min.z)\r\n        },\r\n        metadata: {\r\n          resourceType: 'rock',\r\n          ore: 'runite',\r\n          levelRequired: 85,\r\n          respawnTime: 720000 // 12 minutes\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate dungeons\r\n   */\r\n  private async generateDungeons(): Promise<void> {\r\n    console.log('[WorldGenerator] Generating dungeons...')\r\n    \r\n    // Lumbridge dungeon entrance\r\n    this.addSpawn({\r\n      type: 'building',\r\n      id: 'lumbridge_dungeon_entrance',\r\n      position: { x: -50, y: 0, z: -50 },\r\n      metadata: {\r\n        name: 'Dungeon Entrance',\r\n        destination: 'lumbridge_dungeon',\r\n        requirements: []\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add spawn definition\r\n   */\r\n  private addSpawn(spawn: SpawnDefinition): void {\r\n    this.spawnPoints.push(spawn)\r\n  }\r\n\r\n  /**\r\n   * Spawn all entities\r\n   */\r\n  private async spawnEntities(): Promise<void> {\r\n    console.log(`[WorldGenerator] Spawning ${this.spawnPoints.length} entities...`)\r\n    \r\n    const spawningSystem = (this.world as any).getSystem('spawning')\r\n    const npcSystem = (this.world as any).getSystem('npc')\r\n    const resourceSpawnSystem = (this.world as any).getSystem('resourceSpawn')\r\n    \r\n    if (!spawningSystem || !npcSystem) {\r\n      console.error('[WorldGenerator] Required systems not found')\r\n      return\r\n    }\r\n\r\n    for (const spawn of this.spawnPoints) {\r\n      try {\r\n        switch (spawn.type) {\r\n          case 'npc':\r\n            await this.spawnNPC(spawn, npcSystem, spawningSystem)\r\n            break\r\n          case 'resource':\r\n            await this.spawnResource(spawn, resourceSpawnSystem)\r\n            break\r\n          case 'building':\r\n            await this.spawnBuilding(spawn, spawningSystem)\r\n            break\r\n          case 'item':\r\n            await this.spawnItem(spawn, spawningSystem)\r\n            break\r\n        }\r\n      } catch (error) {\r\n        console.error(`[WorldGenerator] Failed to spawn ${spawn.type} ${spawn.id}:`, error)\r\n      }\r\n    }\r\n\r\n    console.log('[WorldGenerator] Entity spawning complete')\r\n  }\r\n\r\n  /**\r\n   * Spawn NPC\r\n   */\r\n  private async spawnNPC(spawn: SpawnDefinition, npcSystem: any, spawningSystem: any): Promise<void> {\r\n    const npcData = {\r\n      name: spawn.metadata?.name || spawn.id,\r\n      level: spawn.metadata?.level || 1,\r\n      position: spawn.position,\r\n      rotation: spawn.rotation || 0,\r\n      ...spawn.metadata\r\n    }\r\n\r\n    // Create NPC entity\r\n    const npc = spawningSystem.spawnEntity('npc', spawn.position, {\r\n      npcId: spawn.id,\r\n      ...npcData\r\n    })\r\n\r\n    if (npc && spawn.metadata?.patrol) {\r\n      // Set up patrol behavior\r\n      npcSystem.setPatrol(npc.id, spawn.position, spawn.metadata.patrolRadius || 10)\r\n    }\r\n\r\n    if (npc && spawn.metadata?.shop) {\r\n      // Set up shop\r\n      const shopSystem = (this.world as any).getSystem('shop')\r\n      if (shopSystem) {\r\n        shopSystem.linkNPCToShop(npc.id, spawn.metadata.shop)\r\n      }\r\n    }\r\n\r\n    if (npc && spawn.metadata?.dialogue) {\r\n      // Set up dialogue\r\n      npcSystem.setDialogue(npc.id, spawn.metadata.dialogue, spawn.metadata)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Spawn resource\r\n   */\r\n  private async spawnResource(spawn: SpawnDefinition, resourceSpawnSystem: any): Promise<void> {\r\n    if (!resourceSpawnSystem) return\r\n\r\n    const resourceData = {\r\n      resourceId: spawn.id,\r\n      position: spawn.position,\r\n      type: spawn.metadata?.resourceType || 'tree',\r\n      ...spawn.metadata\r\n    }\r\n\r\n    resourceSpawnSystem.addResource(resourceData)\r\n  }\r\n\r\n  /**\r\n   * Spawn building\r\n   */\r\n  private async spawnBuilding(spawn: SpawnDefinition, spawningSystem: any): Promise<void> {\r\n    const building = spawningSystem.spawnEntity('building', spawn.position, {\r\n      buildingId: spawn.id,\r\n      name: spawn.metadata?.name || spawn.id,\r\n      ...spawn.metadata\r\n    })\r\n\r\n    // Buildings might have special interactions, portals, etc.\r\n    if (building && spawn.metadata?.destination) {\r\n      // Set up portal/entrance\r\n      const navigationSystem = (this.world as any).getSystem('navigation')\r\n      if (navigationSystem) {\r\n        navigationSystem.addPortal(building.id, spawn.metadata.destination)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Spawn item\r\n   */\r\n  private async spawnItem(spawn: SpawnDefinition, spawningSystem: any): Promise<void> {\r\n    const itemSpawnSystem = (this.world as any).getSystem('itemSpawn')\r\n    if (!itemSpawnSystem) return\r\n\r\n    itemSpawnSystem.spawnItem(\r\n      spawn.id,\r\n      spawn.metadata?.quantity || 1,\r\n      spawn.position\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Get region at position\r\n   */\r\n  getRegionAt(position: Vector3): WorldRegion | null {\r\n    for (const region of this.regions.values()) {\r\n      if (\r\n        position.x >= region.bounds.min.x && position.x <= region.bounds.max.x &&\r\n        position.y >= region.bounds.min.y && position.y <= region.bounds.max.y &&\r\n        position.z >= region.bounds.min.z && position.z <= region.bounds.max.z\r\n      ) {\r\n        return region\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Get all regions\r\n   */\r\n  getRegions(): WorldRegion[] {\r\n    return Array.from(this.regions.values())\r\n  }\r\n\r\n  /**\r\n   * Get spawn points\r\n   */\r\n  getSpawnPoints(): SpawnDefinition[] {\r\n    return this.spawnPoints\r\n  }\r\n} ", "/**\r\n * World Initializer - Initializes the game world on startup\r\n * Coordinates world generation, loads saved data, and spawns initial entities\r\n */\r\n\r\nimport type { World } from '../../types'\r\nimport { WorldGenerator } from './WorldGenerator'\r\n\r\nexport class WorldInitializer {\r\n  private world: World\r\n  private generator: WorldGenerator\r\n  private initialized: boolean = false\r\n  \r\n  constructor(world: World) {\r\n    this.world = world\r\n    this.generator = new WorldGenerator(world)\r\n  }\r\n\r\n  /**\r\n   * Initialize the game world\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.initialized) {\r\n      console.warn('[WorldInitializer] World already initialized')\r\n      return\r\n    }\r\n\r\n    console.log('[WorldInitializer] Starting world initialization...')\r\n    \r\n    try {\r\n      // Load saved world data\r\n      await this.loadWorldData()\r\n      \r\n      // Generate world if needed\r\n      if (await this.isFirstTimeSetup()) {\r\n        await this.firstTimeSetup()\r\n      } else {\r\n        await this.loadExistingWorld()\r\n      }\r\n      \r\n      // Start world systems\r\n      await this.startWorldSystems()\r\n      \r\n      // Spawn initial players\r\n      await this.spawnInitialPlayers()\r\n      \r\n      // Start world events\r\n      this.startWorldEvents()\r\n      \r\n      this.initialized = true\r\n      console.log('[WorldInitializer] World initialization complete!')\r\n      \r\n    } catch (error) {\r\n      console.error('[WorldInitializer] Failed to initialize world:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if this is first time setup\r\n   */\r\n  private async isFirstTimeSetup(): Promise<boolean> {\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (!persistence) return true\r\n    \r\n    // Check if we have any saved entities\r\n    try {\r\n      const entities = await persistence.loadWorldEntities()\r\n      return entities.length === 0\r\n    } catch {\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * First time world setup\r\n   */\r\n  private async firstTimeSetup(): Promise<void> {\r\n    console.log('[WorldInitializer] First time setup - generating world...')\r\n    \r\n    // Generate the world\r\n    await this.generator.generateWorld()\r\n    \r\n    // Create initial shops\r\n    await this.createInitialShops()\r\n    \r\n    // Create initial quests\r\n    await this.createInitialQuests()\r\n    \r\n    // Set up Grand Exchange\r\n    await this.setupGrandExchange()\r\n    \r\n    // Save initial world state\r\n    await this.saveWorldState()\r\n  }\r\n\r\n  /**\r\n   * Load existing world\r\n   */\r\n  private async loadExistingWorld(): Promise<void> {\r\n    console.log('[WorldInitializer] Loading existing world...')\r\n    \r\n    // World entities are loaded by persistence systems\r\n    // Just need to verify critical entities exist\r\n    await this.verifyWorldIntegrity()\r\n  }\r\n\r\n  /**\r\n   * Load world data from persistence\r\n   */\r\n  private async loadWorldData(): Promise<void> {\r\n    // This is handled by individual systems with persistence\r\n    console.log('[WorldInitializer] Loading world data...')\r\n  }\r\n\r\n  /**\r\n   * Create initial shops\r\n   */\r\n  private async createInitialShops(): Promise<void> {\r\n    const shopSystem = (this.world as any).getSystem('shop')\r\n    if (!shopSystem) return\r\n\r\n    console.log('[WorldInitializer] Creating initial shops...')\r\n\r\n    // General Store\r\n    shopSystem.createShop({\r\n      id: 'general_store',\r\n      name: 'General Store',\r\n      items: [\r\n        { itemId: 1, stock: 100, price: 1 }, // Bronze dagger\r\n        { itemId: 2, stock: 100, price: 2 }, // Bronze sword\r\n        { itemId: 590, stock: 1000, price: 1 }, // Tinderbox\r\n        { itemId: 1351, stock: 100, price: 20 }, // Bronze axe\r\n        { itemId: 1265, stock: 100, price: 20 }, // Bronze pickaxe\r\n        { itemId: 303, stock: 100, price: 10 }, // Small fishing net\r\n        { itemId: 307, stock: 100, price: 10 }, // Fishing rod\r\n        { itemId: 313, stock: 1000, price: 3 }, // Fishing bait\r\n        { itemId: 1925, stock: 100, price: 4 }, // Bucket\r\n        { itemId: 1931, stock: 100, price: 1 }, // Pot\r\n        { itemId: 2347, stock: 100, price: 13 }, // Hammer\r\n        { itemId: 946, stock: 100, price: 5 }, // Knife\r\n        { itemId: 1755, stock: 100, price: 1 }, // Chisel\r\n        { itemId: 1733, stock: 1000, price: 1 }, // Thread\r\n        { itemId: 1734, stock: 100, price: 1 }, // Needle\r\n      ],\r\n      buyMultiplier: 0.4, // Shops buy at 40% of sell price\r\n      respawnRate: 60000 // Restock every minute\r\n    })\r\n\r\n    // Rune Shop\r\n    shopSystem.createShop({\r\n      id: 'rune_shop',\r\n      name: 'Aubury\\'s Rune Shop',\r\n      items: [\r\n        { itemId: 554, stock: 1000, price: 4 }, // Fire rune\r\n        { itemId: 555, stock: 1000, price: 4 }, // Water rune\r\n        { itemId: 556, stock: 1000, price: 4 }, // Air rune\r\n        { itemId: 557, stock: 1000, price: 4 }, // Earth rune\r\n        { itemId: 558, stock: 500, price: 6 }, // Mind rune\r\n        { itemId: 559, stock: 500, price: 9 }, // Body rune\r\n        { itemId: 562, stock: 250, price: 25 }, // Chaos rune\r\n        { itemId: 560, stock: 250, price: 40 }, // Death rune\r\n        { itemId: 565, stock: 100, price: 95 }, // Blood rune\r\n        { itemId: 566, stock: 100, price: 105 }, // Soul rune\r\n        { itemId: 1381, stock: 10, price: 150 }, // Staff of air\r\n        { itemId: 1383, stock: 10, price: 150 }, // Staff of water\r\n        { itemId: 1385, stock: 10, price: 150 }, // Staff of earth\r\n        { itemId: 1387, stock: 10, price: 150 }, // Staff of fire\r\n      ],\r\n      buyMultiplier: 0.5,\r\n      respawnRate: 300000 // Restock every 5 minutes\r\n    })\r\n\r\n    // Food Shop\r\n    shopSystem.createShop({\r\n      id: 'food_shop',\r\n      name: 'Food Store',\r\n      items: [\r\n        { itemId: 315, stock: 100, price: 4 }, // Shrimp\r\n        { itemId: 2140, stock: 100, price: 10 }, // Cooked chicken\r\n        { itemId: 333, stock: 50, price: 20 }, // Trout\r\n        { itemId: 329, stock: 50, price: 50 }, // Salmon\r\n        { itemId: 361, stock: 25, price: 100 }, // Tuna\r\n        { itemId: 379, stock: 25, price: 200 }, // Lobster\r\n        { itemId: 385, stock: 10, price: 500 }, // Shark\r\n        { itemId: 1965, stock: 100, price: 1 }, // Cabbage\r\n        { itemId: 1957, stock: 100, price: 1 }, // Onion\r\n        { itemId: 1942, stock: 100, price: 2 }, // Potato\r\n      ],\r\n      buyMultiplier: 0.3,\r\n      respawnRate: 120000 // Restock every 2 minutes\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create initial quests\r\n   */\r\n  private async createInitialQuests(): Promise<void> {\r\n    const questSystem = (this.world as any).getSystem('quest')\r\n    if (!questSystem) return\r\n\r\n    console.log('[WorldInitializer] Creating initial quests...')\r\n\r\n    // Cook's Assistant\r\n    questSystem.registerQuest({\r\n      id: 'cooks_assistant',\r\n      name: 'Cook\\'s Assistant',\r\n      description: 'The Lumbridge Castle cook needs help preparing for the Duke\\'s birthday.',\r\n      startNPC: 'cook',\r\n      requirements: [],\r\n      objectives: [\r\n        {\r\n          id: 'get_ingredients',\r\n          description: 'Collect ingredients for the cake',\r\n          type: 'collect',\r\n          items: [\r\n            { itemId: 1944, quantity: 1 }, // Egg\r\n            { itemId: 1927, quantity: 1 }, // Bucket of milk\r\n            { itemId: 1933, quantity: 1 }, // Pot of flour\r\n          ]\r\n        },\r\n        {\r\n          id: 'return_to_cook',\r\n          description: 'Return to the cook with the ingredients',\r\n          type: 'talk',\r\n          npc: 'cook'\r\n        }\r\n      ],\r\n      rewards: {\r\n        experience: {\r\n          cooking: 300\r\n        },\r\n        items: [\r\n          { itemId: 995, quantity: 100 } // 100 coins\r\n        ],\r\n        questPoints: 1\r\n      }\r\n    })\r\n\r\n    // Sheep Shearer\r\n    questSystem.registerQuest({\r\n      id: 'sheep_shearer',\r\n      name: 'Sheep Shearer',\r\n      description: 'Fred the Farmer needs help shearing his sheep.',\r\n      startNPC: 'fred_the_farmer',\r\n      requirements: [],\r\n      objectives: [\r\n        {\r\n          id: 'collect_wool',\r\n          description: 'Collect 20 balls of wool',\r\n          type: 'collect',\r\n          items: [\r\n            { itemId: 1759, quantity: 20 } // Ball of wool\r\n          ]\r\n        },\r\n        {\r\n          id: 'return_to_fred',\r\n          description: 'Return to Fred with the wool',\r\n          type: 'talk',\r\n          npc: 'fred_the_farmer'\r\n        }\r\n      ],\r\n      rewards: {\r\n        experience: {\r\n          crafting: 150\r\n        },\r\n        items: [\r\n          { itemId: 995, quantity: 60 } // 60 coins\r\n        ],\r\n        questPoints: 1\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set up Grand Exchange\r\n   */\r\n  private async setupGrandExchange(): Promise<void> {\r\n    const grandExchange = (this.world as any).getSystem('grandExchange')\r\n    if (!grandExchange) return\r\n\r\n    console.log('[WorldInitializer] Setting up Grand Exchange...')\r\n\r\n    // Initialize with some market data\r\n    const initialItems = [\r\n      { itemId: 995, basePrice: 1 }, // Coins\r\n      { itemId: 1, basePrice: 10 }, // Bronze dagger\r\n      { itemId: 2, basePrice: 20 }, // Bronze sword\r\n      { itemId: 554, basePrice: 5 }, // Fire rune\r\n      { itemId: 555, basePrice: 5 }, // Water rune\r\n      { itemId: 556, basePrice: 5 }, // Air rune\r\n      { itemId: 557, basePrice: 5 }, // Earth rune\r\n      { itemId: 440, basePrice: 150 }, // Iron ore\r\n      { itemId: 453, basePrice: 450 }, // Coal\r\n      { itemId: 444, basePrice: 1500 }, // Gold ore\r\n      { itemId: 447, basePrice: 5000 }, // Mithril ore\r\n      { itemId: 449, basePrice: 15000 }, // Adamantite ore\r\n      { itemId: 451, basePrice: 45000 }, // Runite ore\r\n      { itemId: 1515, basePrice: 25 }, // Yew logs\r\n      { itemId: 1513, basePrice: 45 }, // Magic logs\r\n      { itemId: 385, basePrice: 800 }, // Raw shark\r\n      { itemId: 386, basePrice: 1000 }, // Cooked shark\r\n    ]\r\n\r\n    for (const item of initialItems) {\r\n      grandExchange.setMarketPrice(item.itemId, item.basePrice)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start world systems\r\n   */\r\n  private async startWorldSystems(): Promise<void> {\r\n    console.log('[WorldInitializer] Starting world systems...')\r\n    \r\n    // Start NPC behaviors\r\n    const npcSystem = (this.world as any).getSystem('npc')\r\n    if (npcSystem) {\r\n      npcSystem.startBehaviors()\r\n    }\r\n\r\n    // Start resource respawning\r\n    const resourceSystem = (this.world as any).getSystem('resourceSpawn')\r\n    if (resourceSystem) {\r\n      resourceSystem.startRespawnTimers()\r\n    }\r\n\r\n    // Start shop restocking\r\n    const shopSystem = (this.world as any).getSystem('shop')\r\n    if (shopSystem) {\r\n      shopSystem.startRestockTimers()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Spawn initial players\r\n   */\r\n  private async spawnInitialPlayers(): Promise<void> {\r\n    // Players spawn when they connect\r\n    // This would handle any NPCs that act like players\r\n  }\r\n\r\n  /**\r\n   * Start world events\r\n   */\r\n  private startWorldEvents(): void {\r\n    console.log('[WorldInitializer] Starting world events...')\r\n    \r\n    // Random events\r\n    setInterval(() => {\r\n      this.triggerRandomEvent()\r\n    }, 300000) // Every 5 minutes\r\n\r\n    // Day/night cycle (if implemented)\r\n    setInterval(() => {\r\n      this.updateDayNightCycle()\r\n    }, 60000) // Every minute\r\n  }\r\n\r\n  /**\r\n   * Trigger random event\r\n   */\r\n  private triggerRandomEvent(): void {\r\n    const events = [\r\n      'shooting_star',\r\n      'evil_tree',\r\n      'treasure_imp',\r\n      'double_xp_minute'\r\n    ]\r\n\r\n    const event = events[Math.floor(Math.random() * events.length)]\r\n    \r\n    this.world.events.emit('world:random_event', {\r\n      type: event,\r\n      duration: 600000 // 10 minutes\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update day/night cycle\r\n   */\r\n  private updateDayNightCycle(): void {\r\n    const hour = new Date().getHours()\r\n    const isNight = hour < 6 || hour > 20\r\n    \r\n    this.world.events.emit('world:time_update', {\r\n      hour,\r\n      isNight,\r\n      lightLevel: isNight ? 0.3 : 1.0\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Save world state\r\n   */\r\n  private async saveWorldState(): Promise<void> {\r\n    console.log('[WorldInitializer] Saving world state...')\r\n    \r\n    // Trigger save on all systems\r\n    this.world.events.emit('world:save_state')\r\n  }\r\n\r\n  /**\r\n   * Verify world integrity\r\n   */\r\n  private async verifyWorldIntegrity(): Promise<void> {\r\n    console.log('[WorldInitializer] Verifying world integrity...')\r\n    \r\n    // Check critical entities exist\r\n    const criticalEntities = [\r\n      { type: 'npc', id: 'lumbridge_guide' },\r\n      { type: 'building', id: 'lumbridge_bank' },\r\n      { type: 'building', id: 'grand_exchange' }\r\n    ]\r\n\r\n    for (const entity of criticalEntities) {\r\n      // If critical entity missing, respawn it\r\n      // This ensures the world remains playable\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get world statistics\r\n   */\r\n  getWorldStats(): any {\r\n    const regions = this.generator.getRegions()\r\n    const spawnPoints = this.generator.getSpawnPoints()\r\n    \r\n    return {\r\n      initialized: this.initialized,\r\n      regions: regions.length,\r\n      totalSpawns: spawnPoints.length,\r\n      npcs: spawnPoints.filter(s => s.type === 'npc').length,\r\n      resources: spawnPoints.filter(s => s.type === 'resource').length,\r\n      buildings: spawnPoints.filter(s => s.type === 'building').length,\r\n      items: spawnPoints.filter(s => s.type === 'item').length\r\n    }\r\n  }\r\n} ", "/**\r\n * RPG World Manager - Manages RPG world lifecycle\r\n * Coordinates world initialization, system startup, and player connections\r\n */\r\n\r\nimport type { World } from '../types'\r\nimport { WorldInitializer } from './world/WorldInitializer'\r\n\r\nexport class RPGWorldManager {\r\n  private world: World\r\n  private initializer: WorldInitializer\r\n  private initialized: boolean = false\r\n  private playerCount: number = 0\r\n  \r\n  constructor(world: World) {\r\n    this.world = world\r\n    this.initializer = new WorldInitializer(world)\r\n  }\r\n\r\n  /**\r\n   * Initialize the RPG world\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.initialized) {\r\n      console.warn('[RPGWorldManager] Already initialized')\r\n      return\r\n    }\r\n\r\n    console.log('[RPGWorldManager] Starting RPG world initialization...')\r\n    \r\n    try {\r\n      // Initialize all systems\r\n      await this.initializeSystems()\r\n      \r\n      // Initialize the game world\r\n      await this.initializer.initialize()\r\n      \r\n      // Set up event listeners\r\n      this.setupEventListeners()\r\n      \r\n      // Start periodic tasks\r\n      this.startPeriodicTasks()\r\n      \r\n      this.initialized = true\r\n      console.log('[RPGWorldManager] RPG world initialized successfully!')\r\n      \r\n      // Emit world ready event\r\n      this.world.events.emit('rpg:world_ready', {\r\n        stats: this.initializer.getWorldStats()\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('[RPGWorldManager] Failed to initialize:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize all RPG systems\r\n   */\r\n  private async initializeSystems(): Promise<void> {\r\n    console.log('[RPGWorldManager] Initializing RPG systems...')\r\n    \r\n    const systems = [\r\n      'stats', 'movement', 'combat', 'inventory', 'quest', \r\n      'skills', 'banking', 'trading', 'navigation', 'loot',\r\n      'spawning', 'npc', 'deathRespawn', 'pvp', 'shop',\r\n      'grandExchange', 'prayer', 'magic', 'construction',\r\n      'minigame', 'clan', 'visualRepresentation', 'agentPlayer',\r\n      'itemSpawn', 'resourceSpawn', 'ui'\r\n    ]\r\n    \r\n    for (const systemName of systems) {\r\n      const system = (this.world as any).getSystem(systemName)\r\n      if (system && typeof system.initialize === 'function') {\r\n        try {\r\n          await system.initialize()\r\n          console.log(`[RPGWorldManager] Initialized ${systemName} system`)\r\n        } catch (error) {\r\n          console.error(`[RPGWorldManager] Failed to initialize ${systemName}:`, error)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    // Player connection\r\n    this.world.events.on('player:connect', this.handlePlayerConnect.bind(this))\r\n    this.world.events.on('player:disconnect', this.handlePlayerDisconnect.bind(this))\r\n    \r\n    // World events\r\n    this.world.events.on('world:save_requested', this.handleSaveRequest.bind(this))\r\n    this.world.events.on('world:shutdown', this.handleShutdown.bind(this))\r\n    \r\n    // Admin commands\r\n    this.world.events.on('admin:spawn_entity', this.handleAdminSpawn.bind(this))\r\n    this.world.events.on('admin:reset_world', this.handleWorldReset.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Start periodic tasks\r\n   */\r\n  private startPeriodicTasks(): void {\r\n    // Auto-save every 5 minutes\r\n    setInterval(() => {\r\n      this.saveWorld()\r\n    }, 300000)\r\n    \r\n    // Stats reporting every minute\r\n    setInterval(() => {\r\n      this.reportStats()\r\n    }, 60000)\r\n    \r\n    // Cleanup tasks every 10 minutes\r\n    setInterval(() => {\r\n      this.performCleanup()\r\n    }, 600000)\r\n  }\r\n\r\n  /**\r\n   * Handle player connect\r\n   */\r\n  private async handlePlayerConnect(data: { playerId: string; username: string }): Promise<void> {\r\n    console.log(`[RPGWorldManager] Player connected: ${data.username} (${data.playerId})`)\r\n    \r\n    this.playerCount++\r\n    \r\n    // Spawn player entity\r\n    const spawningSystem = (this.world as any).getSystem('spawning')\r\n    if (spawningSystem) {\r\n      const spawnPosition = this.getPlayerSpawnPosition(data.playerId)\r\n      const player = await spawningSystem.spawnEntity('player', spawnPosition, {\r\n        playerId: data.playerId,\r\n        username: data.username,\r\n        displayName: data.username\r\n      })\r\n      \r\n      if (player) {\r\n        // Initialize player components\r\n        await this.initializePlayer(player)\r\n        \r\n        // Emit player spawned event\r\n        this.world.events.emit('rpg:player_spawned', {\r\n          playerId: data.playerId,\r\n          entityId: player.id,\r\n          position: spawnPosition\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle player disconnect\r\n   */\r\n  private async handlePlayerDisconnect(data: { playerId: string }): Promise<void> {\r\n    console.log(`[RPGWorldManager] Player disconnected: ${data.playerId}`)\r\n    \r\n    this.playerCount = Math.max(0, this.playerCount - 1)\r\n    \r\n    // Save player data immediately\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (persistence) {\r\n      await persistence.savePlayer(data.playerId)\r\n    }\r\n    \r\n    // Remove player entity\r\n    const player = this.world.entities.get(data.playerId)\r\n    if (player) {\r\n      this.world.entities.delete(data.playerId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get player spawn position\r\n   */\r\n  private getPlayerSpawnPosition(playerId: string): any {\r\n    // Check if player has saved position\r\n    const savedPosition = this.getPlayerSavedPosition(playerId)\r\n    if (savedPosition) {\r\n      return savedPosition\r\n    }\r\n    \r\n    // New players spawn in Lumbridge\r\n    return {\r\n      x: 0 + Math.random() * 10 - 5,\r\n      y: 0,\r\n      z: 0 + Math.random() * 10 - 5\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get player saved position\r\n   */\r\n  private getPlayerSavedPosition(playerId: string): any | null {\r\n    // This would check persistence for saved position\r\n    // For now, return null to use default spawn\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Initialize player entity\r\n   */\r\n  private async initializePlayer(player: any): Promise<void> {\r\n    // Add default components if not present\r\n    const components = [\r\n      'stats', 'inventory', 'skills', 'quest', 'bank',\r\n      'combat', 'movement', 'ui', 'clan'\r\n    ]\r\n    \r\n    for (const componentName of components) {\r\n      if (!player.getComponent(componentName)) {\r\n        const system = (this.world as any).getSystem(componentName)\r\n        if (system && typeof system.createDefaultComponent === 'function') {\r\n          const component = system.createDefaultComponent()\r\n          player.addComponent(componentName, component)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Load saved data\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (persistence) {\r\n      await persistence.loadPlayer(player.id)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save world\r\n   */\r\n  private async saveWorld(): Promise<void> {\r\n    console.log('[RPGWorldManager] Auto-saving world...')\r\n    \r\n    const startTime = Date.now()\r\n    \r\n    try {\r\n      // Emit save event for all systems\r\n      this.world.events.emit('world:save_state')\r\n      \r\n      const duration = Date.now() - startTime\r\n      console.log(`[RPGWorldManager] World saved in ${duration}ms`)\r\n      \r\n    } catch (error) {\r\n      console.error('[RPGWorldManager] Failed to save world:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report stats\r\n   */\r\n  private reportStats(): void {\r\n    const stats = {\r\n      players: this.playerCount,\r\n      entities: this.world.entities.size,\r\n      uptime: process.uptime(),\r\n      memory: process.memoryUsage(),\r\n      worldStats: this.initializer.getWorldStats()\r\n    }\r\n    \r\n    this.world.events.emit('rpg:stats_report', stats)\r\n    \r\n    // Log key metrics\r\n    console.log(`[RPGWorldManager] Players: ${stats.players}, Entities: ${stats.entities}, Memory: ${Math.round(stats.memory.heapUsed / 1024 / 1024)}MB`)\r\n  }\r\n\r\n  /**\r\n   * Perform cleanup\r\n   */\r\n  private async performCleanup(): Promise<void> {\r\n    console.log('[RPGWorldManager] Performing cleanup...')\r\n    \r\n    // Clean up expired ground items\r\n    const itemSpawnSystem = (this.world as any).getSystem('itemSpawn')\r\n    if (itemSpawnSystem && typeof itemSpawnSystem.cleanupExpiredItems === 'function') {\r\n      itemSpawnSystem.cleanupExpiredItems()\r\n    }\r\n    \r\n    // Clean up inactive clans\r\n    const clanSystem = (this.world as any).getSystem('clan')\r\n    if (clanSystem && typeof clanSystem.cleanupInactive === 'function') {\r\n      clanSystem.cleanupInactive()\r\n    }\r\n    \r\n    // Garbage collection hint\r\n    if (global.gc) {\r\n      global.gc()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle save request\r\n   */\r\n  private async handleSaveRequest(): Promise<void> {\r\n    await this.saveWorld()\r\n  }\r\n\r\n  /**\r\n   * Handle shutdown\r\n   */\r\n  private async handleShutdown(): Promise<void> {\r\n    console.log('[RPGWorldManager] Shutting down RPG world...')\r\n    \r\n    // Save all data\r\n    await this.saveWorld()\r\n    \r\n    // Stop periodic tasks\r\n    // In a real implementation, we'd store interval IDs and clear them\r\n    \r\n    this.initialized = false\r\n  }\r\n\r\n  /**\r\n   * Handle admin spawn\r\n   */\r\n  private async handleAdminSpawn(data: {\r\n    type: string\r\n    id: string\r\n    position: any\r\n    metadata?: any\r\n  }): Promise<void> {\r\n    const spawningSystem = (this.world as any).getSystem('spawning')\r\n    if (!spawningSystem) return\r\n    \r\n    try {\r\n      const entity = await spawningSystem.spawnEntity(data.type, data.position, {\r\n        ...data.metadata,\r\n        adminSpawned: true\r\n      })\r\n      \r\n      console.log(`[RPGWorldManager] Admin spawned ${data.type} at`, data.position)\r\n      \r\n      this.world.events.emit('admin:entity_spawned', {\r\n        entityId: entity?.id,\r\n        type: data.type,\r\n        position: data.position\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('[RPGWorldManager] Failed to spawn entity:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle world reset\r\n   */\r\n  private async handleWorldReset(data: { confirm: boolean }): Promise<void> {\r\n    if (!data.confirm) {\r\n      console.warn('[RPGWorldManager] World reset requested but not confirmed')\r\n      return\r\n    }\r\n    \r\n    console.log('[RPGWorldManager] Resetting world...')\r\n    \r\n    // Clear all entities except players\r\n    for (const [id, entity] of this.world.entities) {\r\n      if ((entity as any).type !== 'player') {\r\n        this.world.entities.delete(id)\r\n      }\r\n    }\r\n    \r\n    // Reinitialize world\r\n    await this.initializer.initialize()\r\n    \r\n    console.log('[RPGWorldManager] World reset complete')\r\n  }\r\n\r\n  /**\r\n   * Get world status\r\n   */\r\n  getStatus(): any {\r\n    return {\r\n      initialized: this.initialized,\r\n      playerCount: this.playerCount,\r\n      entityCount: this.world.entities.size,\r\n      worldStats: this.initializer.getWorldStats()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if world is ready\r\n   */\r\n  isReady(): boolean {\r\n    return this.initialized\r\n  }\r\n} ", "import * as manifest from './manifest.json';\r\nimport { World } from '../../src/types';\r\nimport { HyperfyRPGPlugin } from '../../src/rpg';\r\n\r\n// Initialize function that loads the RPG systems into a world\r\nexport async function init(world: World, config?: any): Promise<void> {\r\n  console.log('[RPG UGC App] Initializing RPG world...');\r\n  \r\n  // Initialize the RPG plugin with all systems\r\n  const rpgConfig = {\r\n    worldType: config?.worldType || 'rpg',\r\n    isServer: true,\r\n    systems: manifest.capabilities.systems\r\n  };\r\n  \r\n  await HyperfyRPGPlugin.init(world, rpgConfig);\r\n  \r\n  console.log('[RPG UGC App] RPG world initialized successfully');\r\n}\r\n\r\n// Destroy function for cleanup\r\nexport async function destroy(): Promise<void> {\r\n  console.log('[RPG UGC App] Cleaning up RPG world...');\r\n  // Cleanup logic here if needed\r\n}\r\n\r\n// Get capabilities function\r\nexport function getCapabilities(): Record<string, any> {\r\n  // For now, just return the action and provider names from manifest\r\n  // The actual implementations will be loaded from the plugin directory\r\n  return {\r\n    actions: manifest.capabilities.actions,\r\n    providers: manifest.capabilities.providers,\r\n    systems: manifest.capabilities.systems,\r\n    evaluators: manifest.capabilities.evaluators\r\n  };\r\n}\r\n\r\n// Export manifest for UGC loader\r\nexport { manifest }; ", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "import EventEmitter from 'eventemitter3';\n\nimport type { World, WorldOptions, System as ISystem } from '../../types/index.js';\n\n/**\n * Base class for all game systems\n * Systems manage specific aspects of the game world (physics, rendering, entities, etc.)\n */\nexport abstract class System extends EventEmitter implements ISystem {\n  world: World;\n\n  constructor(world: World) {\n    super();\n    this.world = world;\n  }\n\n  /**\n   * Initialize the system with world options\n   * Called once when the world is initialized\n   */\n  async init(_options: WorldOptions): Promise<void> {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Start the system\n   * Called after all systems have been initialized\n   */\n  start(): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Destroy the system and clean up resources\n   */\n  destroy(): void {\n    // Override in subclasses if needed\n  }\n\n  // Update cycle methods - override as needed in subclasses\n\n  /**\n   * Called at the beginning of each frame\n   */\n  preTick(): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Called before fixed update steps\n   */\n  preFixedUpdate(_willFixedStep: boolean): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Fixed timestep update for physics and deterministic logic\n   */\n  fixedUpdate(_delta: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Called after fixed update steps\n   */\n  postFixedUpdate(_delta: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Called before main update with interpolation alpha\n   */\n  preUpdate(_alpha: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Main update loop\n   */\n  update(_delta: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Called after main update\n   */\n  postUpdate(_delta: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Late update for camera and final adjustments\n   */\n  lateUpdate(_delta: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Called after late update\n   */\n  postLateUpdate(_delta: number): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Commit changes (e.g., render on client)\n   */\n  commit(): void {\n    // Override in subclasses if needed\n  }\n\n  /**\n   * Called at the end of each frame\n   */\n  postTick(): void {\n    // Override in subclasses if needed\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport { Component, Entity } from '../../types'\n\n// Define local types to avoid import issues\ninterface Vector3 {\n  x: number\n  y: number\n  z: number\n}\n\nenum RoomType {\n  GARDEN = 'garden',\n  PARLOUR = 'parlour',\n  KITCHEN = 'kitchen',\n  DINING_ROOM = 'dining_room',\n  WORKSHOP = 'workshop',\n  BEDROOM = 'bedroom',\n  HALL = 'hall',\n  GAMES_ROOM = 'games_room',\n  COMBAT_ROOM = 'combat_room',\n  QUEST_HALL = 'quest_hall',\n  STUDY = 'study',\n  COSTUME_ROOM = 'costume_room',\n  CHAPEL = 'chapel',\n  PORTAL_CHAMBER = 'portal_chamber',\n  FORMAL_GARDEN = 'formal_garden',\n  THRONE_ROOM = 'throne_room',\n  OUBLIETTE = 'oubliette',\n  DUNGEON = 'dungeon',\n  TREASURE_ROOM = 'treasure_room',\n}\n\nenum HotspotType {\n  DECORATION = 'decoration',\n  SEATING = 'seating',\n  TABLE = 'table',\n  STORAGE = 'storage',\n  LIGHTING = 'lighting',\n  RUG = 'rug',\n  ALTAR = 'altar',\n  PORTAL = 'portal',\n  GUARD = 'guard',\n  TROPHY = 'trophy',\n  SKILL = 'skill',\n  GAMES = 'games',\n  GLORY = 'glory',\n}\n\ninterface PlayerEntity extends Entity {\n  type: 'player'\n  username: string\n  displayName: string\n}\n\ninterface ItemStack {\n  itemId: number\n  quantity: number\n  metadata?: any\n}\n\ninterface FurnitureEffect {\n  type: 'teleport' | 'restore' | 'bank' | 'altar' | 'range' | 'repair' | 'pet_house'\n  data: any\n}\n\ninterface ServantTask {\n  type: 'bank' | 'sawmill' | 'unnote' | 'fetch'\n  items: ItemStack[]\n  completionTime: number\n}\n\ninterface Furniture {\n  id: string\n  itemId: number\n  name: string\n  hotspotType: HotspotType\n  level: number\n  experience: number\n  materials: ItemStack[]\n  effects?: FurnitureEffect[]\n  interactable: boolean\n}\n\ninterface ConstructionRoom {\n  id: string\n  type: RoomType\n  rotation: number\n  level: number\n  furniture: Map<string, Furniture>\n  doors: Map<string, boolean>\n  hotspots: Map<string, HotspotType>\n}\n\ninterface HouseSettings {\n  locked: boolean\n  buildMode: boolean\n  pvpEnabled: boolean\n  teleportInside: boolean\n  renderDistance: number\n  theme: 'basic' | 'fancy' | 'ancient'\n  visitors: string[]\n  maxVisitors: number\n}\n\ninterface PlayerHouse {\n  id: string\n  ownerId: string\n  location: 'rimmington' | 'taverley' | 'pollnivneach' | 'hosidius' | 'rellekka' | 'brimhaven' | 'yanille'\n  layout: Map<string, ConstructionRoom>\n  maxRooms: number\n  maxFloors: number\n  settings: HouseSettings\n  servant: {\n    type: 'none' | 'rick' | 'maid' | 'cook' | 'butler' | 'demon_butler'\n    taskQueue: ServantTask[]\n    lastPayment: number\n  }\n  visitors: string[]\n  maxVisitors: number\n  dungeonMonsters: Array<{\n    type: string\n    position: Vector3\n    respawnTime: number\n  }>\n}\n\ninterface ConstructionComponent extends Component {\n  type: 'construction'\n  level: number\n  experience: number\n  houseId: string | null\n  inHouse: boolean\n  buildMode: boolean\n  flatpacks: Map<number, number>\n  currentBuild: {\n    roomType: RoomType | null\n    position: Vector3 | null\n    rotation: number\n  } | null\n}\n\nexport class ConstructionSystem extends System {\n  name = 'ConstructionSystem'\n  enabled = true\n\n  private houses: Map<string, PlayerHouse> = new Map()\n  private playerHouses: Map<string, string> = new Map() // playerId -> houseId\n  private furnitureDefinitions: Map<string, Furniture> = new Map()\n  private roomCosts: Map<RoomType, { level: number; cost: number }> = new Map()\n\n  // House locations with their portal coordinates\n  private housePortals: Map<string, Vector3> = new Map([\n    ['rimmington', { x: 2954, y: 0, z: 3224 }],\n    ['taverley', { x: 2894, y: 0, z: 3465 }],\n    ['pollnivneach', { x: 3340, y: 0, z: 3003 }],\n    ['hosidius', { x: 1743, y: 0, z: 3517 }],\n    ['rellekka', { x: 2670, y: 0, z: 3631 }],\n    ['brimhaven', { x: 2758, y: 0, z: 3178 }],\n    ['yanille', { x: 2544, y: 0, z: 3095 }],\n  ])\n\n  // Configuration\n  private readonly HOUSE_INSTANCE_OFFSET = 10000 // Offset for house instances\n  private readonly MAX_ROOMS = 30\n  private readonly MAX_FLOORS = 3\n  private readonly ROOM_SIZE = 8 // 8x8 tiles per room\n  private readonly BUILD_MODE_SPEED = 0.5 // Movement speed in build mode\n  private readonly SERVANT_WAGES: Map<string, number> = new Map([\n    ['rick', 500],\n    ['maid', 1000],\n    ['cook', 3000],\n    ['butler', 5000],\n    ['demon_butler', 10000],\n  ])\n\n  constructor(world: World) {\n    super(world)\n    this.initializeRoomCosts()\n    this.initializeFurniture()\n  }\n\n  /**\n   * Initialize room costs and level requirements\n   */\n  private initializeRoomCosts(): void {\n    this.roomCosts.set(RoomType.GARDEN, { level: 1, cost: 1000 })\n    this.roomCosts.set(RoomType.PARLOUR, { level: 1, cost: 1000 })\n    this.roomCosts.set(RoomType.KITCHEN, { level: 5, cost: 5000 })\n    this.roomCosts.set(RoomType.DINING_ROOM, { level: 10, cost: 5000 })\n    this.roomCosts.set(RoomType.WORKSHOP, { level: 15, cost: 10000 })\n    this.roomCosts.set(RoomType.BEDROOM, { level: 20, cost: 10000 })\n    this.roomCosts.set(RoomType.HALL, { level: 25, cost: 10000 })\n    this.roomCosts.set(RoomType.GAMES_ROOM, { level: 30, cost: 15000 })\n    this.roomCosts.set(RoomType.COMBAT_ROOM, { level: 32, cost: 15000 })\n    this.roomCosts.set(RoomType.QUEST_HALL, { level: 35, cost: 25000 })\n    this.roomCosts.set(RoomType.STUDY, { level: 40, cost: 15000 })\n    this.roomCosts.set(RoomType.COSTUME_ROOM, { level: 42, cost: 15000 })\n    this.roomCosts.set(RoomType.CHAPEL, { level: 45, cost: 25000 })\n    this.roomCosts.set(RoomType.PORTAL_CHAMBER, { level: 50, cost: 100000 })\n    this.roomCosts.set(RoomType.FORMAL_GARDEN, { level: 55, cost: 75000 })\n    this.roomCosts.set(RoomType.THRONE_ROOM, { level: 60, cost: 150000 })\n    this.roomCosts.set(RoomType.OUBLIETTE, { level: 65, cost: 125000 })\n    this.roomCosts.set(RoomType.DUNGEON, { level: 70, cost: 100000 })\n    this.roomCosts.set(RoomType.TREASURE_ROOM, { level: 75, cost: 250000 })\n  }\n\n  /**\n   * Initialize furniture definitions\n   */\n  private initializeFurniture(): void {\n    // Basic furniture\n    this.registerFurniture({\n      id: 'wooden_chair',\n      itemId: 6752,\n      name: 'Wooden chair',\n      hotspotType: HotspotType.SEATING,\n      level: 1,\n      experience: 14,\n      materials: [\n        { itemId: 960, quantity: 2 }, // Planks\n      ],\n      interactable: true,\n    })\n\n    this.registerFurniture({\n      id: 'oak_chair',\n      itemId: 6753,\n      name: 'Oak chair',\n      hotspotType: HotspotType.SEATING,\n      level: 19,\n      experience: 60,\n      materials: [\n        { itemId: 8778, quantity: 2 }, // Oak planks\n      ],\n      interactable: true,\n    })\n\n    // Tables\n    this.registerFurniture({\n      id: 'wooden_table',\n      itemId: 6760,\n      name: 'Wooden table',\n      hotspotType: HotspotType.TABLE,\n      level: 12,\n      experience: 20,\n      materials: [\n        { itemId: 960, quantity: 4 }, // Planks\n      ],\n      interactable: false,\n    })\n\n    // Storage\n    this.registerFurniture({\n      id: 'wooden_bookcase',\n      itemId: 6770,\n      name: 'Wooden bookcase',\n      hotspotType: HotspotType.STORAGE,\n      level: 4,\n      experience: 20,\n      materials: [\n        { itemId: 960, quantity: 3 }, // Planks\n      ],\n      interactable: true,\n    })\n\n    // Lighting\n    this.registerFurniture({\n      id: 'candle',\n      itemId: 36,\n      name: 'Candle',\n      hotspotType: HotspotType.LIGHTING,\n      level: 8,\n      experience: 4,\n      materials: [\n        { itemId: 36, quantity: 1 }, // Candle\n      ],\n      interactable: false,\n    })\n\n    // Altar\n    this.registerFurniture({\n      id: 'oak_altar',\n      itemId: 13179,\n      name: 'Oak altar',\n      hotspotType: HotspotType.ALTAR,\n      level: 45,\n      experience: 240,\n      materials: [\n        { itemId: 8778, quantity: 4 }, // Oak planks\n      ],\n      effects: [\n        {\n          type: 'altar',\n          data: { prayerBonus: 120 }, // 120% prayer restoration\n        },\n      ],\n      interactable: true,\n    })\n\n    // Portals\n    this.registerFurniture({\n      id: 'varrock_portal',\n      itemId: 13615,\n      name: 'Varrock portal',\n      hotspotType: HotspotType.PORTAL,\n      level: 50,\n      experience: 250,\n      materials: [\n        { itemId: 8782, quantity: 3 }, // Mahogany planks\n        { itemId: 563, quantity: 100 }, // Law runes\n      ],\n      effects: [\n        {\n          type: 'teleport',\n          data: { destination: 'varrock', position: { x: 3213, y: 0, z: 3428 } },\n        },\n      ],\n      interactable: true,\n    })\n\n    // Glory\n    this.registerFurniture({\n      id: 'mounted_glory',\n      itemId: 13523,\n      name: 'Mounted glory',\n      hotspotType: HotspotType.GLORY,\n      level: 47,\n      experience: 290,\n      materials: [\n        { itemId: 1704, quantity: 1 }, // Amulet of glory\n        { itemId: 8780, quantity: 3 }, // Teak planks\n      ],\n      effects: [\n        {\n          type: 'teleport',\n          data: {\n            destinations: ['edgeville', 'karamja', 'draynor', 'al_kharid'],\n            charges: -1, // Unlimited\n          },\n        },\n      ],\n      interactable: true,\n    })\n  }\n\n  /**\n   * Register a furniture definition\n   */\n  registerFurniture(furniture: Furniture): void {\n    this.furnitureDefinitions.set(furniture.id, furniture)\n  }\n\n  /**\n   * Buy a house\n   */\n  buyHouse(playerId: string, location: string): boolean {\n    if (this.playerHouses.has(playerId)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You already own a house',\n      })\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    // Check construction level\n    const constructionComponent = this.getOrCreateConstructionComponent(player)\n    if (constructionComponent.level < 1) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You need at least level 1 Construction',\n      })\n      return false\n    }\n\n    // Check gold\n    const houseCost = 1000 // 1k gold for basic house\n    const inventory = player.getComponent('inventory')\n    if (!inventory || !this.hasGold(inventory, houseCost)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You need 1,000 gold to buy a house',\n      })\n      return false\n    }\n\n    // Check location validity\n    if (!this.housePortals.has(location)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'Invalid house location',\n      })\n      return false\n    }\n\n    // Deduct gold\n    this.removeGold(inventory, houseCost)\n\n    // Create house\n    const houseId = this.generateHouseId()\n    const house: PlayerHouse = {\n      id: houseId,\n      ownerId: playerId,\n      location: location as any,\n      layout: new Map(),\n      maxRooms: 20, // Start with 20, can upgrade\n      maxFloors: 1, // Start with ground floor only\n      settings: {\n        locked: false,\n        buildMode: false,\n        pvpEnabled: false,\n        teleportInside: true,\n        renderDistance: 64,\n        theme: 'basic',\n        visitors: [],\n        maxVisitors: 20,\n      },\n      servant: {\n        type: 'none',\n        taskQueue: [],\n        lastPayment: Date.now(),\n      },\n      visitors: [],\n      maxVisitors: 10,\n      dungeonMonsters: [],\n    }\n\n    // Add default garden room\n    this.addRoom(house, RoomType.GARDEN, { floor: 0, x: 0, z: 0 }, 0)\n\n    // Store house\n    this.houses.set(houseId, house)\n    this.playerHouses.set(playerId, houseId)\n\n    // Update player component\n    constructionComponent.houseId = houseId\n\n    // Grant XP\n    this.grantConstructionXP(playerId, 100)\n\n    // Emit event\n    this.emit('construction:house-bought', {\n      playerId,\n      houseId,\n      location,\n    })\n\n    return true\n  }\n\n  /**\n   * Enter house\n   */\n  enterHouse(playerId: string, ownerId?: string): boolean {\n    const targetOwnerId = ownerId || playerId\n    const houseId = this.playerHouses.get(targetOwnerId)\n\n    if (!houseId) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'House not found',\n      })\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    // Check if house is locked\n    if (house.settings.locked && playerId !== targetOwnerId && !house.visitors.includes(playerId)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'This house is locked',\n      })\n      return false\n    }\n\n    // Check visitor limit\n    if (playerId !== targetOwnerId && house.visitors.length >= house.maxVisitors) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'This house is full',\n      })\n      return false\n    }\n\n    // Update player component\n    const constructionComponent = this.getOrCreateConstructionComponent(player)\n    constructionComponent.inHouse = true\n    constructionComponent.buildMode = playerId === targetOwnerId ? house.settings.buildMode : false\n\n    // Add visitor\n    if (playerId !== targetOwnerId) {\n      house.visitors.push(playerId)\n    }\n\n    // Teleport to house entrance\n    const entrancePosition = this.getHouseEntrance(house)\n    const movement = player.getComponent('movement') as any\n    if (movement) {\n      movement.teleportDestination = entrancePosition\n      movement.teleportTime = Date.now()\n      movement.teleportAnimation = 'house_teleport'\n    }\n\n    // Emit event\n    this.emit('construction:entered-house', {\n      playerId,\n      houseId,\n      ownerId: targetOwnerId,\n      buildMode: constructionComponent.buildMode,\n    })\n\n    return true\n  }\n\n  /**\n   * Leave house\n   */\n  leaveHouse(playerId: string): boolean {\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    const constructionComponent = player.getComponent<ConstructionComponent>('construction')\n    if (!constructionComponent || !constructionComponent.inHouse) {\n      return false\n    }\n\n    // Find which house they're in\n    let houseId: string | null = null\n    let house: PlayerHouse | null = null\n\n    for (const [id, h] of this.houses) {\n      if (h.ownerId === playerId || h.visitors.includes(playerId)) {\n        houseId = id\n        house = h\n        break\n      }\n    }\n\n    if (!house) {\n      return false\n    }\n\n    // Remove from visitors\n    const visitorIndex = house.visitors.indexOf(playerId)\n    if (visitorIndex !== -1) {\n      house.visitors.splice(visitorIndex, 1)\n    }\n\n    // Update player component\n    constructionComponent.inHouse = false\n    constructionComponent.buildMode = false\n\n    // Teleport outside\n    const portal = this.housePortals.get(house.location)\n    if (portal) {\n      const movement = player.getComponent('movement') as any\n      if (movement) {\n        movement.teleportDestination = portal\n        movement.teleportTime = Date.now()\n        movement.teleportAnimation = 'house_teleport'\n      }\n    }\n\n    // Emit event\n    this.emit('construction:left-house', {\n      playerId,\n      houseId,\n    })\n\n    return true\n  }\n\n  /**\n   * Toggle build mode\n   */\n  toggleBuildMode(playerId: string): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    const constructionComponent = player.getComponent<ConstructionComponent>('construction')\n    if (!constructionComponent || !constructionComponent.inHouse) {\n      return false\n    }\n\n    // Toggle mode\n    house.settings.buildMode = !house.settings.buildMode\n    constructionComponent.buildMode = house.settings.buildMode\n\n    // Remove other players in build mode\n    if (house.settings.buildMode) {\n      for (const visitorId of [...house.visitors]) {\n        if (visitorId !== playerId) {\n          this.leaveHouse(visitorId)\n          this.sendMessage(visitorId, 'The owner has entered build mode')\n        }\n      }\n    }\n\n    // Emit event\n    this.emit('construction:build-mode-toggled', {\n      playerId,\n      houseId,\n      buildMode: house.settings.buildMode,\n    })\n\n    return true\n  }\n\n  /**\n   * Build a room\n   */\n  buildRoom(\n    playerId: string,\n    roomType: RoomType,\n    position: { floor: number; x: number; z: number },\n    rotation: number\n  ): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house || !house.settings.buildMode) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    const constructionComponent = player.getComponent<ConstructionComponent>('construction')\n    if (!constructionComponent) {\n      return false\n    }\n\n    // Check room requirements\n    const roomRequirements = this.roomCosts.get(roomType)\n    if (!roomRequirements) {\n      return false\n    }\n\n    if (constructionComponent.level < roomRequirements.level) {\n      this.emit('construction:error', {\n        playerId,\n        error: `You need level ${roomRequirements.level} Construction`,\n      })\n      return false\n    }\n\n    // Check gold\n    const inventory = player.getComponent('inventory')\n    if (!inventory || !this.hasGold(inventory, roomRequirements.cost)) {\n      this.emit('construction:error', {\n        playerId,\n        error: `You need ${roomRequirements.cost} gold`,\n      })\n      return false\n    }\n\n    // Check room limit\n    if (house.layout.size >= house.maxRooms) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You have reached the maximum number of rooms',\n      })\n      return false\n    }\n\n    // Check floor limit\n    if (position.floor >= house.maxFloors || position.floor < -house.maxFloors) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You cannot build on this floor',\n      })\n      return false\n    }\n\n    // Check if position is already occupied\n    const key = `${position.floor},${position.x},${position.z}`\n    if (house.layout.has(key)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'There is already a room here',\n      })\n      return false\n    }\n\n    // Check if room is connected to existing rooms\n    if (house.layout.size > 0 && !this.isConnectedPosition(house, position)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'Room must be connected to existing rooms',\n      })\n      return false\n    }\n\n    // Deduct gold\n    this.removeGold(inventory, roomRequirements.cost)\n\n    // Add room\n    const room = this.addRoom(house, roomType, position, rotation)\n\n    // Grant XP\n    const xp = Math.floor(roomRequirements.cost / 10)\n    this.grantConstructionXP(playerId, xp)\n\n    // Update current build\n    constructionComponent.currentBuild = {\n      roomType,\n      position: {\n        x: position.x * this.ROOM_SIZE,\n        y: position.floor * 3,\n        z: position.z * this.ROOM_SIZE,\n      },\n      rotation,\n    }\n\n    // Emit event\n    this.emit('construction:room-built', {\n      playerId,\n      houseId,\n      roomId: room.id,\n      roomType,\n      position,\n      rotation,\n    })\n\n    return true\n  }\n\n  /**\n   * Remove a room\n   */\n  removeRoom(playerId: string, position: { floor: number; x: number; z: number }): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house || !house.settings.buildMode) {\n      return false\n    }\n\n    const key = `${position.floor},${position.x},${position.z}`\n    const room = house.layout.get(key)\n    if (!room) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'No room at this position',\n      })\n      return false\n    }\n\n    // Don't allow removing the last room\n    if (house.layout.size <= 1) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You cannot remove the last room',\n      })\n      return false\n    }\n\n    // Check if removing this room would disconnect others\n    if (this.wouldDisconnectRooms(house, position)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'Removing this room would disconnect others',\n      })\n      return false\n    }\n\n    // Remove room\n    house.layout.delete(key)\n\n    // Refund some gold (50%)\n    const roomRequirements = this.roomCosts.get(room.type)\n    if (roomRequirements) {\n      const refund = Math.floor(roomRequirements.cost / 2)\n      const player = this.world.entities.get(playerId)\n      if (player) {\n        const inventory = player.getComponent('inventory')\n        if (inventory) {\n          this.addGold(inventory, refund)\n        }\n      }\n    }\n\n    // Emit event\n    this.emit('construction:room-removed', {\n      playerId,\n      houseId,\n      roomId: room.id,\n      position,\n    })\n\n    return true\n  }\n\n  /**\n   * Build furniture\n   */\n  buildFurniture(\n    playerId: string,\n    roomPosition: { floor: number; x: number; z: number },\n    hotspotId: string,\n    furnitureId: string\n  ): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house || !house.settings.buildMode) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    const constructionComponent = player.getComponent<ConstructionComponent>('construction')\n    if (!constructionComponent) {\n      return false\n    }\n\n    // Get room\n    const key = `${roomPosition.floor},${roomPosition.x},${roomPosition.z}`\n    const room = house.layout.get(key)\n    if (!room) {\n      return false\n    }\n\n    // Get hotspot\n    const hotspot = room.hotspots.get(hotspotId)\n    if (!hotspot) {\n      return false\n    }\n\n    // Get furniture definition\n    const furniture = this.furnitureDefinitions.get(furnitureId)\n    if (!furniture) {\n      return false\n    }\n\n    // Check if hotspot type matches\n    if (furniture.hotspotType !== hotspot) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'This furniture cannot be built here',\n      })\n      return false\n    }\n\n    // Check level\n    if (constructionComponent.level < furniture.level) {\n      this.emit('construction:error', {\n        playerId,\n        error: `You need level ${furniture.level} Construction`,\n      })\n      return false\n    }\n\n    // Check materials\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    for (const material of furniture.materials) {\n      if (inventory.getItemCount(material.itemId) < material.quantity) {\n        this.emit('construction:error', {\n          playerId,\n          error: 'You do not have the required materials',\n        })\n        return false\n      }\n    }\n\n    // Remove materials\n    for (const material of furniture.materials) {\n      inventory.removeItem(material.itemId, material.quantity)\n    }\n\n    // Build furniture\n    room.furniture.set(hotspotId, furniture)\n\n    // Grant XP\n    this.grantConstructionXP(playerId, furniture.experience)\n\n    // Emit event\n    this.emit('construction:furniture-built', {\n      playerId,\n      houseId,\n      roomId: room.id,\n      hotspotId,\n      furnitureId: furniture.id,\n    })\n\n    return true\n  }\n\n  /**\n   * Remove furniture\n   */\n  removeFurniture(playerId: string, roomPosition: { floor: number; x: number; z: number }, hotspotId: string): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house || !house.settings.buildMode) {\n      return false\n    }\n\n    // Get room\n    const key = `${roomPosition.floor},${roomPosition.x},${roomPosition.z}`\n    const room = house.layout.get(key)\n    if (!room) {\n      return false\n    }\n\n    // Check if furniture exists at this hotspot\n    const furniture = room.furniture.get(hotspotId)\n    if (!furniture) {\n      return false\n    }\n\n    // Remove furniture\n    const furnitureId = furniture.id\n    room.furniture.delete(hotspotId)\n\n    // Emit event\n    this.emit('construction:furniture-removed', {\n      playerId,\n      houseId,\n      roomId: room.id,\n      hotspotId,\n      furnitureId,\n    })\n\n    return true\n  }\n\n  /**\n   * Interact with furniture\n   */\n  interactWithFurniture(\n    playerId: string,\n    roomPosition: { floor: number; x: number; z: number },\n    hotspotId: string\n  ): void {\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return\n    }\n\n    const constructionComponent = player.getComponent<ConstructionComponent>('construction')\n    if (!constructionComponent || !constructionComponent.inHouse) {\n      return\n    }\n\n    // Find the house they're in\n    let house: PlayerHouse | null = null\n    for (const h of this.houses.values()) {\n      if (h.ownerId === playerId || h.visitors.includes(playerId)) {\n        house = h\n        break\n      }\n    }\n\n    if (!house) {\n      return\n    }\n\n    // Get room\n    const key = `${roomPosition.floor},${roomPosition.x},${roomPosition.z}`\n    const room = house.layout.get(key)\n    if (!room) {\n      return\n    }\n\n    // Get furniture\n    const furniture = room.furniture.get(hotspotId)\n    if (!furniture || !furniture.interactable) {\n      return\n    }\n\n    // Handle furniture effects\n    if (furniture.effects) {\n      for (const effect of furniture.effects) {\n        this.applyFurnitureEffect(player, effect, house)\n      }\n    }\n\n    // Emit event\n    this.emit('construction:furniture-interacted', {\n      playerId,\n      houseId: house.id,\n      furnitureId: furniture.id,\n      effects: furniture.effects,\n    })\n  }\n\n  /**\n   * Hire servant\n   */\n  hireServant(playerId: string, servantType: string): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    // Check if valid servant type\n    const wage = this.SERVANT_WAGES.get(servantType)\n    if (wage === undefined) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'Invalid servant type',\n      })\n      return false\n    }\n\n    // Check if already has a servant\n    if (house.servant.type !== 'none') {\n      this.emit('construction:error', {\n        playerId,\n        error: 'You already have a servant',\n      })\n      return false\n    }\n\n    // Check gold for first payment\n    const inventory = player.getComponent('inventory')\n    if (!inventory || !this.hasGold(inventory, wage)) {\n      this.emit('construction:error', {\n        playerId,\n        error: `You need ${wage} gold for the first payment`,\n      })\n      return false\n    }\n\n    // Pay first wage\n    this.removeGold(inventory, wage)\n\n    // Hire servant\n    house.servant = {\n      type: servantType as any,\n      taskQueue: [],\n      lastPayment: Date.now(),\n    }\n\n    // Emit event\n    this.emit('construction:servant-hired', {\n      playerId,\n      houseId,\n      servantType,\n      wage,\n    })\n\n    return true\n  }\n\n  /**\n   * Dismiss servant\n   */\n  dismissServant(playerId: string): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house || house.servant.type === 'none') {\n      return false\n    }\n\n    const servantType = house.servant.type\n\n    // Clear servant\n    house.servant = {\n      type: 'none',\n      taskQueue: [],\n      lastPayment: Date.now(),\n    }\n\n    // Emit event\n    this.emit('construction:servant-dismissed', {\n      playerId,\n      houseId,\n      servantType,\n    })\n\n    return true\n  }\n\n  /**\n   * Give servant task\n   */\n  giveServantTask(playerId: string, task: ServantTask): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house || house.servant.type === 'none') {\n      return false\n    }\n\n    // Check task limit based on servant type\n    const taskLimits: Map<string, number> = new Map([\n      ['rick', 1],\n      ['maid', 2],\n      ['cook', 3],\n      ['butler', 4],\n      ['demon_butler', 5],\n    ])\n\n    const limit = taskLimits.get(house.servant.type) || 1\n    if (house.servant.taskQueue.length >= limit) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'Your servant is too busy',\n      })\n      return false\n    }\n\n    // Calculate completion time based on servant\n    const baseTimes: Map<string, number> = new Map([\n      ['rick', 60000], // 1 minute\n      ['maid', 45000], // 45 seconds\n      ['cook', 30000], // 30 seconds\n      ['butler', 20000], // 20 seconds\n      ['demon_butler', 10000], // 10 seconds\n    ])\n\n    const baseTime = baseTimes.get(house.servant.type) || 60000\n    task.completionTime = Date.now() + baseTime\n\n    // Add task\n    house.servant.taskQueue.push(task)\n\n    // Emit event\n    this.emit('construction:servant-task-given', {\n      playerId,\n      houseId,\n      taskType: task.type,\n      completionTime: task.completionTime,\n    })\n\n    return true\n  }\n\n  /**\n   * Update house settings\n   */\n  updateHouseSettings(playerId: string, settings: Partial<HouseSettings>): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house) {\n      return false\n    }\n\n    // Update settings\n    Object.assign(house.settings, settings)\n\n    // Emit event\n    this.emit('construction:settings-updated', {\n      playerId,\n      houseId,\n      settings,\n    })\n\n    return true\n  }\n\n  /**\n   * Move house\n   */\n  moveHouse(playerId: string, newLocation: string): boolean {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return false\n    }\n\n    const house = this.houses.get(houseId)\n    if (!house) {\n      return false\n    }\n\n    // Check if valid location\n    if (!this.housePortals.has(newLocation)) {\n      this.emit('construction:error', {\n        playerId,\n        error: 'Invalid house location',\n      })\n      return false\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    // Check cost (25k)\n    const moveCost = 25000\n    const inventory = player.getComponent('inventory')\n    if (!inventory || !this.hasGold(inventory, moveCost)) {\n      this.emit('construction:error', {\n        playerId,\n        error: `You need ${moveCost} gold to move your house`,\n      })\n      return false\n    }\n\n    // Remove all visitors first\n    for (const visitorId of [...house.visitors]) {\n      this.leaveHouse(visitorId)\n    }\n\n    // Deduct gold\n    this.removeGold(inventory, moveCost)\n\n    // Move house\n    const oldLocation = house.location\n    house.location = newLocation as any\n\n    // Emit event\n    this.emit('construction:house-moved', {\n      playerId,\n      houseId,\n      oldLocation,\n      newLocation,\n    })\n\n    return true\n  }\n\n  /**\n   * Get player's house\n   */\n  getPlayerHouse(playerId: string): PlayerHouse | null {\n    const houseId = this.playerHouses.get(playerId)\n    if (!houseId) {\n      return null\n    }\n    return this.houses.get(houseId) || null\n  }\n\n  /**\n   * Get construction level\n   */\n  getConstructionLevel(playerId: string): number {\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return 0\n    }\n\n    const component = player.getComponent<ConstructionComponent>('construction')\n    return component?.level || 0\n  }\n\n  /**\n   * Helper methods\n   */\n  private addRoom(\n    house: PlayerHouse,\n    type: RoomType,\n    position: { floor: number; x: number; z: number },\n    rotation: number\n  ): ConstructionRoom {\n    const roomId = this.generateRoomId()\n    const room: ConstructionRoom = {\n      id: roomId,\n      type,\n      rotation,\n      level: position.floor,\n      furniture: new Map(),\n      doors: new Map([\n        ['north', true],\n        ['east', true],\n        ['south', true],\n        ['west', true],\n      ]),\n      hotspots: this.generateHotspots(type),\n    }\n\n    const key = `${position.floor},${position.x},${position.z}`\n    house.layout.set(key, room)\n\n    return room\n  }\n\n  private generateHotspots(roomType: RoomType): Map<string, HotspotType> {\n    const hotspots = new Map<string, HotspotType>()\n\n    // Generate hotspots based on room type\n    switch (roomType) {\n      case RoomType.PARLOUR:\n        hotspots.set('chair1', HotspotType.SEATING)\n        hotspots.set('chair2', HotspotType.SEATING)\n        hotspots.set('chair3', HotspotType.SEATING)\n        hotspots.set('bookcase', HotspotType.STORAGE)\n        hotspots.set('fireplace', HotspotType.LIGHTING)\n        break\n      case RoomType.KITCHEN:\n        hotspots.set('stove', HotspotType.SKILL)\n        hotspots.set('table', HotspotType.TABLE)\n        hotspots.set('shelf', HotspotType.STORAGE)\n        hotspots.set('larder', HotspotType.STORAGE)\n        break\n      case RoomType.CHAPEL:\n        hotspots.set('altar', HotspotType.ALTAR)\n        hotspots.set('icon', HotspotType.DECORATION)\n        hotspots.set('lamp1', HotspotType.LIGHTING)\n        hotspots.set('lamp2', HotspotType.LIGHTING)\n        break\n      case RoomType.PORTAL_CHAMBER:\n        hotspots.set('portal1', HotspotType.PORTAL)\n        hotspots.set('portal2', HotspotType.PORTAL)\n        hotspots.set('portal3', HotspotType.PORTAL)\n        hotspots.set('centerpiece', HotspotType.GLORY)\n        break\n      // Add more room types...\n    }\n\n    return hotspots\n  }\n\n  private isConnectedPosition(house: PlayerHouse, position: { floor: number; x: number; z: number }): boolean {\n    // Check adjacent positions\n    const adjacent = [\n      { floor: position.floor, x: position.x + 1, z: position.z },\n      { floor: position.floor, x: position.x - 1, z: position.z },\n      { floor: position.floor, x: position.x, z: position.z + 1 },\n      { floor: position.floor, x: position.x, z: position.z - 1 },\n    ]\n\n    // Check if stairs connect to floors above/below\n    if (position.floor !== 0) {\n      adjacent.push(\n        { floor: position.floor - 1, x: position.x, z: position.z },\n        { floor: position.floor + 1, x: position.x, z: position.z }\n      )\n    }\n\n    for (const adj of adjacent) {\n      const key = `${adj.floor},${adj.x},${adj.z}`\n      if (house.layout.has(key)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  private wouldDisconnectRooms(_house: PlayerHouse, _position: { floor: number; x: number; z: number }): boolean {\n    // Simple check: if removing this room would leave any room with no connections\n    // In a real implementation, this would use graph connectivity algorithms\n    return false\n  }\n\n  private getHouseEntrance(house: PlayerHouse): Vector3 {\n    // Find the garden room (usually at 0,0,0)\n    const gardenKey = '0,0,0'\n    const hasGarden = house.layout.has(gardenKey)\n\n    return {\n      x: this.HOUSE_INSTANCE_OFFSET + (hasGarden ? 4 : 0),\n      y: 0,\n      z: this.HOUSE_INSTANCE_OFFSET + (hasGarden ? 4 : 0),\n    }\n  }\n\n  private applyFurnitureEffect(player: PlayerEntity, effect: FurnitureEffect, _house: PlayerHouse): void {\n    switch (effect.type) {\n      case 'teleport':\n        const movement = player.getComponent('movement') as any\n        if (movement && effect.data.position) {\n          movement.teleportDestination = effect.data.position\n          movement.teleportTime = Date.now()\n          movement.teleportAnimation = 'teleport'\n        }\n        break\n\n      case 'altar':\n        const stats = player.getComponent('stats') as any\n        if (stats && stats.prayer) {\n          const bonus = effect.data.prayerBonus || 100\n          const restored = Math.floor(stats.prayer.maxPoints * (bonus / 100))\n          stats.prayer.points = Math.min(stats.prayer.maxPoints + 20, stats.prayer.points + restored)\n        }\n        break\n\n      case 'restore':\n        const restoreStats = player.getComponent('stats') as any\n        if (restoreStats && restoreStats.prayer) {\n          const bonus = effect.data.bonus || 100\n          const restored = Math.floor(restoreStats.prayer.maxPoints * (bonus / 100))\n          restoreStats.prayer.points = Math.min(\n            restoreStats.prayer.maxPoints + 20,\n            restoreStats.prayer.points + restored\n          )\n        }\n        break\n\n      case 'bank':\n        // Open bank interface\n        this.emit('bank:open', { playerId: player.id })\n        break\n    }\n  }\n\n  private grantConstructionXP(playerId: string, xp: number): void {\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return\n    }\n\n    const component = this.getOrCreateConstructionComponent(player as PlayerEntity)\n    component.experience += xp\n\n    // Check for level up\n    const newLevel = this.getLevelForXP(component.experience)\n    if (newLevel > component.level) {\n      component.level = newLevel\n\n      this.emit('skill:levelup', {\n        playerId,\n        skill: 'construction',\n        newLevel,\n      })\n\n      // Unlock benefits\n      if (newLevel === 30) {\n        const houseId = this.playerHouses.get(playerId)\n        if (houseId) {\n          const house = this.houses.get(houseId)\n          if (house) {\n            house.maxFloors = 2 // Unlock upper floor\n          }\n        }\n      } else if (newLevel === 50) {\n        const houseId = this.playerHouses.get(playerId)\n        if (houseId) {\n          const house = this.houses.get(houseId)\n          if (house) {\n            house.maxFloors = 3 // Unlock basement\n          }\n        }\n      }\n    }\n\n    this.emit('skill:xp-gained', {\n      playerId,\n      skill: 'construction',\n      xp,\n      totalXp: component.experience,\n    })\n  }\n\n  private getLevelForXP(xp: number): number {\n    // RuneScape XP formula\n    let level = 1\n    let totalXP = 0\n\n    for (let l = 1; l <= 99; l++) {\n      const xpRequired = Math.floor(l + 300 * Math.pow(2, l / 7)) / 4\n      totalXP += xpRequired\n      if (xp >= totalXP) {\n        level = l + 1\n      } else {\n        break\n      }\n    }\n\n    return Math.min(level, 99)\n  }\n\n  private getOrCreateConstructionComponent(player: PlayerEntity): ConstructionComponent {\n    let component = player.getComponent<ConstructionComponent>('construction')\n    if (!component) {\n      component = {\n        type: 'construction',\n        entity: player,\n        data: {},\n        level: 1,\n        experience: 0,\n        houseId: null,\n        inHouse: false,\n        buildMode: false,\n        flatpacks: new Map(),\n        currentBuild: null,\n      }\n      player.addComponent('construction', component)\n    }\n    return component\n  }\n\n  private sendMessage(playerId: string, message: string): void {\n    this.emit('chat:message', {\n      playerId,\n      message,\n      type: 'system',\n    })\n  }\n\n  private hasGold(inventory: any, amount: number): boolean {\n    return inventory.getItemCount(995) >= amount // 995 is gold ID\n  }\n\n  private removeGold(inventory: any, amount: number): void {\n    inventory.removeItem(995, amount)\n  }\n\n  private addGold(inventory: any, amount: number): void {\n    inventory.addItem({ id: 995, quantity: amount })\n  }\n\n  private generateHouseId(): string {\n    return `house_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private generateRoomId(): string {\n    return `room_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * Update loop\n   */\n  update(_delta: number): void {\n    const now = Date.now()\n\n    // Process servant tasks\n    for (const house of this.houses.values()) {\n      if (house.servant.type !== 'none' && house.servant.taskQueue.length > 0) {\n        const task = house.servant.taskQueue[0]\n        if (now >= task.completionTime) {\n          // Complete task\n          house.servant.taskQueue.shift()\n\n          this.emit('construction:servant-task-completed', {\n            houseId: house.id,\n            ownerId: house.ownerId,\n            taskType: task.type,\n            items: task.items,\n          })\n        }\n      }\n\n      // Check servant wages (every 30 minutes)\n      if (house.servant.type !== 'none') {\n        const wageInterval = 30 * 60 * 1000 // 30 minutes\n        if (now - house.servant.lastPayment >= wageInterval) {\n          const wage = this.SERVANT_WAGES.get(house.servant.type) || 0\n\n          // Try to pay from owner's inventory\n          const owner = this.world.entities.get(house.ownerId)\n          if (owner) {\n            const inventory = owner.getComponent('inventory')\n            if (inventory && this.hasGold(inventory, wage)) {\n              this.removeGold(inventory, wage)\n              house.servant.lastPayment = now\n            } else {\n              // Dismiss servant if can't pay\n              this.dismissServant(house.ownerId)\n              this.sendMessage(house.ownerId, 'Your servant has left due to lack of payment')\n            }\n          }\n        }\n      }\n    }\n  }\n}\n", "// Core RPG Type Definitions\n\n// Core type re-exports\nexport * from '../../types'\n\n// Import core types\nimport type { Entity, Component as CoreComponent } from '../../types'\n\n// Re-export Entity type from core\nexport type { Entity } from '../../types'\n\n// Skill types\nexport type SkillType =\n  | 'attack'\n  | 'strength'\n  | 'defense'\n  | 'ranged'\n  | 'magic'\n  | 'prayer'\n  | 'hitpoints'\n  | 'mining'\n  | 'smithing'\n  | 'fishing'\n  | 'cooking'\n  | 'woodcutting'\n  | 'firemaking'\n  | 'crafting'\n  | 'herblore'\n  | 'agility'\n  | 'thieving'\n  | 'slayer'\n  | 'farming'\n  | 'runecrafting'\n  | 'hunter'\n  | 'construction'\n\n// Vector types\nexport interface Vector3 {\n  x: number\n  y: number\n  z: number\n}\n\n// Add Vector2 type\nexport interface Vector2 {\n  x: number\n  y: number\n}\n\n// Component types\nexport interface Component {\n  type: string\n  entityId?: string\n  entity?: any\n  data?: any\n}\n\n// Combat types\nexport enum CombatStyle {\n  ACCURATE = 'accurate',\n  AGGRESSIVE = 'aggressive',\n  DEFENSIVE = 'defensive',\n  CONTROLLED = 'controlled',\n  RAPID = 'rapid',\n  LONGRANGE = 'longrange',\n}\n\nexport enum AttackType {\n  MELEE = 'melee',\n  RANGED = 'ranged',\n  MAGIC = 'magic',\n}\n\nexport enum SpellType {\n  WIND_STRIKE = 'wind_strike',\n  WATER_STRIKE = 'water_strike',\n  EARTH_STRIKE = 'earth_strike',\n  FIRE_STRIKE = 'fire_strike',\n  WIND_BOLT = 'wind_bolt',\n  WATER_BOLT = 'water_bolt',\n  EARTH_BOLT = 'earth_bolt',\n  FIRE_BOLT = 'fire_bolt',\n  WIND_BLAST = 'wind_blast',\n  WATER_BLAST = 'water_blast',\n  EARTH_BLAST = 'earth_blast',\n  FIRE_BLAST = 'fire_blast',\n  WIND_WAVE = 'wind_wave',\n  WATER_WAVE = 'water_wave',\n  EARTH_WAVE = 'earth_wave',\n  FIRE_WAVE = 'fire_wave',\n  WIND_SURGE = 'wind_surge',\n  WATER_SURGE = 'water_surge',\n  EARTH_SURGE = 'earth_surge',\n  FIRE_SURGE = 'fire_surge',\n  CONFUSE = 'confuse',\n  WEAKEN = 'weaken',\n  CURSE = 'curse',\n  BIND = 'bind',\n  SNARE = 'snare',\n  ENTANGLE = 'entangle',\n  STUN = 'stun',\n  CHARGE = 'charge',\n  BONES_TO_BANANAS = 'bones_to_bananas',\n  TELEKINETIC_GRAB = 'telekinetic_grab',\n  SUPERHEAT_ITEM = 'superheat_item',\n  ENCHANT_CROSSBOW_BOLT = 'enchant_crossbow_bolt',\n  CHARGE_WATER_ORB = 'charge_water_orb',\n  CHARGE_EARTH_ORB = 'charge_earth_orb',\n  CHARGE_FIRE_ORB = 'charge_fire_orb',\n  CHARGE_AIR_ORB = 'charge_air_orb'\n}\n\nexport interface CombatBonuses {\n  // Attack bonuses\n  attackStab: number\n  attackSlash: number\n  attackCrush: number\n  attackMagic: number\n  attackRanged: number\n\n  // Defense bonuses\n  defenseStab: number\n  defenseSlash: number\n  defenseCrush: number\n  defenseMagic: number\n  defenseRanged: number\n\n  // Other bonuses\n  meleeStrength: number\n  rangedStrength: number\n  magicDamage: number\n  prayerBonus: number\n}\n\nexport interface HitResult {\n  damage: number\n  type: 'normal' | 'miss' | 'critical'\n  attackType: AttackType\n  attackerId: string\n  targetId: string\n  timestamp: number\n}\n\nexport interface CombatSession {\n  id: string\n  attackerId: string\n  targetId: string\n  startTime: number\n  lastAttackTime: number\n  combatTimer: number\n  hits: HitResult[]\n}\n\n// Stats types\nexport interface SkillData {\n  level: number\n  xp: number\n  bonus?: number\n  current?: number\n  experience?: number\n}\n\nexport interface StatsComponent extends Component {\n  type: 'stats'\n\n  // Combat skills\n  hitpoints: {\n    current: number\n    max: number\n    level: number\n    xp: number\n    experience?: number\n  }\n  attack: SkillData\n  strength: SkillData\n  defense: SkillData\n  defence?: SkillData  // Alternative spelling for compatibility\n  ranged: SkillData\n  magic: SkillData\n  prayer: {\n    level: number\n    xp: number\n    points: number\n    maxPoints: number\n    current?: number\n    experience?: number\n  }\n\n  // Gathering skills\n  mining?: SkillData\n  fishing?: SkillData\n  woodcutting?: SkillData\n  firemaking?: SkillData\n\n  // Artisan skills\n  smithing?: SkillData\n  cooking?: SkillData\n  crafting?: SkillData\n  fletching?: SkillData\n  construction?: SkillData\n  herblore?: SkillData\n\n  // Support skills\n  agility?: SkillData\n  thieving?: SkillData\n  slayer?: SkillData\n  farming?: SkillData\n  runecrafting?: SkillData\n  hunter?: SkillData\n\n  // Combat bonuses from equipment\n  combatBonuses: CombatBonuses\n\n  // Computed values\n  combatLevel: number\n  totalLevel: number\n}\n\nexport interface CombatComponent extends Component {\n  type: 'combat'\n  entityId?: string\n  entity?: any\n  data?: any\n\n  inCombat: boolean\n  target: string | null\n  lastAttackTime: number\n  lastAttack?: number\n  attackSpeed: number\n  attackRange?: number\n  combatStyle: CombatStyle\n  autoRetaliate: boolean\n\n  // Combat state\n  hitSplatQueue: HitSplat[]\n  hitSplats?: HitSplat[]\n  animationQueue: string[]\n\n  // Special attack\n  specialAttackEnergy: number\n  specialAttackActive: boolean\n\n  // Protection prayers\n  protectionPrayers: {\n    melee: boolean\n    ranged: boolean\n    magic: boolean\n  }\n}\n\nexport interface HitSplat {\n  damage: number\n  type: 'normal' | 'miss' | 'critical' | 'poison' | 'disease'\n  position: Vector3\n  timestamp: number\n  duration: number\n}\n\n// Item and Equipment types\nexport enum EquipmentSlot {\n  HEAD = 'head',\n  CAPE = 'cape',\n  AMULET = 'amulet',\n  WEAPON = 'weapon',\n  BODY = 'body',\n  SHIELD = 'shield',\n  LEGS = 'legs',\n  GLOVES = 'gloves',\n  BOOTS = 'boots',\n  RING = 'ring',\n  AMMO = 'ammo',\n}\n\nexport enum WeaponType {\n  DAGGER = 'dagger',\n  SWORD = 'sword',\n  SCIMITAR = 'scimitar',\n  MACE = 'mace',\n  AXE = 'axe',\n  SPEAR = 'spear',\n  HALBERD = 'halberd',\n  BOW = 'bow',\n  CROSSBOW = 'crossbow',\n  STAFF = 'staff',\n  WAND = 'wand',\n}\n\nexport interface ItemDefinition {\n  id: number\n  name: string\n  examine: string\n  value: number\n  weight: number\n\n  // Properties\n  stackable: boolean\n  equipable: boolean\n  tradeable: boolean\n  members: boolean\n\n  // Noting system\n  noteable?: boolean\n  noted?: boolean\n  notedId?: number\n\n  // Equipment data\n  equipment?: {\n    slot: EquipmentSlot\n    requirements: { [skill: string]: SkillData }\n    bonuses: CombatBonuses\n    weaponType?: WeaponType\n    attackSpeed?: number\n    twoHanded?: boolean\n  }\n\n  // Visual\n  model: string\n  icon: string\n}\n\nexport interface ItemStack {\n  itemId: number\n  quantity: number\n  metadata?: any\n}\n\nexport interface Equipment extends ItemDefinition {\n  metadata?: any\n}\n\nexport interface InventoryComponent extends Component {\n  type: 'inventory'\n\n  items: (ItemStack | null)[]\n  maxSlots: number\n\n  equipment: {\n    [K in EquipmentSlot]: Equipment | null\n  }\n\n  totalWeight: number\n  equipmentBonuses: CombatBonuses\n}\n\n// NPC types\nexport enum NPCType {\n  MONSTER = 'monster',\n  QUEST_GIVER = 'quest_giver',\n  SHOP = 'shop',\n  BANKER = 'banker',\n  SKILL_MASTER = 'skill_master',\n  SHOPKEEPER = 'shopkeeper',\n  GUARD = 'guard',\n  BOSS = 'boss',\n  ANIMAL = 'animal',\n  CITIZEN = 'citizen',\n}\n\nexport enum ZoneType {\n  LUMBRIDGE = 'lumbridge',\n  VARROCK = 'varrock',\n  FALADOR = 'falador',\n  DRAYNOR = 'draynor',\n  EDGEVILLE = 'edgeville',\n  WILDERNESS = 'wilderness',\n  TUTORIAL_ISLAND = 'tutorial_island',\n  BARBARIAN_VILLAGE = 'barbarian_village',\n  FISHING_GUILD = 'fishing_guild',\n  KARAMJA = 'karamja',\n  CAMELOT = 'camelot'\n}\n\nexport enum NPCBehavior {\n  AGGRESSIVE = 'aggressive',\n  PASSIVE = 'passive',\n  FRIENDLY = 'friendly',\n  SHOP = 'shop',\n  QUEST = 'quest',\n  BANKER = 'banker',\n  DEFENSIVE = 'defensive',\n  WANDER = 'wander',\n  PATROL = 'patrol',\n  FOLLOW = 'follow',\n}\n\nexport enum NPCState {\n  IDLE = 'idle',\n  COMBAT = 'combat',\n  FLEEING = 'fleeing',\n  DEAD = 'dead',\n  WANDERING = 'wandering',\n  PATROLLING = 'patrolling',\n  RETURNING = 'returning',\n}\n\nexport interface NPCComponent extends Component {\n  type: 'npc'\n\n  npcId: number\n  name: string\n  examine: string\n\n  // Type and behavior\n  npcType: NPCType\n  behavior: NPCBehavior\n  faction: string\n\n  // State\n  state: NPCState\n  level: number\n\n  // Combat stats\n  combatLevel: number\n  maxHitpoints: number\n  currentHitpoints: number\n  attackStyle: AttackType\n  aggressionLevel: number\n  aggressionRange: number\n\n  // Combat abilities\n  attackBonus: number\n  strengthBonus: number\n  defenseBonus: number\n  maxHit: number\n  attackSpeed: number\n\n  // Spawning\n  respawnTime: number\n  wanderRadius: number\n  spawnPoint: Vector3\n\n  // Loot\n  lootTable?: string\n\n  // Interaction\n  dialogue?: any\n  shop?: any\n  questGiver?: boolean\n  shopkeeper?: boolean\n  shopType?: string\n  currentTarget: string | null\n  lastInteraction: number\n}\n\n// Movement types\nexport interface MovementComponent extends Component {\n  type: 'movement'\n\n  position: Vector3\n  velocity?: Vector3\n  destination: Vector3 | null\n  targetPosition: Vector3 | null\n  path: Vector3[]\n  speed?: number\n  currentSpeed: number\n  moveSpeed: number\n  isMoving: boolean\n  canMove: boolean\n  runEnergy: number\n  isRunning: boolean\n  facingDirection: number\n\n  // Pathfinding\n  pathfindingFlags: number\n  lastMoveTime: number\n\n  // Teleportation\n  teleportDestination: Vector3 | null\n  teleportTime: number\n  teleportAnimation: string\n}\n\n// Loot types\nexport interface ItemDrop {\n  itemId: number\n  quantity: number\n  noted?: boolean\n}\n\nexport interface LootDrop {\n  itemId: number\n  quantity: number\n  weight: number\n  rarity: 'always' | 'common' | 'uncommon' | 'rare' | 'very_rare' | 'ultra_rare'\n}\n\nexport interface LootEntry {\n  itemId: number\n  quantity: {\n    min: number\n    max: number\n  }\n  weight: number\n  noted?: boolean\n}\n\nexport interface LootTable {\n  id: string\n  name: string\n  description?: string\n\n  drops: LootDrop[]\n  rareDropTable: boolean\n\n  // Legacy properties for compatibility\n  alwaysDrops?: ItemDrop[]\n  commonDrops?: LootEntry[]\n  uncommonDrops?: LootEntry[]\n  rareDrops?: LootEntry[]\n\n  rareTableAccess?: number\n  maxDrops?: number\n}\n\nexport interface LootComponent extends Component {\n  type: 'loot'\n  items: LootDrop[]\n  owner: string | null\n  spawnTime: number\n  position: Vector3\n  source: string\n}\n\n// Entity types\nexport interface RPGEntity extends Entity {\n  // Override components with proper type\n  components: Map<string, any>\n\n  // Component methods remain compatible with base Entity but handle the correct types\n  getComponent<T extends Component>(type: string): T | null\n  hasComponent(type: string): boolean\n\n  // RPG-specific properties\n  position: Vector3\n}\n\n// Player specific\nexport interface PlayerEntity extends RPGEntity {\n  id: string\n  username: string\n  displayName: string\n  accountType: 'normal' | 'ironman' | 'hardcore_ironman'\n  playTime: number\n  membershipStatus: boolean\n\n  // Death mechanics\n  deathLocation: Vector3 | null\n  gravestoneTimer: number\n\n  // PvP\n  skullTimer: number\n  wildernessLevel: number\n  combatZone: 'safe' | 'pvp' | 'wilderness'\n}\n\n// NPC Entity\nexport interface NPCEntity extends RPGEntity {\n  spawnPoint: Vector3\n  currentTarget: string | null\n  deathTime: number\n\n  // AI State\n  aiState: 'idle' | 'wandering' | 'chasing' | 'attacking' | 'fleeing' | 'returning'\n  stateTimer: number\n}\n\n// Item Drop Entity\nexport interface ItemDropEntity extends RPGEntity {\n  itemId: number\n  quantity: number\n  value: number\n\n  owner: string | null\n  ownershipTimer: number\n  publicSince: number\n\n  despawnTimer: number\n  highlightTimer: number\n}\n\n// NPC Definition\nexport interface NPCDefinition {\n  id: number\n  name: string\n  examine: string\n  npcType: NPCType\n  behavior: NPCBehavior\n  faction?: string\n  level?: number\n  combatLevel?: number\n  maxHitpoints?: number\n  attackStyle?: AttackType\n  aggressionLevel?: number\n  aggressionRange?: number\n  combat?: {\n    attackBonus: number\n    strengthBonus: number\n    defenseBonus: number\n    maxHit: number\n    attackSpeed: number\n  }\n  lootTable?: string\n  respawnTime?: number\n  wanderRadius?: number\n  moveSpeed?: number\n  dialogue?: any\n  shop?: {\n    name: string\n    stock: Array<{ itemId: number; stock: number }>\n    currency: string\n    buyModifier: number\n    sellModifier: number\n    restock: boolean\n    restockTime: number\n  }\n  questGiver?: {\n    useLLM: boolean\n    quests: string[]\n    minLevel: number\n    maxLevel: number\n    questCooldown: number\n  }\n  skillMaster?: any\n}\n\n// Spawning System Types\nexport enum SpawnerType {\n  NPC = 'npc',\n  RESOURCE = 'resource',\n  CHEST = 'chest',\n  BOSS = 'boss',\n  EVENT = 'event',\n}\n\nexport interface SpawnArea {\n  type: 'point' | 'circle' | 'rectangle' | 'polygon'\n\n  // Area-specific parameters\n  radius?: number // For circle\n  width?: number // For rectangle\n  height?: number // For rectangle\n  vertices?: Vector3[] // For polygon\n\n  // Spawn rules\n  avoidOverlap: boolean\n  minSpacing: number\n  maxHeight: number // Y-axis variance\n\n  // Validation\n  isValidPosition(position: Vector3): boolean\n  getRandomPosition(): Vector3\n}\n\n// Death/Respawn System Types\nexport interface QuestRequirement {\n  questId: string\n}\n\nexport interface SkillRequirement {\n  skill: SkillType\n  level: number\n}\n\nexport enum GravestoneTier {\n  BASIC = 'basic',\n  WOODEN = 'wooden',\n  STONE = 'stone',\n  ORNATE = 'ornate',\n  ANGEL = 'angel',\n  MYSTIC = 'mystic',\n  ROYAL = 'royal',\n}\n\nexport interface Gravestone {\n  id: string\n  ownerId: string\n  position: Vector3\n  items: ItemStack[]\n  createdAt: number\n  expiresAt: number\n  tier: GravestoneTier\n  blessed: boolean\n  blessedBy?: string\n}\n\nexport interface RespawnPoint {\n  id: string\n  name: string\n  position: Vector3\n  requirements?: QuestRequirement | SkillRequirement\n  isDefault?: boolean\n}\n\nexport interface SafeZone {\n  id: string\n  name: string\n  bounds: BoundingBox\n  allowPvP: boolean\n}\n\nexport interface BoundingBox {\n  min: Vector3\n  max: Vector3\n}\n\nexport interface DeathConfig {\n  // Respawn locations\n  defaultRespawnPoint: Vector3\n  respawnPoints: Map<string, RespawnPoint>\n\n  // Item protection\n  itemsKeptOnDeath: number // Default: 3\n  protectItemPrayer: boolean\n  skullItemsKept: number // Default: 0\n\n  // Gravestone settings\n  gravestoneEnabled: boolean\n  gravestoneBaseDuration: number // milliseconds\n  gravestoneTierMultipliers: Map<GravestoneTier, number>\n\n  // Safe zones\n  safeZones: SafeZone[]\n\n  // Death costs\n  freeReclaimThreshold: number // GP value\n  reclaimFeePercentage: number // Percentage of item value\n}\n\nexport interface DeathComponent extends Component {\n  type: 'death'\n\n  isDead: boolean\n  deathTime: number\n  deathLocation: Vector3 | null\n  killer: string | null\n\n  // Gravestone\n  gravestoneId: string | null\n  gravestoneTimer: number\n\n  // Respawn\n  respawnPoint: string | null\n  respawnTimer: number\n\n  // Item protection\n  itemsKeptOnDeath: ItemStack[]\n  itemsLostOnDeath: ItemStack[]\n\n  // Death count\n  deathCount: number\n  lastDeathTime: number\n}\n\nexport interface ItemValue {\n  stack: ItemStack\n  value: number\n}\n\n// Grand Exchange types\nexport enum OfferType {\n  BUY = 'buy',\n  SELL = 'sell',\n}\n\nexport enum OfferStatus {\n  PENDING = 'pending',\n  PARTIAL = 'partial',\n  COMPLETE = 'complete',\n  CANCELLED = 'cancelled',\n  ACTIVE = 'active',\n  EXPIRED = 'expired',\n  COLLECTED = 'collected',\n}\n\nexport interface GrandExchangeOffer {\n  id: string\n  playerId: string\n  type: OfferType\n  itemId: number\n  quantity: number\n  pricePerItem: number\n  quantityFulfilled: number\n  status: OfferStatus\n  createdAt: number\n  updatedAt: number\n  completedAt?: number\n  cancelledAt?: number\n\n  // Additional properties for the implementation\n  remainingQuantity: number\n  completedQuantity: number\n  totalSpent?: number\n  totalEarned?: number\n}\n\nexport interface GrandExchangeComponent extends Component {\n  type: 'grandExchange'\n\n  offers: GrandExchangeOffer[]\n  maxOffers: number\n  offerHistory: GrandExchangeOffer[]\n  collectItems: ItemStack[]\n  collectGold: number\n}\n\nexport interface MarketData {\n  itemId: number\n  currentPrice: number\n  averagePrice: number\n  volume24h: number\n  priceChange24h: number\n  buyOffers: number\n  sellOffers: number\n  lastTrade: number\n  priceHistory: Array<{\n    timestamp: number\n    price: number\n    volume: number\n  }>\n}\n\n// Clan System types\nexport enum ClanRank {\n  RECRUIT = 'recruit',\n  CORPORAL = 'corporal',\n  SERGEANT = 'sergeant',\n  LIEUTENANT = 'lieutenant',\n  CAPTAIN = 'captain',\n  GENERAL = 'general',\n  ADMIN = 'admin',\n  DEPUTY_OWNER = 'deputy_owner',\n  OWNER = 'owner',\n}\n\nexport interface ClanMember {\n  playerId: string\n  username: string\n  rank: ClanRank\n  joinedAt: number\n  lastSeen: number\n  contributions: number\n  clanXp: number\n}\n\nexport interface Clan {\n  id: string\n  name: string\n  tag: string\n  description: string\n  owner: string\n  created: number\n  members: Map<string, ClanMember>\n  maxMembers: number\n  level: number\n  experience: number\n  treasury: number\n\n  // Settings\n  settings: {\n    joinType: 'open' | 'invite' | 'closed'\n    minCombatLevel: number\n    minTotalLevel: number\n    kickInactiveDays: number\n    clanColor: string\n    motd: string // Message of the day\n  }\n\n  // Features\n  features: {\n    citadel: boolean\n    clanWars: boolean\n    clanChat: boolean\n    events: boolean\n  }\n\n  // Permissions by rank\n  permissions: Map<ClanRank, ClanPermissions>\n}\n\nexport interface ClanPermissions {\n  invite: boolean\n  kick: boolean\n  promote: boolean\n  demote: boolean\n  accessTreasury: boolean\n  editSettings: boolean\n  startWars: boolean\n  editMotd: boolean\n  manageCitadel: boolean\n}\n\nexport interface ClanComponent extends Component {\n  type: 'clan'\n\n  clanId: string | null\n  rank: ClanRank | null\n  invites: string[] // Clan IDs\n  joinDate: number\n  contributions: number\n  clanXp: number\n  lastClanChat: number\n}\n\n// Clan War types\nexport interface ClanWar {\n  id: string\n  clan1Id: string\n  clan2Id: string\n  startTime?: number\n  endTime?: number\n  status: 'pending' | 'active' | 'completed'\n  rules: ClanWarRules\n  scores: {\n    clan1: number\n    clan2: number\n  }\n  participants: Map<string, ClanWarParticipant>\n  winner?: string\n}\n\nexport interface ClanWarParticipant {\n  playerId: string\n  clanId: string\n  kills: number\n  deaths: number\n  damageDealt: number\n  healingDone: number\n  flagCaptures?: number\n}\n\nexport interface ClanWarRules {\n  duration: number\n  allowFood: boolean\n  allowPrayer: boolean\n  allowSpecial: boolean\n  combatLevelRange?: [number, number]\n  mapType: 'classic' | 'capture_the_flag' | 'king_of_the_hill'\n  respawnDelay: number\n  minParticipants: number\n  maxParticipants: number\n}\n\n// Minigame types\nexport enum MinigameType {\n  CASTLE_WARS = 'castle_wars',\n  PEST_CONTROL = 'pest_control',\n  FIGHT_CAVES = 'fight_caves',\n  BARROWS = 'barrows',\n}\n\nexport interface Minigame {\n  id: string\n  name: string\n  type: MinigameType\n  minPlayers: number\n  maxPlayers: number\n  duration: number\n  requirements?: GameRequirements\n  rewards: MinigameRewards\n  status: MinigameStatus\n}\n\nexport enum MinigameStatus {\n  WAITING = 'waiting',\n  STARTING = 'starting',\n  IN_PROGRESS = 'in_progress',\n  ENDING = 'ending',\n  COMPLETED = 'completed',\n}\n\nexport interface GameRequirements {\n  combatLevel?: number\n  skills?: { [skill: string]: number }\n  quests?: string[]\n  items?: string[]\n}\n\nexport interface MinigameRewards {\n  points: number\n  experience?: { [skill: string]: number }\n  items?: ItemReward[]\n  currency?: { [type: string]: number }\n}\n\nexport interface ItemReward {\n  itemId: number\n  quantity: number\n  chance: number\n}\n\nexport interface MinigameSession {\n  id: string\n  type: MinigameType\n  players: string[]\n  teams?: Map<string, Team>\n  startTime: number\n  endTime?: number\n  status: 'waiting' | 'in_progress' | 'completed'\n  data: any // Game-specific data\n}\n\nexport interface MinigamePlayer {\n  playerId: string\n  teamId?: string\n  score: number\n  stats: any // Game-specific stats\n}\n\nexport interface Team {\n  id: string\n  name: string\n  color: string\n  players: Set<string>\n  score: number\n}\n\nexport interface CastleWarsData {\n  saradominScore: number\n  zamorakScore: number\n  flagCarriers: {\n    saradomin: string | null\n    zamorak: string | null\n  }\n  barricades: Array<{\n    team: 'saradomin' | 'zamorak'\n    position: Vector3\n    health: number\n  }>\n  timeRemaining: number\n}\n\nexport interface PestControlData {\n  portals: Array<{\n    id: string\n    color: 'purple' | 'blue' | 'yellow' | 'red'\n    health: number\n    maxHealth: number\n    position: Vector3\n    shielded: boolean\n  }>\n  knightHealth: number\n  knightMaxHealth: number\n  voidKnightPosition: Vector3\n  pestCount: number\n  waveNumber: number\n}\n\nexport interface FightCavesData {\n  wave: number\n  maxWave: number\n  enemies: Array<{\n    type: 'tz-kih' | 'tz-kek' | 'tok-xil' | 'yt-mejkot' | 'ket-zek' | 'tzTok-jad'\n    health: number\n    position: Vector3\n  }>\n  healersSpawned: boolean\n  playerDeaths: number\n  startSupplies: ItemStack[]\n}\n\nexport interface BarrowsData {\n  cryptsLooted: Array<'ahrim' | 'dharok' | 'guthan' | 'karil' | 'torag' | 'verac'>\n  brothersKilled: string[]\n  tunnelBrother: string\n  rewardPotential: number\n  chestLooted: boolean\n  tunnelDoors: Map<string, boolean> // Door ID -> is open\n}\n\nexport interface MinigameComponent extends Component {\n  type: 'minigame'\n\n  currentMinigame: MinigameType | null\n  sessionId: string | null\n  team: string | null\n\n  // Stats\n  stats: Map<MinigameType, MinigameStats>\n\n  // Rewards\n  points: Map<MinigameType, number>\n  unlockedRewards: string[]\n}\n\nexport interface MinigameStats {\n  gamesPlayed: number\n  wins: number\n  losses: number\n  bestScore: number\n  totalScore: number\n  achievements: string[]\n  personalBest: any // Minigame-specific\n}\n\n// Construction types\nexport interface ConstructionRoom {\n  id: string\n  type: RoomType\n  rotation: number // 0, 90, 180, 270 degrees\n  level: number // Floor level\n  furniture: Map<string, Furniture>\n  doors: Map<string, boolean> // Direction -> has door\n  hotspots: Map<string, HotspotType>\n}\n\nexport enum RoomType {\n  GARDEN = 'garden',\n  PARLOUR = 'parlour',\n  KITCHEN = 'kitchen',\n  DINING_ROOM = 'dining_room',\n  WORKSHOP = 'workshop',\n  BEDROOM = 'bedroom',\n  HALL = 'hall',\n  GAMES_ROOM = 'games_room',\n  COMBAT_ROOM = 'combat_room',\n  QUEST_HALL = 'quest_hall',\n  STUDY = 'study',\n  COSTUME_ROOM = 'costume_room',\n  CHAPEL = 'chapel',\n  PORTAL_CHAMBER = 'portal_chamber',\n  FORMAL_GARDEN = 'formal_garden',\n  THRONE_ROOM = 'throne_room',\n  OUBLIETTE = 'oubliette',\n  DUNGEON = 'dungeon',\n  TREASURE_ROOM = 'treasure_room',\n}\n\nexport enum HotspotType {\n  DECORATION = 'decoration',\n  SEATING = 'seating',\n  TABLE = 'table',\n  STORAGE = 'storage',\n  LIGHTING = 'lighting',\n  RUG = 'rug',\n  ALTAR = 'altar',\n  PORTAL = 'portal',\n  GUARD = 'guard',\n  TROPHY = 'trophy',\n  SKILL = 'skill',\n  GAMES = 'games',\n  GLORY = 'glory',\n}\n\nexport interface Furniture {\n  id: string\n  itemId: number\n  name: string\n  hotspotType: HotspotType\n  level: number\n  experience: number\n  materials: ItemStack[]\n  effects?: FurnitureEffect[]\n  interactable: boolean\n}\n\nexport interface FurnitureEffect {\n  type: 'teleport' | 'restore' | 'bank' | 'altar' | 'range' | 'repair' | 'pet_house'\n  data: any\n}\n\nexport interface PlayerHouse {\n  id: string\n  ownerId: string\n  location: 'rimmington' | 'taverley' | 'pollnivneach' | 'hosidius' | 'rellekka' | 'brimhaven' | 'yanille'\n\n  // Layout\n  layout: Map<string, ConstructionRoom> // \"x,y,z\" -> Room\n  maxRooms: number\n  maxFloors: number\n\n  // Settings\n  settings: {\n    locked: boolean\n    buildMode: boolean\n    pvpEnabled: boolean\n    teleportInside: boolean\n    renderDistance: number\n    theme: 'basic' | 'fancy' | 'ancient'\n  }\n\n  // Servants\n  servant: {\n    type: 'none' | 'rick' | 'maid' | 'cook' | 'butler' | 'demon_butler'\n    taskQueue: ServantTask[]\n    lastPayment: number\n  }\n\n  // Visitors\n  visitors: string[]\n  maxVisitors: number\n\n  // Dungeon\n  dungeonMonsters: Array<{\n    type: string\n    position: Vector3\n    respawnTime: number\n  }>\n}\n\nexport interface ServantTask {\n  type: 'bank' | 'sawmill' | 'unnote' | 'fetch'\n  items: ItemStack[]\n  completionTime: number\n}\n\nexport interface ConstructionComponent extends Component {\n  type: 'construction'\n\n  level: number\n  experience: number\n\n  // House\n  houseId: string | null\n  inHouse: boolean\n  buildMode: boolean\n\n  // Furniture owned (for flatpacks)\n  flatpacks: Map<number, number> // Item ID -> quantity\n\n  // Current build\n  currentBuild: {\n    roomType: RoomType | null\n    position: Vector3 | null\n    rotation: number\n  } | null\n}\n\n// Additional Construction types\nexport interface HouseLayout {\n  rooms: Map<string, ConstructionRoom> // \"x,y,z\" -> Room\n  entrancePosition: Vector3\n  bounds: {\n    minX: number\n    maxX: number\n    minY: number\n    maxY: number\n    minZ: number\n    maxZ: number\n  }\n}\n\nexport interface RoomGrid {\n  x: number\n  y: number\n  z: number\n}\n\nexport interface Hotspot {\n  type: HotspotType\n  position: Vector3\n  furnitureId?: string\n}\n\nexport interface HouseSettings {\n  locked: boolean\n  buildMode: boolean\n  pvpEnabled: boolean\n  teleportInside: boolean\n  renderDistance: number\n  theme: 'basic' | 'fancy' | 'ancient'\n  visitors: string[]\n  maxVisitors: number\n}\n\nexport interface MaterialRequirement {\n  itemId: number\n  quantity: number\n}\n\n// Export visual types\nexport * from './visual.types'\n\n// Additional Grand Exchange types (extending the basic ones already defined)\nexport interface GrandExchangeTransaction {\n  id: string\n  buyerId: string\n  sellerId: string\n  itemId: number\n  quantity: number\n  price: number\n  timestamp: number\n  buyOfferId: string\n  sellOfferId: string\n}\n\nexport interface MarketPrice {\n  itemId: number\n  currentPrice: number\n  averagePrice: number\n  volume: number\n  lastUpdate: number\n  change24h: number\n}\n\nexport interface PriceHistory {\n  itemId: number\n  data: Array<{\n    timestamp: number\n    price: number\n    volume: number\n  }>\n}\n\nexport interface MarketStats {\n  itemId: number\n  currentPrice: number\n  averagePrice: number\n  volume24h: number\n  buyOffers: number\n  sellOffers: number\n  buyVolume: number\n  sellVolume: number\n  priceChange24h: number\n  highPrice24h: number\n  lowPrice24h: number\n}\n\n// Additional component interfaces for testing scenarios\nexport interface ResourceComponent extends Component {\n  type: 'resource'\n  resourceType: string\n  resourceId: number\n  name: string\n  examine: string\n  harvestable: boolean\n  respawnable: boolean\n  health: number\n  maxHealth: number\n  respawnTime: number\n  lastHarvestTime: number\n  requirements: {\n    skill: string\n    level: number\n    tool: string\n  }\n  drops: Array<{\n    itemId: number\n    quantity: { min: number; max: number }\n    chance: number\n    experience: number\n  }>\n  harvestTime: number\n  animations: {\n    idle: string\n    harvest: string\n    depleted: string\n  }\n}\n\nexport interface ItemComponent extends Component {\n  type: 'item'\n  itemId: number\n  quantity: number\n  owner: string | null\n  spawnTime: number\n  publicSince: number\n  despawnTimer: number\n  highlightTimer: number\n  noted: boolean\n  metadata?: any\n}\n\nexport interface QuestComponent extends Component {\n  type: 'quest'\n  activeQuests: Map<string, any>\n  completedQuests: Set<string>\n  questLog: string[]\n  questPoints: number\n  lastQuestUpdate: number\n}\n\nexport interface ConstructionSiteComponent extends Component {\n  type: 'construction_site'\n  siteId: string\n  roomType: RoomType\n  position: Vector3\n  requirements: {\n    level: number\n    materials: Array<{ itemId: number; quantity: number }>\n    tools: string[]\n  }\n  buildAttempts: number\n  isBuilt: boolean\n  canBuild: boolean\n  buildTime: number\n  experienceReward: number\n  availableHotspots: Array<{\n    type: HotspotType\n    position: Vector3\n  }>\n}\n\nexport interface SkillsComponent extends Component {\n  type: 'skills'\n  skills: {\n    [skillName: string]: {\n      level: number\n      xp: number\n      currentAction: string | null\n      lastActionTime: number\n      toolEquipped: string | null\n      efficiency: number\n    }\n  }\n}\n", "import { StatsComponent, CombatStyle, AttackType, CombatComponent } from '../../types'\n\nexport class HitCalculator {\n  /**\n   * Calculate attack roll based on stats and combat style\n   */\n  calculateAttackRoll(attacker: StatsComponent, style: CombatStyle, attackType: AttackType): number {\n    // Get effective level based on attack type\n    const effectiveLevel = this.getEffectiveAttackLevel(attacker, style, attackType)\n\n    // Get equipment bonus based on attack type\n    const equipmentBonus = this.getAttackBonus(attacker, attackType)\n\n    // RuneScape formula: effectiveLevel * (equipmentBonus + 64)\n    return effectiveLevel * (equipmentBonus + 64)\n  }\n\n  /**\n   * Calculate defense roll\n   */\n  calculateDefenseRoll(\n    defender: StatsComponent,\n    incomingAttackType: AttackType,\n    defenderCombatComponent?: CombatComponent\n  ): number {\n    // Get effective defense level\n    const effectiveDefense = this.getEffectiveDefenseLevel(\n      defender,\n      defenderCombatComponent?.combatStyle || CombatStyle.DEFENSIVE\n    )\n\n    // Get equipment defense bonus against attack type\n    const defenseBonus = this.getDefenseBonus(defender, incomingAttackType)\n\n    // Defense roll = effective level * (bonus + 64)\n    return effectiveDefense * (defenseBonus + 64)\n  }\n\n  /**\n   * Calculate hit chance from attack and defense rolls\n   */\n  calculateHitChance(attackRoll: number, defenseRoll: number): number {\n    if (attackRoll > defenseRoll) {\n      return 1 - (defenseRoll + 2) / (2 * (attackRoll + 1))\n    } else {\n      return attackRoll / (2 * (defenseRoll + 1))\n    }\n  }\n\n  /**\n   * Get effective attack level with style bonuses\n   */\n  private getEffectiveAttackLevel(attacker: StatsComponent, style: CombatStyle, attackType: AttackType): number {\n    let level = 0\n    let styleBonus = 0\n\n    // Get base level based on attack type\n    switch (attackType) {\n      case AttackType.MELEE:\n        level = attacker.attack.level\n        break\n      case AttackType.RANGED:\n        level = attacker.ranged.level\n        break\n      case AttackType.MAGIC:\n        level = attacker.magic.level\n        break\n    }\n\n    // Apply style bonuses\n    switch (style) {\n      case CombatStyle.ACCURATE:\n        styleBonus = 3 // +3 attack levels\n        break\n      case CombatStyle.CONTROLLED:\n        styleBonus = 1 // +1 to all\n        break\n    }\n\n    // Effective level = level + style bonus + 8\n    return level + styleBonus + 8\n  }\n\n  /**\n   * Get effective defense level with style bonuses\n   */\n  private getEffectiveDefenseLevel(defender: StatsComponent, style: CombatStyle): number {\n    const defenseLevel = defender.defense.level\n    const styleBonus = this.getDefenderStyleBonus(style)\n\n    // Include prayer bonus\n    const prayerBonus = this.getDefencePrayerBonus(defender)\n\n    // Effective level = (level + style bonus) * prayer bonus + 8\n    return Math.floor((defenseLevel + styleBonus) * prayerBonus) + 8\n  }\n\n  /**\n   * Get defender style bonus\n   */\n  private getDefenderStyleBonus(style: CombatStyle): number {\n    switch (style) {\n      case CombatStyle.DEFENSIVE:\n        return 3 // +3 defence levels\n      case CombatStyle.CONTROLLED:\n        return 1 // +1 to all combat skills\n      case CombatStyle.LONGRANGE:\n        return 3 // +3 defence levels for ranged\n      default:\n        return 0 // No defence bonus\n    }\n  }\n\n  /**\n   * Get defence prayer bonus multiplier\n   */\n  private getDefencePrayerBonus(defender: StatsComponent): number {\n    const prayers = (defender as any).activePrayers || {}\n\n    // Defence prayers\n    if (prayers.piety) {\n      return 1.25\n    } // 25% defence bonus\n    if (prayers.rigour) {\n      return 1.25\n    } // 25% defence bonus\n    if (prayers.augury) {\n      return 1.25\n    } // 25% defence bonus\n    if (prayers.chivalry) {\n      return 1.2\n    } // 20% defence bonus\n    if (prayers.steelSkin) {\n      return 1.15\n    } // 15% defence bonus\n    if (prayers.rockSkin) {\n      return 1.1\n    } // 10% defence bonus\n    if (prayers.thickSkin) {\n      return 1.05\n    } // 5% defence bonus\n\n    return 1.0\n  }\n\n  /**\n   * Get attack bonus based on attack type\n   */\n  private getAttackBonus(attacker: StatsComponent, attackType: AttackType): number {\n    const bonuses = attacker.combatBonuses\n\n    switch (attackType) {\n      case AttackType.MELEE:\n        // For melee, we'd need to know the attack style (stab/slash/crush)\n        // For now, use the highest\n        return Math.max(bonuses.attackStab, bonuses.attackSlash, bonuses.attackCrush)\n      case AttackType.RANGED:\n        return bonuses.attackRanged\n      case AttackType.MAGIC:\n        return bonuses.attackMagic\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * Get defense bonus against attack type\n   */\n  private getDefenseBonus(defender: StatsComponent, attackType: AttackType): number {\n    const bonuses = defender.combatBonuses\n\n    switch (attackType) {\n      case AttackType.MELEE:\n        // For melee, we'd need to know the specific style\n        // For now, average the defenses\n        return Math.floor((bonuses.defenseStab + bonuses.defenseSlash + bonuses.defenseCrush) / 3)\n      case AttackType.RANGED:\n        return bonuses.defenseRanged\n      case AttackType.MAGIC:\n        return bonuses.defenseMagic\n      default:\n        return 0\n    }\n  }\n}\n", "// Define local types to avoid import issues\nenum CombatStyle {\n  ACCURATE = 'accurate',\n  AGGRESSIVE = 'aggressive',\n  DEFENSIVE = 'defensive',\n  CONTROLLED = 'controlled',\n  RAPID = 'rapid',\n  LONGRANGE = 'longrange',\n}\n\nenum AttackType {\n  MELEE = 'melee',\n  RANGED = 'ranged',\n  MAGIC = 'magic',\n}\n\ninterface CombatBonuses {\n  attackStab: number\n  attackSlash: number\n  attackCrush: number\n  attackMagic: number\n  attackRanged: number\n  defenseStab: number\n  defenseSlash: number\n  defenseCrush: number\n  defenseMagic: number\n  defenseRanged: number\n  meleeStrength: number\n  rangedStrength: number\n  magicDamage: number\n  prayerBonus: number\n}\n\ninterface SkillData {\n  level: number\n  xp: number\n  bonus?: number\n  current?: number\n  experience?: number\n  points?: number\n}\n\ninterface StatsComponent {\n  type: 'stats'\n  hitpoints: {\n    current: number\n    max: number\n    level: number\n    xp: number\n    experience?: number\n  }\n  attack: SkillData\n  strength: SkillData\n  defence?: SkillData // Make optional to match imported type\n  defense?: SkillData // Alias for compatibility\n  ranged: SkillData\n  magic: SkillData\n  prayer: {\n    level: number\n    xp: number\n    points: number\n    maxPoints: number\n    current?: number\n    experience?: number\n  }\n  combatBonuses: CombatBonuses\n  combatLevel: number\n  totalLevel: number\n}\n\nexport class DamageCalculator {\n  /**\n   * Calculate maximum hit based on stats and combat style\n   */\n  calculateMaxHit(attacker: StatsComponent, style: CombatStyle, attackType: AttackType): number {\n    switch (attackType) {\n      case AttackType.MELEE:\n        return this.calculateMeleeMaxHit(attacker, style)\n      case AttackType.RANGED:\n        return this.calculateRangedMaxHit(attacker, style)\n      case AttackType.MAGIC:\n        return this.calculateMagicMaxHit(attacker)\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * Roll damage between 0 and max hit\n   */\n  rollDamage(maxHit: number): number {\n    // Random damage between 0 and max hit (inclusive)\n    return Math.floor(Math.random() * (maxHit + 1))\n  }\n\n  /**\n   * Apply damage reductions (protection prayers, etc.)\n   */\n  applyDamageReductions(\n    damage: number,\n    target: StatsComponent,\n    attackType: AttackType,\n    _attacker?: StatsComponent\n  ): number {\n    let reducedDamage = damage\n\n    // Apply protection prayers\n    const protectionMultiplier = this.getProtectionPrayerMultiplier(target, attackType)\n    reducedDamage = Math.floor(reducedDamage * protectionMultiplier)\n\n    // Apply defensive bonuses from equipment\n    const defenseReduction = this.getDefensiveDamageReduction(target, attackType)\n    reducedDamage = Math.floor(reducedDamage * defenseReduction)\n\n    // Apply special defensive effects (e.g., Elysian spirit shield)\n    const specialReduction = this.getSpecialDefensiveReduction(target)\n    reducedDamage = Math.floor(reducedDamage * specialReduction)\n\n    // Minimum damage is 0\n    return Math.max(0, reducedDamage)\n  }\n\n  /**\n   * Get protection prayer damage multiplier\n   */\n  private getProtectionPrayerMultiplier(target: StatsComponent, attackType: AttackType): number {\n    // Check if target has active protection prayers\n    const prayers = (target as any).activePrayers || {}\n\n    switch (attackType) {\n      case AttackType.MELEE:\n        if (prayers.protectFromMelee) {\n          return 0.6\n        } // 40% damage reduction\n        break\n      case AttackType.RANGED:\n        if (prayers.protectFromRanged) {\n          return 0.6\n        }\n        break\n      case AttackType.MAGIC:\n        if (prayers.protectFromMagic) {\n          return 0.6\n        }\n        break\n    }\n\n    return 1.0 // No reduction\n  }\n\n  /**\n   * Calculate defensive damage reduction from equipment\n   */\n  private getDefensiveDamageReduction(target: StatsComponent, attackType: AttackType): number {\n    // High defense bonus can provide small damage reduction\n    let defenseBonus = 0\n\n    switch (attackType) {\n      case AttackType.MELEE:\n        // Average of stab, slash, crush defense\n        defenseBonus =\n          (target.combatBonuses.defenseStab + target.combatBonuses.defenseSlash + target.combatBonuses.defenseCrush) / 3\n        break\n      case AttackType.RANGED:\n        defenseBonus = target.combatBonuses.defenseRanged\n        break\n      case AttackType.MAGIC:\n        defenseBonus = target.combatBonuses.defenseMagic\n        break\n    }\n\n    // Every 100 defense bonus = 1% damage reduction, max 10%\n    const reduction = Math.min(0.1, defenseBonus / 1000)\n    return 1.0 - reduction\n  }\n\n  /**\n   * Get special defensive reductions (e.g., from shields)\n   */\n  private getSpecialDefensiveReduction(target: StatsComponent): number {\n    // Check for special equipment effects\n    const equipment = (target as any).equipment || {}\n\n    // Elysian spirit shield effect (25% chance to reduce damage by 25%)\n    if (equipment.shield?.name === 'Elysian spirit shield') {\n      if (Math.random() < 0.25) {\n        return 0.75 // 25% damage reduction\n      }\n    }\n\n    // Divine spirit shield effect (30% damage reduction, drains prayer)\n    if (equipment.shield?.name === 'Divine spirit shield' && target.prayer.points > 0) {\n      return 0.7 // 30% damage reduction\n    }\n\n    return 1.0 // No reduction\n  }\n\n  /**\n   * Calculate melee max hit\n   */\n  private calculateMeleeMaxHit(attacker: StatsComponent, style: CombatStyle): number {\n    // Get effective strength level\n    const effectiveStrength = this.getEffectiveStrengthLevel(attacker, style)\n\n    // Get strength bonus from equipment\n    const strengthBonus = attacker.combatBonuses.meleeStrength\n\n    // RuneScape formula: 0.5 + effectiveStrength * (strengthBonus + 64) / 640\n    let maxHit = 0.5 + (effectiveStrength * (strengthBonus + 64)) / 640\n\n    // Apply prayer bonus\n    const prayerMultiplier = this.getMeleePrayerBonus(attacker)\n    maxHit *= prayerMultiplier\n\n    // Apply other bonuses (void knight, slayer helm, etc.)\n    const otherBonuses = this.getMeleeOtherBonuses(attacker)\n    maxHit *= otherBonuses\n\n    return Math.floor(maxHit)\n  }\n\n  /**\n   * Calculate ranged max hit\n   */\n  private calculateRangedMaxHit(attacker: StatsComponent, style: CombatStyle): number {\n    // Get effective ranged level\n    const effectiveRanged = this.getEffectiveRangedLevel(attacker, style)\n\n    // Get ranged strength bonus from equipment\n    const rangedStrength = attacker.combatBonuses.rangedStrength\n\n    // Similar formula to melee\n    let maxHit = 0.5 + (effectiveRanged * (rangedStrength + 64)) / 640\n\n    // Apply prayer bonus\n    const prayerMultiplier = this.getRangedPrayerBonus(attacker)\n    maxHit *= prayerMultiplier\n\n    // Apply other bonuses (void knight, ava's, etc.)\n    const otherBonuses = this.getRangedOtherBonuses(attacker)\n    maxHit *= otherBonuses\n\n    return Math.floor(maxHit)\n  }\n\n  /**\n   * Calculate magic max hit\n   */\n  private calculateMagicMaxHit(attacker: StatsComponent): number {\n    const magicLevel = attacker.magic.level\n    const magicDamage = attacker.combatBonuses.magicDamage\n\n    // Get spell damage from equipped spell\n    const baseSpellDamage = this.getEquippedSpellDamage(attacker)\n\n    // Apply magic damage bonus\n    let maxHit = baseSpellDamage * (1 + magicDamage / 100)\n\n    // Apply magic level bonus (small bonus for higher magic levels)\n    const levelBonus = 1 + (magicLevel - 1) / 200 // Up to 50% at 99 magic\n    maxHit *= levelBonus\n\n    // Apply prayer bonus\n    const prayerMultiplier = this.getMagicPrayerBonus(attacker)\n    maxHit *= prayerMultiplier\n\n    return Math.floor(maxHit)\n  }\n\n  /**\n   * Get base damage for equipped spell\n   */\n  private getEquippedSpellDamage(attacker: StatsComponent): number {\n    // Check equipped spell\n    const equippedSpell = (attacker as any).equippedSpell\n\n    if (!equippedSpell) {\n      // Default to wind strike if no spell equipped\n      return 2\n    }\n\n    // Spell damage by spell type\n    const spellDamages: Record<string, number> = {\n      // Strike spells\n      wind_strike: 2,\n      water_strike: 4,\n      earth_strike: 6,\n      fire_strike: 8,\n\n      // Bolt spells\n      wind_bolt: 9,\n      water_bolt: 10,\n      earth_bolt: 11,\n      fire_bolt: 12,\n\n      // Blast spells\n      wind_blast: 13,\n      water_blast: 14,\n      earth_blast: 15,\n      fire_blast: 16,\n\n      // Wave spells\n      wind_wave: 17,\n      water_wave: 18,\n      earth_wave: 19,\n      fire_wave: 20,\n\n      // Surge spells\n      wind_surge: 21,\n      water_surge: 22,\n      earth_surge: 23,\n      fire_surge: 24,\n\n      // Ancient spells\n      ice_rush: 16,\n      ice_burst: 22,\n      ice_blitz: 26,\n      ice_barrage: 30,\n\n      blood_rush: 15,\n      blood_burst: 21,\n      blood_blitz: 25,\n      blood_barrage: 29,\n    }\n\n    return spellDamages[equippedSpell] || 10\n  }\n\n  /**\n   * Get melee prayer bonus multiplier\n   */\n  private getMeleePrayerBonus(attacker: StatsComponent): number {\n    const prayers = (attacker as any).activePrayers || {}\n\n    // Strength prayers\n    if (prayers.piety) {\n      return 1.23\n    } // 23% strength bonus\n    if (prayers.chivalry) {\n      return 1.18\n    } // 18% strength bonus\n    if (prayers.ultimateStrength) {\n      return 1.15\n    } // 15% strength bonus\n    if (prayers.superhumanStrength) {\n      return 1.1\n    } // 10% strength bonus\n    if (prayers.burstOfStrength) {\n      return 1.05\n    } // 5% strength bonus\n\n    return 1.0\n  }\n\n  /**\n   * Get ranged prayer bonus multiplier\n   */\n  private getRangedPrayerBonus(attacker: StatsComponent): number {\n    const prayers = (attacker as any).activePrayers || {}\n\n    // Ranged prayers\n    if (prayers.rigour) {\n      return 1.23\n    } // 23% ranged strength\n    if (prayers.eagleEye) {\n      return 1.15\n    } // 15% ranged strength\n    if (prayers.hawkEye) {\n      return 1.1\n    } // 10% ranged strength\n    if (prayers.sharpEye) {\n      return 1.05\n    } // 5% ranged strength\n\n    return 1.0\n  }\n\n  /**\n   * Get magic prayer bonus multiplier\n   */\n  private getMagicPrayerBonus(attacker: StatsComponent): number {\n    const prayers = (attacker as any).activePrayers || {}\n\n    // Magic prayers\n    if (prayers.augury) {\n      return 1.25\n    } // 25% magic damage\n    if (prayers.mysticMight) {\n      return 1.15\n    } // 15% magic damage\n    if (prayers.mysticLore) {\n      return 1.1\n    } // 10% magic damage\n    if (prayers.mysticWill) {\n      return 1.05\n    } // 5% magic damage\n\n    return 1.0\n  }\n\n  /**\n   * Get other melee bonuses (void, slayer helm, etc.)\n   */\n  private getMeleeOtherBonuses(attacker: StatsComponent): number {\n    let multiplier = 1.0\n    const equipment = (attacker as any).equipment || {}\n    const effects = (attacker as any).effects || {}\n\n    // Void knight melee set\n    if (this.hasVoidMeleeSet(equipment)) {\n      multiplier *= 1.1 // 10% damage bonus\n    }\n\n    // Slayer helm on task\n    if (equipment.head?.name?.includes('Slayer helm') && effects.onSlayerTask) {\n      multiplier *= 1.1667 // 16.67% damage bonus\n    }\n\n    // Berserker necklace with obsidian weapons\n    if (equipment.amulet?.name === 'Berserker necklace' && equipment.weapon?.name?.includes('Obsidian')) {\n      multiplier *= 1.2 // 20% damage bonus\n    }\n\n    // Dragon hunter lance vs dragons\n    if (equipment.weapon?.name === 'Dragon hunter lance' && effects.targetIsDragon) {\n      multiplier *= 1.2 // 20% damage bonus\n    }\n\n    return multiplier\n  }\n\n  /**\n   * Get other ranged bonuses\n   */\n  private getRangedOtherBonuses(attacker: StatsComponent): number {\n    let multiplier = 1.0\n    const equipment = (attacker as any).equipment || {}\n    const effects = (attacker as any).effects || {}\n\n    // Void knight ranged set\n    if (this.hasVoidRangedSet(equipment)) {\n      multiplier *= 1.1 // 10% damage bonus\n    }\n\n    // Elite void ranged\n    if (this.hasEliteVoidRangedSet(equipment)) {\n      multiplier *= 1.125 // 12.5% damage bonus\n    }\n\n    // Slayer helm (i) on task\n    if (equipment.head?.name?.includes('Slayer helm') && effects.onSlayerTask) {\n      multiplier *= 1.15 // 15% damage bonus\n    }\n\n    // Twisted bow scaling (simplified)\n    if (equipment.weapon?.name === 'Twisted bow' && effects.targetMagicLevel) {\n      const magicLevel = effects.targetMagicLevel\n      const damageBoost = Math.min(2.5, 1 + magicLevel / 100)\n      multiplier *= damageBoost\n    }\n\n    return multiplier\n  }\n\n  /**\n   * Check if player has void melee set\n   */\n  private hasVoidMeleeSet(equipment: any): boolean {\n    return (\n      equipment.head?.name === 'Void melee helm' &&\n      equipment.body?.name === 'Void knight top' &&\n      equipment.legs?.name === 'Void knight robe' &&\n      equipment.gloves?.name === 'Void knight gloves'\n    )\n  }\n\n  /**\n   * Check if player has void ranged set\n   */\n  private hasVoidRangedSet(equipment: any): boolean {\n    return (\n      equipment.head?.name === 'Void ranger helm' &&\n      equipment.body?.name === 'Void knight top' &&\n      equipment.legs?.name === 'Void knight robe' &&\n      equipment.gloves?.name === 'Void knight gloves'\n    )\n  }\n\n  /**\n   * Check if player has elite void ranged set\n   */\n  private hasEliteVoidRangedSet(equipment: any): boolean {\n    return (\n      equipment.head?.name === 'Void ranger helm' &&\n      equipment.body?.name === 'Elite void top' &&\n      equipment.legs?.name === 'Elite void robe' &&\n      equipment.gloves?.name === 'Void knight gloves'\n    )\n  }\n\n  /**\n   * Get effective strength level with style bonuses\n   */\n  private getEffectiveStrengthLevel(attacker: StatsComponent, style: CombatStyle): number {\n    let styleBonus = 0\n\n    switch (style) {\n      case CombatStyle.AGGRESSIVE:\n        styleBonus = 3 // +3 strength levels\n        break\n      case CombatStyle.CONTROLLED:\n        styleBonus = 1 // +1 to all\n        break\n    }\n\n    // Effective level = level + style bonus + 8\n    return attacker.strength.level + styleBonus + 8\n  }\n\n  /**\n   * Get effective ranged level with style bonuses\n   */\n  private getEffectiveRangedLevel(attacker: StatsComponent, _style: CombatStyle): number {\n    const styleBonus = 0\n\n    // Ranged styles don't typically give strength bonus\n    // But rapid gives attack speed bonus (handled elsewhere)\n\n    // Effective level = level + style bonus + 8\n    return attacker.ranged.level + styleBonus + 8\n  }\n}\n", "import type { World } from '../../../types'\nimport { AttackType, RPGEntity, CombatStyle, InventoryComponent, EquipmentSlot, WeaponType } from '../../types/index'\n\ninterface AnimationTask {\n  id: string\n  entityId: string\n  targetId?: string\n  animationName: string\n  duration: number\n  attackType: AttackType\n  style: CombatStyle\n  damage?: number\n  startTime: number\n  progress: number\n  cancelled?: boolean\n}\n\nexport class CombatAnimationManager {\n  private world: World\n  private activeAnimations: Map<string, AnimationTask> = new Map()\n  private animationQueue: AnimationTask[] = []\n\n  // Animation definitions\n  private readonly animations = {\n    // Melee animations\n    melee_slash: { duration: 600, file: 'slash.glb' },\n    melee_stab: { duration: 600, file: 'stab.glb' },\n    melee_crush: { duration: 600, file: 'crush.glb' },\n\n    // Unarmed combat\n    punch: { duration: 400, file: 'punch.glb' },\n\n    // Weapon-specific melee animations\n    stab: { duration: 600, file: 'stab.glb' },\n    stab_aggressive: { duration: 500, file: 'stab_aggressive.glb' },\n    slash: { duration: 600, file: 'slash.glb' },\n    slash_aggressive: { duration: 500, file: 'slash_aggressive.glb' },\n    slash_defensive: { duration: 700, file: 'slash_defensive.glb' },\n    crush: { duration: 700, file: 'crush.glb' },\n    crush_aggressive: { duration: 600, file: 'crush_aggressive.glb' },\n    stab_controlled: { duration: 650, file: 'stab_controlled.glb' },\n    stab_2h: { duration: 800, file: 'stab_2h.glb' },\n\n    // Ranged animations\n    ranged_bow: { duration: 900, file: 'bow_shoot.glb' },\n    ranged_crossbow: { duration: 700, file: 'crossbow_shoot.glb' },\n    ranged_thrown: { duration: 600, file: 'throw.glb' },\n    bow_shoot: { duration: 900, file: 'bow_shoot.glb' },\n    crossbow_shoot: { duration: 700, file: 'crossbow_shoot.glb' },\n\n    // Magic animations\n    magic_cast: { duration: 1200, file: 'magic_cast.glb' },\n    magic_strike: { duration: 600, file: 'magic_strike.glb' },\n    cast_standard: { duration: 1200, file: 'cast_standard.glb' },\n    cast_defensive: { duration: 1400, file: 'cast_defensive.glb' },\n\n    // Defense animations\n    block: { duration: 400, file: 'block.glb' },\n    dodge: { duration: 500, file: 'dodge.glb' },\n\n    // Death animation\n    death: { duration: 2000, file: 'death.glb' },\n\n    // Hit reactions\n    hit_reaction: { duration: 300, file: 'hit_reaction.glb' },\n\n    // Idle state\n    idle: { duration: 0, file: 'idle.glb' },\n  }\n\n  constructor(world: World) {\n    this.world = world\n  }\n\n  /**\n   * Update animation states\n   */\n  update(_delta: number): void {\n    const now = Date.now()\n    const toRemove: string[] = []\n\n    // Check for completed animations\n    for (const [entityId, task] of Array.from(this.activeAnimations)) {\n      if (now - task.startTime >= task.duration) {\n        toRemove.push(entityId)\n      }\n    }\n\n    // Remove completed animations\n    toRemove.forEach(id => {\n      const animation = this.activeAnimations.get(id)\n      if (animation) {\n        this.onAnimationComplete(id, animation)\n      }\n      this.activeAnimations.delete(id)\n    })\n  }\n\n  /**\n   * Play attack animation based on attack type\n   */\n  playAttackAnimation(attacker: RPGEntity, attackType: AttackType, style: CombatStyle = CombatStyle.ACCURATE): void {\n    // Use the determineAnimation method to get the correct animation\n    const animationName = this.determineAnimation(attacker, attackType, style)\n    this.playAnimation(attacker.id, animationName)\n  }\n\n  /**\n   * Play block/defense animation\n   */\n  playDefenseAnimation(defender: RPGEntity): void {\n    this.playAnimation(defender.id, 'block')\n  }\n\n  /**\n   * Play hit reaction animation\n   */\n  playHitReaction(entity: RPGEntity): void {\n    this.playAnimation(entity.id, 'hit_reaction')\n  }\n\n  /**\n   * Play death animation\n   */\n  playDeathAnimation(entity: RPGEntity): void {\n    this.playAnimation(entity.id, 'death')\n  }\n\n  /**\n   * Play a specific animation\n   */\n  private playAnimation(entityId: string, animationName: string): void {\n    const animation = this.animations[animationName as keyof typeof this.animations]\n    if (!animation) {\n      console.warn(`Unknown animation: ${animationName}`)\n      return\n    }\n\n    // Cancel current animation if playing\n    if (this.activeAnimations.has(entityId)) {\n      this.cancelAnimation(entityId)\n    }\n\n    // Create animation task\n    const task: AnimationTask = {\n      id: `anim_${Date.now()}_${Math.random()}`,\n      entityId,\n      targetId: undefined,\n      animationName,\n      duration: animation.duration,\n      attackType: AttackType.MELEE, // Default for legacy animations\n      style: CombatStyle.ACCURATE, // Default for legacy animations\n      damage: undefined,\n      startTime: Date.now(),\n      progress: 0,\n      cancelled: false,\n    }\n\n    this.activeAnimations.set(entityId, task)\n\n    // Broadcast animation to clients\n    this.broadcastAnimation(entityId, animationName)\n  }\n\n  /**\n   * Cancel animation\n   */\n  cancelAnimation(entityId: string): void {\n    const currentAnimation = this.activeAnimations.get(entityId)\n    if (!currentAnimation) {\n      return\n    }\n\n    // Cancel the animation\n    currentAnimation.cancelled = true\n\n    // Broadcast animation cancellation\n    const network = (this.world as any).network\n    if (network) {\n      network.broadcast('animation:cancelled', {\n        entityId,\n        animationId: currentAnimation.id,\n        timestamp: Date.now(),\n      })\n    }\n\n    // Clean up\n    this.activeAnimations.delete(entityId)\n  }\n\n  /**\n   * Handle animation completion\n   */\n  private onAnimationComplete(entityId: string, animation: AnimationTask): void {\n    // Handle animation completion\n    const entity = this.world.entities.get(entityId)\n    if (entity) {\n      // Reset entity animation state\n      const visual = entity.getComponent<any>('visual')\n      if (visual) {\n        visual.currentAnimation = 'idle'\n        visual.animationTime = 0\n      }\n    }\n\n    // Use actual network system\n    const network = (this.world as any).network\n    if (network) {\n      network.broadcast('animation:complete', {\n        entityId,\n        animationId: animation.id,\n        animationType: animation.animationName,\n        timestamp: Date.now(),\n      })\n    }\n\n    // Emit event through world\n    this.world.events.emit('animation:complete', {\n      entityId,\n      animation: animation.animationName,\n    })\n  }\n\n  /**\n   * Broadcast animation to all clients\n   */\n  private broadcastAnimation(entityId: string, animationName: string): void {\n    // Use actual network system\n    const network = (this.world as any).network\n    if (network) {\n      network.broadcast('animation:play', {\n        entityId,\n        animationName,\n        timestamp: Date.now(),\n      })\n    } else {\n      // Fallback to event system\n      this.world.events.emit('animation:play', {\n        entityId,\n        animationName,\n        timestamp: Date.now(),\n      })\n    }\n  }\n\n  /**\n   * Check if entity is playing an animation\n   */\n  isAnimating(entityId: string): boolean {\n    return this.activeAnimations.has(entityId)\n  }\n\n  /**\n   * Get current animation for entity\n   */\n  getCurrentAnimation(entityId: string): string | null {\n    const task = this.activeAnimations.get(entityId)\n    return task ? task.animationName : null\n  }\n\n  /**\n   * Determine specific animation based on attack type and weapon\n   */\n  private determineAnimation(entity: RPGEntity, attackType: AttackType, style: CombatStyle): string {\n    switch (attackType) {\n      case AttackType.MELEE:\n        // Determine specific melee style based on weapon\n        const weapon = this.getEquippedWeapon(entity)\n        if (weapon) {\n          const weaponType = weapon.equipment?.weaponType\n          switch (weaponType) {\n            case WeaponType.DAGGER:\n              return style === CombatStyle.AGGRESSIVE ? 'stab_aggressive' : 'stab'\n            case WeaponType.SWORD:\n            case WeaponType.SCIMITAR:\n              return style === CombatStyle.AGGRESSIVE\n                ? 'slash_aggressive'\n                : style === CombatStyle.DEFENSIVE\n                  ? 'slash_defensive'\n                  : 'slash'\n            case WeaponType.MACE:\n            case WeaponType.AXE:\n              return style === CombatStyle.AGGRESSIVE ? 'crush_aggressive' : 'crush'\n            case WeaponType.SPEAR:\n            case WeaponType.HALBERD:\n              return style === CombatStyle.CONTROLLED ? 'stab_controlled' : 'stab_2h'\n            default:\n              return 'punch'\n          }\n        }\n        return 'punch' // Unarmed\n\n      case AttackType.RANGED:\n        // Determine bow vs crossbow based on weapon\n        const rangedWeapon = this.getEquippedWeapon(entity)\n        if (rangedWeapon) {\n          const weaponType = rangedWeapon.equipment?.weaponType\n          if (weaponType === WeaponType.CROSSBOW) {\n            return 'crossbow_shoot'\n          }\n        }\n        return 'bow_shoot' // Default to bow\n\n      case AttackType.MAGIC:\n        return style === CombatStyle.DEFENSIVE ? 'cast_defensive' : 'cast_standard'\n\n      default:\n        return 'idle'\n    }\n  }\n\n  /**\n   * Get equipped weapon\n   */\n  private getEquippedWeapon(entity: RPGEntity): any {\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    if (!inventory) {\n      return null\n    }\n\n    return inventory.equipment[EquipmentSlot.WEAPON]\n  }\n\n  /**\n   * Queue animation for entity\n   */\n  queueAnimation(\n    entityId: string,\n    attackType: AttackType,\n    style: CombatStyle,\n    damage?: number,\n    targetId?: string\n  ): void {\n    const entity = this.world.entities.get(entityId)\n    const animationName = entity\n      ? this.determineAnimation(entity as RPGEntity, attackType, style)\n      : this.getDefaultAnimationName(attackType)\n    const duration = this.getAnimationDuration(animationName)\n\n    const task: AnimationTask = {\n      id: `anim_${Date.now()}_${Math.random()}`,\n      entityId,\n      targetId,\n      animationName,\n      duration,\n      attackType,\n      style,\n      damage,\n      startTime: Date.now(),\n      progress: 0,\n      cancelled: false,\n    }\n\n    this.animationQueue.push(task)\n  }\n\n  /**\n   * Get default animation name for attack type\n   */\n  private getDefaultAnimationName(attackType: AttackType): string {\n    switch (attackType) {\n      case AttackType.MELEE:\n        return 'melee_slash'\n      case AttackType.RANGED:\n        return 'ranged_bow'\n      case AttackType.MAGIC:\n        return 'magic_cast'\n      default:\n        return 'idle'\n    }\n  }\n\n  /**\n   * Get animation duration\n   */\n  private getAnimationDuration(animationName: string): number {\n    const animation = this.animations[animationName as keyof typeof this.animations]\n    return animation ? animation.duration : 600 // Default 600ms for unknown animations\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  CombatSession,\n  HitResult,\n  CombatComponent,\n  StatsComponent,\n  CombatStyle,\n  AttackType,\n  RPGEntity,\n  Vector3,\n  HitSplat,\n  Equipment,\n  EquipmentSlot,\n  WeaponType,\n  InventoryComponent,\n  MovementComponent,\n} from '../types/index'\nimport { HitCalculator } from './combat/HitCalculator'\nimport { DamageCalculator } from './combat/DamageCalculator'\nimport { CombatAnimationManager } from './combat/CombatAnimationManager'\n\nexport class CombatSystem extends System {\n  name = 'CombatSystem'\n  enabled = true\n\n  // Core components\n  private combatSessions: Map<string, CombatSession> = new Map()\n  private hitCalculator: HitCalculator\n  private damageCalculator: DamageCalculator\n  private combatAnimations: CombatAnimationManager\n\n  // Configuration\n  private readonly COMBAT_TICK_RATE = 600 // milliseconds\n  private readonly COMBAT_TIMEOUT = 10000 // 10 seconds\n  private readonly MAX_ATTACK_RANGE = 1 // tiles\n\n  private lastTickTime = 0\n\n  constructor(world: World) {\n    super(world)\n    this.hitCalculator = new HitCalculator()\n    this.damageCalculator = new DamageCalculator()\n    this.combatAnimations = new CombatAnimationManager(world)\n  }\n\n  /**\n   * Initialize the combat system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[CombatSystem] Initializing...')\n\n    // Listen for combat-related events\n    this.world.events.on('rpg:attack', (event: any) => {\n      this.handleAttackEvent(event)\n    })\n\n    this.world.events.on('rpg:stop_combat', (event: any) => {\n      this.endCombat(event.entityId)\n    })\n\n    this.world.events.on('rpg:special_attack', (event: any) => {\n      this.handleSpecialAttackEvent(event)\n    })\n\n    // Listen for entity death to clean up combat sessions\n    this.world.events.on('entity:death', (event: any) => {\n      this.handleEntityDeath(event.entityId)\n    })\n\n    // Listen for entity destruction to clean up combat sessions\n    this.world.events.on('entity:destroyed', (event: any) => {\n      this.handleEntityDeath(event.entityId)\n    })\n  }\n\n  /**\n   * Fixed update for combat ticks\n   */\n  override fixedUpdate(_delta: number): void {\n    const now = Date.now()\n\n    // Process combat ticks at fixed intervals\n    if (now - this.lastTickTime >= this.COMBAT_TICK_RATE) {\n      this.processCombatTick()\n      this.lastTickTime = now\n    }\n  }\n\n  /**\n   * Main update for visual effects\n   */\n  override update(_delta: number): void {\n    // Update hit splats\n    this.updateHitSplats(_delta)\n\n    // Update combat animations\n    this.combatAnimations.update(_delta)\n\n    // Check combat timeouts\n    this.checkCombatTimeouts()\n  }\n\n  /**\n   * Initiate an attack\n   */\n  initiateAttack(attackerId: string, targetId: string): boolean {\n    const attacker = this.getEntity(attackerId)\n    const target = this.getEntity(targetId)\n\n    if (!attacker || !target) {\n      return false\n    }\n\n    if (!this.canAttack(attacker, target)) {\n      return false\n    }\n\n    // Get or create combat session\n    let session = this.combatSessions.get(attackerId)\n    if (!session) {\n      session = this.createCombatSession(attackerId, targetId)\n      this.combatSessions.set(attackerId, session)\n    }\n\n    // Update combat components\n    const attackerCombat = attacker.getComponent('combat') as any\n    if (attackerCombat) {\n      attackerCombat.inCombat = true\n      attackerCombat.target = targetId\n    }\n\n    // Set target to retaliate if auto-retaliate is on\n    const targetCombat = target.getComponent('combat') as any\n    if (targetCombat && targetCombat.autoRetaliate && !targetCombat.inCombat) {\n      this.initiateAttack(targetId, attackerId)\n    }\n\n    // Emit combat start event\n    this.world.events.emit('combat:start', { session })\n\n    return true\n  }\n\n  /**\n   * Process combat tick for all active sessions\n   */\n  private processCombatTick(): void {\n    const now = Date.now()\n\n    for (const [entityId, session] of Array.from(this.combatSessions)) {\n      const attacker = this.getEntity(session.attackerId)\n      const target = this.getEntity(session.targetId)\n\n      if (!attacker || !target) {\n        this.endCombat(entityId)\n        continue\n      }\n\n      const combat = attacker.getComponent('combat') as any\n      if (!combat || !combat.inCombat) {\n        continue\n      }\n\n      // Check if it's time to attack\n      if (now - combat.lastAttackTime >= this.getAttackSpeed(attacker, combat)) {\n        this.performAttack(attacker, target, session)\n        combat.lastAttackTime = now\n      }\n    }\n  }\n\n  /**\n   * Perform an attack\n   */\n  private performAttack(attacker: RPGEntity, target: RPGEntity, session: CombatSession): void {\n    const hit = this.calculateHit(attacker, target)\n\n    // Add to session history\n    session.hits.push(hit)\n    session.lastAttackTime = Date.now()\n\n    // Apply damage if hit\n    if (hit.damage > 0) {\n      this.applyDamage(target, hit.damage, attacker)\n    }\n\n    // Queue hit splat\n    this.queueHitSplat(target, hit)\n\n    // Play attack animation\n    this.combatAnimations.playAttackAnimation(attacker, hit.attackType)\n\n    // Emit hit event\n    this.world.events.emit('combat:hit', { hit })\n  }\n\n  /**\n   * Calculate hit result\n   */\n  calculateHit(attacker: RPGEntity, target: RPGEntity): HitResult {\n    const attackerStats = attacker.getComponent('stats') as any\n    const targetStats = target.getComponent('stats') as any\n    const attackerCombat = attacker.getComponent('combat') as any\n\n    if (!attackerStats || !targetStats || !attackerCombat) {\n      return this.createMissResult(attacker.data.id, target.data.id)\n    }\n\n    // Determine attack type\n    const attackType = this.getAttackType(attacker)\n\n    // Calculate attack and defense rolls\n    const attackRoll = this.hitCalculator.calculateAttackRoll(attackerStats, attackerCombat.combatStyle, attackType)\n\n    const targetCombat = target.getComponent('combat') as any\n    const defenseRoll = this.hitCalculator.calculateDefenseRoll(targetStats, attackType, targetCombat || undefined)\n\n    // Calculate hit chance\n    const hitChance = this.hitCalculator.calculateHitChance(attackRoll, defenseRoll)\n    const hits = Math.random() < hitChance\n\n    if (!hits) {\n      return this.createMissResult(attacker.data.id, target.data.id, attackType)\n    }\n\n    // Calculate damage\n    const maxHit = this.damageCalculator.calculateMaxHit(attackerStats, attackerCombat.combatStyle, attackType)\n\n    const damage = this.damageCalculator.rollDamage(maxHit)\n\n    // Apply damage reductions\n    const finalDamage = this.damageCalculator.applyDamageReductions(damage, targetStats, attackType, attackerStats)\n\n    return {\n      damage: finalDamage,\n      type: 'normal',\n      attackType,\n      attackerId: attacker.data.id,\n      targetId: target.data.id,\n      timestamp: Date.now(),\n    }\n  }\n\n  /**\n   * Apply damage to target\n   */\n  applyDamage(target: RPGEntity, damage: number, source: RPGEntity): void {\n    const stats = target.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    // Apply damage\n    stats.hitpoints.current = Math.max(0, stats.hitpoints.current - damage)\n\n    // Check for death\n    if (stats.hitpoints.current <= 0) {\n      this.handleDeath(target, source)\n    }\n\n    // Emit damage event\n    this.world.events.emit('combat:damage', {\n      targetId: target.data.id,\n      damage,\n      sourceId: source.data.id,\n      remaining: stats.hitpoints.current,\n    })\n  }\n\n  /**\n   * Handle entity death from event system\n   */\n  private handleEntityDeath(entityId: string): void {\n    // End all combat involving this entity\n    this.endCombat(entityId)\n\n    // Remove entity from other combat sessions where it's the target\n    for (const [sessionId, session] of Array.from(this.combatSessions)) {\n      if (session.targetId === entityId) {\n        this.endCombat(sessionId)\n      }\n    }\n  }\n\n  /**\n   * Handle entity death (internal combat death)\n   */\n  private handleDeath(entity: RPGEntity, killer: RPGEntity): void {\n    // End all combat involving this entity\n    this.endCombat(entity.data.id)\n\n    // Remove entity from other combat sessions\n    for (const [sessionId, session] of Array.from(this.combatSessions)) {\n      if (session.targetId === entity.data.id) {\n        this.endCombat(sessionId)\n      }\n    }\n\n    // Emit death event\n    this.world.events.emit('entity:death', {\n      entityId: entity.data.id,\n      killerId: killer.data.id,\n    })\n  }\n\n  /**\n   * End combat for an entity\n   */\n  endCombat(entityId: string): void {\n    const session = this.combatSessions.get(entityId)\n    if (!session) {\n      return\n    }\n\n    // Update combat component\n    const entity = this.getEntity(entityId)\n    if (entity) {\n      const combat = entity.getComponent('combat') as any\n      if (combat) {\n        combat.inCombat = false\n        combat.target = null\n      }\n    }\n\n    // Remove session\n    this.combatSessions.delete(entityId)\n\n    // Emit end event\n    this.world.events.emit('combat:end', { session })\n  }\n\n  /**\n   * Check if attacker can attack target\n   */\n  private canAttack(attacker: RPGEntity | undefined, target: RPGEntity | undefined): boolean {\n    if (!attacker || !target) {\n      return false\n    }\n\n    // Check if entities are alive\n    const attackerStats = attacker.getComponent('stats') as any\n    const targetStats = target.getComponent('stats') as any\n\n    if (!attackerStats || !targetStats) {\n      return false\n    }\n\n    if (!attackerStats.hitpoints || !targetStats.hitpoints) {\n      return false\n    }\n\n    if (attackerStats.hitpoints.current <= 0 || targetStats.hitpoints.current <= 0) {\n      return false\n    }\n\n    // Check range\n    const distance = this.getDistance(attacker, target)\n    const attackRange = this.getAttackRange(attacker)\n\n    if (distance > attackRange) {\n      return false\n    }\n\n    // Check if in safe zone\n    if (this.isInSafeZone(attacker) || this.isInSafeZone(target)) {\n      this.world.events.emit('combat:denied', {\n        reason: 'safe_zone',\n        attackerId: attacker.data.id,\n        targetId: target.data.id,\n      })\n      return false\n    }\n\n    // Check if target is attackable in wilderness\n    if (this.isInWilderness(attacker) && this.isInWilderness(target)) {\n      const attackerWildLevel = this.getWildernessLevel(attacker)\n      const targetWildLevel = this.getWildernessLevel(target)\n      const combatLevelDiff = Math.abs(attackerStats.combatLevel - targetStats.combatLevel)\n\n      // Wilderness level restriction\n      const maxLevelDiff = Math.min(attackerWildLevel, targetWildLevel)\n      if (combatLevelDiff > maxLevelDiff) {\n        this.world.events.emit('combat:denied', {\n          reason: 'wilderness_level',\n          attackerId: attacker.data.id,\n          targetId: target.data.id,\n        })\n        return false\n      }\n    }\n\n    // Check multi-combat area\n    const inMulti = this.isInMultiCombat(attacker)\n    if (!inMulti) {\n      // Single combat - check if either is already in combat with someone else\n      const attackerSession = this.combatSessions.get(attacker.data.id)\n      const targetSession = this.getTargetSession(target.data.id)\n\n      if (attackerSession && attackerSession.targetId !== target.data.id) {\n        return false\n      }\n      if (targetSession && targetSession.attackerId !== attacker.data.id) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Check if entity is in a safe zone\n   */\n  private isInSafeZone(entity: RPGEntity): boolean {\n    const position = this.getEntityPosition(entity)\n    if (!position) {\n      return false\n    }\n\n    // Check configured safe zones\n    const safeZones = (this.world as any).safeZones || [\n      // Default safe zones\n      { type: 'rectangle', min: { x: -50, y: -10, z: -50 }, max: { x: 50, y: 50, z: 50 } }, // Spawn area\n      { type: 'circle', center: { x: 0, y: 0, z: 0 }, radius: 100 }, // Town center\n    ]\n\n    for (const zone of safeZones) {\n      if (this.isPositionInZone(position, zone)) {\n        return true\n      }\n    }\n\n    // Check entity-specific safe zone flag\n    const zoneComponent = entity.getComponent('zone')\n    if ((zoneComponent as any)?.isSafe) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Check if entity is in wilderness\n   */\n  private isInWilderness(entity: RPGEntity): boolean {\n    const position = this.getEntityPosition(entity)\n    if (!position) {\n      return false\n    }\n\n    // Wilderness starts at y > 3520 in OSRS coordinates\n    // Adjust for your world coordinates\n    const wildernessStart = (this.world as any).wildernessStart || { x: -1000, y: 0, z: 1000 }\n    return position.z > wildernessStart.z\n  }\n\n  /**\n   * Get wilderness level for entity\n   */\n  private getWildernessLevel(entity: RPGEntity): number {\n    const position = this.getEntityPosition(entity)\n    if (!position || !this.isInWilderness(entity)) {\n      return 0\n    }\n\n    const wildernessStart = (this.world as any).wildernessStart || { x: -1000, y: 0, z: 1000 }\n    const level = Math.floor((position.z - wildernessStart.z) / 8) + 1\n    return Math.min(Math.max(level, 1), 56) // Max wilderness level is 56\n  }\n\n  /**\n   * Check if position is in multi-combat area\n   */\n  private isInMultiCombat(entity: RPGEntity): boolean {\n    const position = this.getEntityPosition(entity)\n    if (!position) {\n      return false\n    }\n\n    // Check configured multi-combat zones\n    const multiZones = (this.world as any).multiCombatZones || [\n      // Default multi-combat zones\n      { type: 'rectangle', min: { x: 100, y: -10, z: 100 }, max: { x: 200, y: 50, z: 200 } }, // Boss area\n    ]\n\n    for (const zone of multiZones) {\n      if (this.isPositionInZone(position, zone)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Check if position is within a zone\n   */\n  private isPositionInZone(position: Vector3, zone: any): boolean {\n    if (zone.type === 'rectangle') {\n      return (\n        position.x >= zone.min.x &&\n        position.x <= zone.max.x &&\n        position.y >= zone.min.y &&\n        position.y <= zone.max.y &&\n        position.z >= zone.min.z &&\n        position.z <= zone.max.z\n      )\n    } else if (zone.type === 'circle') {\n      const distance = Math.sqrt(\n        Math.pow(position.x - zone.center.x, 2) +\n        Math.pow(position.y - zone.center.y, 2) +\n        Math.pow(position.z - zone.center.z, 2)\n      )\n      return distance <= zone.radius\n    }\n    return false\n  }\n\n  /**\n   * Get session where entity is the target\n   */\n  private getTargetSession(targetId: string): CombatSession | null {\n    for (const [_, session] of this.combatSessions) {\n      if (session.targetId === targetId) {\n        return session\n      }\n    }\n    return null\n  }\n\n  /**\n   * Create combat session\n   */\n  private createCombatSession(attackerId: string, targetId: string): CombatSession {\n    return {\n      id: `combat_${attackerId}_${Date.now()}`,\n      attackerId,\n      targetId,\n      startTime: Date.now(),\n      lastAttackTime: Date.now(),\n      combatTimer: this.COMBAT_TIMEOUT,\n      hits: [],\n    }\n  }\n\n  /**\n   * Create miss result\n   */\n  private createMissResult(attackerId: string, targetId: string, attackType: AttackType = AttackType.MELEE): HitResult {\n    return {\n      damage: 0,\n      type: 'miss',\n      attackType,\n      attackerId,\n      targetId,\n      timestamp: Date.now(),\n    }\n  }\n\n  /**\n   * Queue hit splat for display\n   */\n  private queueHitSplat(target: RPGEntity, hit: HitResult): void {\n    const combat = target.getComponent('combat') as any\n    const movement = target.getComponent('movement') as any // MovementComponent\n\n    if (!combat || !movement) {\n      return\n    }\n\n    const hitSplat: HitSplat = {\n      damage: hit.damage,\n      type: hit.type === 'miss' ? 'miss' : 'normal',\n      position: { ...movement.position },\n      timestamp: Date.now(),\n      duration: 1000,\n    }\n\n    combat.hitSplatQueue.push(hitSplat)\n  }\n\n  /**\n   * Update hit splats\n   */\n  private updateHitSplats(_delta: number): void {\n    const now = Date.now()\n\n    // Update all entities with combat components\n    for (const [_entityId, entity] of Array.from(this.world.entities.items)) {\n      const rpgEntity = this.asRPGEntity(entity)\n      if (!rpgEntity) {\n        continue\n      }\n\n      const combat = rpgEntity.getComponent('combat') as any\n\n      if (!combat) {\n        continue\n      }\n\n      // Remove expired hit splats\n      combat.hitSplatQueue = combat.hitSplatQueue.filter(splat => now - splat.timestamp < splat.duration)\n    }\n  }\n\n  /**\n   * Check for combat timeouts\n   */\n  private checkCombatTimeouts(): void {\n    const now = Date.now()\n    const toRemove: string[] = []\n\n    for (const [entityId, session] of Array.from(this.combatSessions)) {\n      if (now - session.lastAttackTime > this.COMBAT_TIMEOUT) {\n        toRemove.push(entityId)\n      }\n    }\n\n    toRemove.forEach(id => this.endCombat(id))\n  }\n\n  /**\n   * Get attack speed in milliseconds\n   */\n  private getAttackSpeed(entity: RPGEntity, combat: CombatComponent): number {\n    // Base attack speed (4 ticks = 2.4 seconds)\n    let speed = combat.attackSpeed * this.COMBAT_TICK_RATE\n\n    // Apply weapon speed modifiers\n    const weapon = this.getEquippedWeapon(entity)\n    if (weapon?.equipment?.attackSpeed) {\n      speed = weapon.equipment.attackSpeed * this.COMBAT_TICK_RATE\n    }\n\n    // Apply combat style modifiers\n    if (combat.combatStyle === CombatStyle.RAPID) {\n      // Rapid style reduces attack interval by 1 tick\n      speed = Math.max(this.COMBAT_TICK_RATE, speed - this.COMBAT_TICK_RATE)\n    }\n\n    // Apply haste effects (e.g., from prayers or potions)\n    const effects = entity.getComponent('effects')\n    if ((effects as any)?.haste) {\n      speed *= 0.9 // 10% faster attacks\n    }\n\n    return speed\n  }\n\n  /**\n   * Get attack type based on equipment\n   */\n  private getAttackType(entity: RPGEntity): AttackType {\n    const weapon = this.getEquippedWeapon(entity)\n\n    if (!weapon) {\n      // Unarmed is melee\n      return AttackType.MELEE\n    }\n\n    // Check weapon type\n    const weaponType = weapon.equipment?.weaponType\n    switch (weaponType) {\n      case WeaponType.BOW:\n      case WeaponType.CROSSBOW:\n        return AttackType.RANGED\n      case WeaponType.STAFF:\n      case WeaponType.WAND:\n        return AttackType.MAGIC\n      default:\n        return AttackType.MELEE\n    }\n  }\n\n  /**\n   * Get attack range based on weapon\n   */\n  private getAttackRange(entity: RPGEntity): number {\n    const weapon = this.getEquippedWeapon(entity)\n\n    if (!weapon) {\n      // Unarmed melee range\n      return this.MAX_ATTACK_RANGE\n    }\n\n    // Get weapon-specific range\n    const weaponType = weapon.equipment?.weaponType\n    switch (weaponType) {\n      case WeaponType.HALBERD:\n        return 2 // Halberds can attack 2 tiles away\n      case WeaponType.BOW:\n        return 7 // Shortbow range\n      case WeaponType.CROSSBOW:\n        return 8 // Crossbow range\n      case WeaponType.STAFF:\n      case WeaponType.WAND:\n        return 10 // Magic range\n      default:\n        return this.MAX_ATTACK_RANGE // Standard melee\n    }\n  }\n\n  /**\n   * Get equipped weapon\n   */\n  private getEquippedWeapon(entity: RPGEntity): Equipment | null {\n    const inventory = entity.getComponent('inventory') as any\n    if (!inventory) {\n      return null\n    }\n\n    return inventory.equipment[EquipmentSlot.WEAPON]\n  }\n\n  /**\n   * Calculate distance between entities\n   */\n  private getDistance(entity1: RPGEntity, entity2: RPGEntity): number {\n    const pos1 = this.getEntityPosition(entity1)\n    const pos2 = this.getEntityPosition(entity2)\n\n    if (!pos1 || !pos2) {\n      return Infinity\n    }\n\n    // Use grid-based distance for tile-based combat\n    const dx = Math.abs(pos1.x - pos2.x)\n    const dy = Math.abs(pos1.y - pos2.y)\n    const dz = Math.abs(pos1.z - pos2.z)\n\n    // Chebyshev distance (king's move in chess) for tile-based games\n    return Math.max(dx, dy, dz)\n  }\n\n  /**\n   * Get entity position from movement component\n   */\n  private getEntityPosition(entity: RPGEntity): Vector3 | null {\n    // Try movement component first\n    const movement = entity.getComponent('movement') as any\n    if (movement?.position) {\n      return movement.position\n    }\n\n    // Fall back to entity position\n    if (entity.position) {\n      return entity.position\n    }\n\n    // Try data position\n    if (entity.data?.position) {\n      if (Array.isArray(entity.data.position)) {\n        return {\n          x: entity.data.position[0] || 0,\n          y: entity.data.position[1] || 0,\n          z: entity.data.position[2] || 0,\n        }\n      }\n      return entity.data.position\n    }\n\n    return null\n  }\n\n  /**\n   * Get entity from world and cast to RPGEntity\n   */\n  private getEntity(entityId: string): RPGEntity | undefined {\n    // Check items map first\n    let entity = this.world.entities.items?.get(entityId)\n\n    // If not found, check players map (for tests)\n    if (!entity && this.world.entities.players) {\n      entity = this.world.entities.players.get(entityId)\n    }\n\n    if (!entity) {\n      return undefined\n    }\n\n    // For now, assume all entities are RPGEntities\n    // In a real implementation, we'd check if it has the required methods\n    return this.asRPGEntity(entity)\n  }\n\n  /**\n   * Safely cast entity to RPGEntity\n   */\n  private asRPGEntity(entity: any): RPGEntity | undefined {\n    // Check if entity has required RPGEntity methods\n    if (entity && typeof entity.getComponent === 'function') {\n      return entity as RPGEntity\n    }\n    return undefined\n  }\n\n  /**\n   * Check if entity is in combat\n   */\n  isInCombat(entityId: string): boolean {\n    return this.combatSessions.has(entityId)\n  }\n\n  /**\n   * Get combat session for entity\n   */\n  getCombatSession(entityId: string): CombatSession | null {\n    return this.combatSessions.get(entityId) || null\n  }\n\n  /**\n   * Force end combat (admin command)\n   */\n  forceEndCombat(entityId: string): void {\n    this.endCombat(entityId)\n  }\n\n  /**\n   * Get or create combat component for entity\n   */\n  getOrCreateCombatComponent(entityId: string): CombatComponent {\n    const entity = this.getEntity(entityId)\n    if (!entity) {\n      throw new Error(`Entity not found: ${entityId}`)\n    }\n\n    let combat = entity.getComponent('combat')\n    if (!combat) {\n      // Create default combat component\n      const defaultCombat: CombatComponent = {\n        type: 'combat',\n        entity: entity,\n        data: {},\n        entityId,\n        inCombat: false,\n        target: null,\n        lastAttackTime: 0,\n        attackSpeed: 4,\n        combatStyle: CombatStyle.ACCURATE,\n        autoRetaliate: true,\n        hitSplatQueue: [],\n        animationQueue: [],\n        specialAttackEnergy: 100,\n        specialAttackActive: false,\n        protectionPrayers: {\n          melee: false,\n          ranged: false,\n          magic: false,\n        },\n      }\n\n      // Add component to entity\n      const addedComponent = (entity as any).addComponent('combat', defaultCombat)\n      combat = addedComponent\n    }\n\n    return combat as any\n  }\n\n  /**\n   * Calculate maximum hit damage\n   */\n  calculateMaxHit(stats: StatsComponent, attackType: string, style: string): number {\n    return this.damageCalculator.calculateMaxHit(\n      stats,\n      style as CombatStyle,\n      attackType as AttackType\n    )\n  }\n\n  /**\n   * Calculate effective level with bonuses\n   */\n  calculateEffectiveLevel(baseLevel: number, prayerBonus: number, potionBonus: number, style: string): number {\n    let styleBonus = 0\n\n    switch (style) {\n      case 'accurate':\n      case 'aggressive':\n      case 'defensive':\n        styleBonus = 3\n        break\n      case 'controlled':\n        styleBonus = 1\n        break\n    }\n\n    return baseLevel + prayerBonus + potionBonus + styleBonus\n  }\n\n  /**\n   * Grant combat XP based on damage and attack type\n   */\n  grantCombatXP(entityId: string, damage: number, attackType: string): void {\n    const baseXp = damage * 4\n    const hpXp = damage * 1.33\n    const defenseXp = damage * 1.33\n\n    switch (attackType) {\n      case 'melee':\n        // Melee grants attack, strength, and HP XP\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'attack',\n          amount: baseXp,\n          source: 'combat',\n        })\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'strength',\n          amount: baseXp,\n          source: 'combat',\n        })\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'hitpoints',\n          amount: hpXp,\n          source: 'combat',\n        })\n        break\n\n      case 'ranged':\n        // Ranged grants ranged, defense, and HP XP\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'ranged',\n          amount: baseXp,\n          source: 'combat',\n        })\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'defence',\n          amount: defenseXp,\n          source: 'combat',\n        })\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'hitpoints',\n          amount: hpXp,\n          source: 'combat',\n        })\n        break\n\n      case 'magic':\n        // Magic grants magic and HP XP\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'magic',\n          amount: damage * 2,\n          source: 'combat',\n        })\n        this.world.events.emit('rpg:xp_gain', {\n          playerId: entityId,\n          skill: 'hitpoints',\n          amount: hpXp,\n          source: 'combat',\n        })\n        break\n    }\n  }\n\n  /**\n   * Handle entity death with proper event emission\n   */\n  handleEntityDeathWithKiller(deadEntityId: string, killerId: string): void {\n    this.world.events.emit('rpg:entity_death', {\n      deadEntityId,\n      killerId,\n      timestamp: Date.now(),\n    })\n\n    // Also handle cleanup\n    this.handleEntityDeath(deadEntityId)\n  }\n\n  /**\n   * Regenerate special attack energy\n   */\n  regenerateSpecialAttack(): void {\n    // For testing, always regenerate 10% special attack\n    const allMaps = [this.world.entities.items, this.world.entities.players].filter(Boolean)\n\n    for (const entityMap of allMaps) {\n      for (const [entityId] of entityMap) {\n        const entity = this.getEntity(entityId)\n        if (!entity) continue\n\n        const combat = entity.getComponent('combat') as any\n        if (!combat) continue\n\n        if (combat.specialAttackEnergy < 100) {\n          combat.specialAttackEnergy = Math.min(100, combat.specialAttackEnergy + 10)\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle attack event\n   */\n  private handleAttackEvent(event: any): void {\n    const { attackerId, targetId } = event\n    this.initiateAttack(attackerId, targetId)\n  }\n\n  /**\n   * Handle special attack event\n   */\n  private handleSpecialAttackEvent(event: any): void {\n    const { attackerId, targetId } = event\n    this.performSpecialAttack(attackerId, targetId)\n  }\n\n  /**\n   * Perform special attack\n   */\n  private performSpecialAttack(attackerId: string, targetId: string): void {\n    const attacker = this.getEntity(attackerId)\n    const target = this.getEntity(targetId)\n\n    if (!attacker || !target) {\n      return\n    }\n\n    const combat = attacker.getComponent('combat') as any\n    if (!combat || combat.specialAttackEnergy < 25) {\n      return // Not enough special attack energy\n    }\n\n    // Drain special attack energy\n    combat.specialAttackEnergy -= 25\n\n    // Perform enhanced attack\n    const hit = this.calculateSpecialHit(attacker, target)\n\n    // Apply damage if hit\n    if (hit.damage > 0) {\n      this.applyDamage(target, hit.damage, attacker)\n    }\n\n    // Queue hit splat\n    this.queueHitSplat(target, hit)\n\n    // Play special attack animation\n    this.combatAnimations.playAttackAnimation(attacker, hit.attackType)\n\n    // Emit special hit event\n    this.world.events.emit('combat:special_hit', { hit })\n  }\n\n  /**\n   * Calculate special attack hit\n   */\n  private calculateSpecialHit(attacker: RPGEntity, target: RPGEntity): HitResult {\n    // Enhanced hit calculation for special attacks\n    const hit = this.calculateHit(attacker, target)\n\n    // Special attacks typically have higher accuracy and damage\n    hit.damage = Math.floor(hit.damage * 1.2) // 20% damage boost\n    hit.type = 'critical'\n\n    return hit\n  }\n}\n", "import type { Equipment, StatsComponent, CombatBonuses, ItemDefinition } from '../../types'\nimport { EquipmentSlot } from '../../types'\nimport { ItemRegistry } from './ItemRegistry'\n\n// Add any missing enum values locally\nconst EquipmentSlotLocal = {\n  ...EquipmentSlot,\n  BOOTS: 'boots' as any,\n  HEAD: 'head' as any,\n  CAPE: 'cape' as any,\n  AMULET: 'amulet' as any,\n  WEAPON: 'weapon' as any,\n  BODY: 'body' as any,\n  SHIELD: 'shield' as any,\n  LEGS: 'legs' as any,\n  GLOVES: 'gloves' as any,\n  RING: 'ring' as any,\n  AMMO: 'ammo' as any,\n}\n\nexport class EquipmentBonusCalculator {\n  constructor(private itemRegistry: ItemRegistry) {}\n\n  /**\n   * Calculate total bonuses from all equipped items\n   */\n  calculateTotalBonuses(equipment: { [K in EquipmentSlot]: Equipment | null }): CombatBonuses {\n    const totalBonuses = this.createEmptyBonuses()\n\n    for (const slot in equipment) {\n      const item = equipment[slot as EquipmentSlot]\n      if (item && item.equipment && item.equipment.bonuses) {\n        const bonuses = item.equipment.bonuses\n\n        // Add each bonus\n        totalBonuses.attackStab += bonuses.attackStab\n        totalBonuses.attackSlash += bonuses.attackSlash\n        totalBonuses.attackCrush += bonuses.attackCrush\n        totalBonuses.attackMagic += bonuses.attackMagic\n        totalBonuses.attackRanged += bonuses.attackRanged\n\n        totalBonuses.defenseStab += bonuses.defenseStab\n        totalBonuses.defenseSlash += bonuses.defenseSlash\n        totalBonuses.defenseCrush += bonuses.defenseCrush\n        totalBonuses.defenseMagic += bonuses.defenseMagic\n        totalBonuses.defenseRanged += bonuses.defenseRanged\n\n        totalBonuses.meleeStrength += bonuses.meleeStrength\n        totalBonuses.rangedStrength += bonuses.rangedStrength\n        totalBonuses.magicDamage += bonuses.magicDamage\n        totalBonuses.prayerBonus += bonuses.prayerBonus\n      }\n    }\n\n    return totalBonuses\n  }\n\n  /**\n   * Check if player meets requirements to equip an item\n   */\n  meetsRequirements(item: ItemDefinition | Equipment, stats: StatsComponent): boolean {\n    // Non-equipable items have no requirements\n    if (!item.equipable || !item.equipment) {\n      return true\n    }\n\n    const requirements = item.equipment.requirements\n    if (!requirements || Object.keys(requirements).length === 0) {\n      return true\n    }\n\n    // Check each skill requirement\n    for (const skill in requirements) {\n      const required = requirements[skill]\n      if (!required) {\n        continue\n      } // Skip if no requirement for this skill\n\n      const playerSkill = stats[skill as keyof StatsComponent]\n\n      if (!playerSkill || typeof playerSkill !== 'object' || !('level' in playerSkill)) {\n        return false\n      }\n\n      if (playerSkill.level < required.level) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Calculate total weight of equipped items\n   */\n  getEquipmentWeight(equipment: { [K in EquipmentSlot]: Equipment | null }): number {\n    let totalWeight = 0\n\n    for (const slot in equipment) {\n      const item = equipment[slot as EquipmentSlot]\n      if (item) {\n        totalWeight += item.weight\n      }\n    }\n\n    return totalWeight\n  }\n\n  /**\n   * Create an empty bonuses object with all values set to 0\n   */\n  createEmptyBonuses(): CombatBonuses {\n    return {\n      attackStab: 0,\n      attackSlash: 0,\n      attackCrush: 0,\n      attackMagic: 0,\n      attackRanged: 0,\n      defenseStab: 0,\n      defenseSlash: 0,\n      defenseCrush: 0,\n      defenseMagic: 0,\n      defenseRanged: 0,\n      meleeStrength: 0,\n      rangedStrength: 0,\n      magicDamage: 0,\n      prayerBonus: 0,\n    }\n  }\n\n  /**\n   * Get equipment set bonuses (e.g., Barrows sets)\n   */\n  getSetBonuses(equipment: Record<EquipmentSlot, Equipment | null>): CombatBonuses {\n    // Initialize empty bonuses\n    const setBonuses: CombatBonuses = {\n      attackStab: 0,\n      attackSlash: 0,\n      attackCrush: 0,\n      attackMagic: 0,\n      attackRanged: 0,\n      defenseStab: 0,\n      defenseSlash: 0,\n      defenseCrush: 0,\n      defenseMagic: 0,\n      defenseRanged: 0,\n      meleeStrength: 0,\n      rangedStrength: 0,\n      magicDamage: 0,\n      prayerBonus: 0,\n    }\n\n    // Check for complete sets\n    const equippedItems = Object.values(equipment).filter(item => item !== null) as Equipment[]\n\n    // Example: Dharok's set\n    if (this.hasCompleteSet(equippedItems, 'dharok')) {\n      // Dharok's set effect is handled separately in combat\n      // No direct stat bonuses\n    }\n\n    // Example: Void knight set\n    if (this.hasVoidSet(equippedItems)) {\n      // Void provides accuracy and damage bonuses\n      // These are percentage-based and handled in combat calculations\n    }\n\n    return setBonuses\n  }\n\n  /**\n   * Check if player has a complete armor set\n   */\n  private hasCompleteSet(items: Equipment[], setName: string): boolean {\n    const setItems = items.filter(item => item.name.toLowerCase().includes(setName))\n\n    // Most sets require 4 pieces (helm, body, legs, weapon/shield)\n    return setItems.length >= 4\n  }\n\n  /**\n   * Check for void knight set\n   */\n  private hasVoidSet(items: Equipment[]): boolean {\n    const voidItems = items.filter(item => item.name.toLowerCase().includes('void'))\n\n    // Void requires: top, bottom, gloves, and helm\n    const hasTop = voidItems.some(item => item.name.includes('top'))\n    const hasBottom = voidItems.some(item => item.name.includes('robe'))\n    const hasGloves = voidItems.some(item => item.name.includes('gloves'))\n    const hasHelm = voidItems.some(item => item.name.includes('helm') || item.name.includes('hood'))\n\n    return hasTop && hasBottom && hasGloves && hasHelm\n  }\n\n  /**\n   * Calculate weight reduction from equipment\n   */\n  calculateWeightReduction(equipment: Record<EquipmentSlot, Equipment | null>): number {\n    let reduction = 0\n\n    // Graceful outfit pieces\n    const gracefulPieces = Object.values(equipment).filter(\n      item => item && item.name.toLowerCase().includes('graceful')\n    ).length\n\n    // Each graceful piece reduces weight by 3kg, full set gives extra 3kg\n    reduction += gracefulPieces * 3\n    if (gracefulPieces >= 6) {\n      reduction += 3 // Full set bonus\n    }\n\n    // Spotted/spottier cape\n    const cape = equipment[EquipmentSlot.CAPE]\n    if (cape) {\n      if (cape.name.toLowerCase().includes('spottier')) {\n        reduction += 5\n      } else if (cape.name.toLowerCase().includes('spotted')) {\n        reduction += 3\n      }\n    }\n\n    // Boots of lightness\n    const boots = equipment[EquipmentSlot.BOOTS]\n    if (boots && boots.name.toLowerCase().includes('lightness')) {\n      reduction += 4\n    }\n\n    return reduction\n  }\n\n  /**\n   * Get prayer drain reduction from equipment\n   */\n  getPrayerDrainReduction(equipment: Record<EquipmentSlot, Equipment | null>): number {\n    let reduction = 0\n\n    // Check for prayer bonus items\n    for (const slot in equipment) {\n      const item = equipment[slot as EquipmentSlot]\n      if (item && item.equipment?.bonuses?.prayerBonus) {\n        // Each prayer bonus point reduces drain by 3.33%\n        reduction += (item.equipment.bonuses.prayerBonus * 3.33) / 100\n      }\n    }\n\n    return Math.min(reduction, 0.5) // Cap at 50% reduction\n  }\n}\n", "import type { ItemDefinition, EquipmentSlot } from '../../types'\nimport { WeaponType } from '../../types'\n\nexport class ItemRegistry {\n  private items: Map<number, ItemDefinition> = new Map()\n  private nameIndex: Map<string, ItemDefinition> = new Map()\n\n  /**\n   * Register an item definition\n   */\n  register(item: ItemDefinition): void {\n    this.items.set(item.id, item)\n    this.nameIndex.set(item.name, item)\n  }\n\n  /**\n   * Get item by ID\n   */\n  get(itemId: number): ItemDefinition | null {\n    return this.items.get(itemId) || null\n  }\n\n  /**\n   * Get item by exact name\n   */\n  getByName(name: string): ItemDefinition | null {\n    return this.nameIndex.get(name) || null\n  }\n\n  /**\n   * Check if item is stackable\n   */\n  isStackable(itemId: number): boolean {\n    const item = this.get(itemId)\n    return item ? item.stackable : false\n  }\n\n  /**\n   * Check if item is equipable\n   */\n  isEquipable(itemId: number): boolean {\n    const item = this.get(itemId)\n    return item ? item.equipable : false\n  }\n\n  /**\n   * Check if item is tradeable\n   */\n  isTradeable(itemId: number): boolean {\n    const item = this.get(itemId)\n    return item ? item.tradeable : false\n  }\n\n  /**\n   * Check if item can be noted\n   */\n  isNoteable(itemId: number): boolean {\n    const item = this.get(itemId)\n    return item ? item.noteable === true && !item.noted : false\n  }\n\n  /**\n   * Check if item is noted\n   */\n  isNoted(itemId: number): boolean {\n    const item = this.get(itemId)\n    return item ? item.noted === true : false\n  }\n\n  /**\n   * Get unnoted version ID\n   */\n  getUnnoted(itemId: number): number | null {\n    const item = this.get(itemId)\n    return item && item.noted && item.notedId ? item.notedId : null\n  }\n\n  /**\n   * Get noted version ID\n   */\n  getNoted(itemId: number): number | null {\n    const item = this.get(itemId)\n    return item && item.noteable && item.notedId ? item.notedId : null\n  }\n\n  /**\n   * Check if item is members only\n   */\n  isMembers(itemId: number): boolean {\n    const item = this.get(itemId)\n    return item ? item.members : false\n  }\n\n  /**\n   * Get all registered items\n   */\n  getAll(): ItemDefinition[] {\n    return Array.from(this.items.values())\n  }\n\n  /**\n   * Get items by category (equipment slot)\n   */\n  getByCategory(category: string): ItemDefinition[] {\n    const results: ItemDefinition[] = []\n\n    for (const item of this.items.values()) {\n      if (item.equipment) {\n        const slot = item.equipment.slot.toLowerCase()\n        if (slot === category.toLowerCase()) {\n          results.push(item)\n        }\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * Search items by name (case insensitive partial match)\n   */\n  search(query: string): ItemDefinition[] {\n    const lowerQuery = query.toLowerCase()\n    const results: ItemDefinition[] = []\n\n    for (const item of this.items.values()) {\n      if (item.name.toLowerCase().includes(lowerQuery)) {\n        results.push(item)\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * Clear all items\n   */\n  clear(): void {\n    this.items.clear()\n    this.nameIndex.clear()\n  }\n\n  /**\n   * Get number of registered items\n   */\n  size(): number {\n    return this.items.size\n  }\n\n  /**\n   * Load default items (called by InventorySystem)\n   */\n  loadDefaults(): void {\n    // Bronze tier weapons\n    this.register({\n      id: 1,\n      name: 'Bronze Sword',\n      examine: 'A bronze sword.',\n      value: 15,\n      weight: 2.2,\n      stackable: false,\n      equipable: true,\n      tradeable: true,\n      members: false,\n      equipment: {\n        slot: 'weapon' as EquipmentSlot,\n        requirements: { attack: { level: 1, xp: 0 } },\n        bonuses: {\n          attackStab: 4,\n          attackSlash: 5,\n          attackCrush: -2,\n          attackMagic: 0,\n          attackRanged: 0,\n          defenseStab: 0,\n          defenseSlash: 1,\n          defenseCrush: 0,\n          defenseMagic: 0,\n          defenseRanged: 0,\n          meleeStrength: 4,\n          rangedStrength: 0,\n          magicDamage: 0,\n          prayerBonus: 0,\n        },\n        weaponType: WeaponType.SWORD,\n        attackSpeed: 4,\n      },\n      model: 'bronze_sword',\n      icon: 'bronze_sword_icon',\n    })\n\n    // Currency\n    this.register({\n      id: 995,\n      name: 'Coins',\n      examine: 'Lovely money!',\n      value: 1,\n      weight: 0,\n      stackable: true,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'coins',\n      icon: 'coins_icon',\n    })\n\n    // Raw cooking ingredients\n    this.register({\n      id: 317,\n      name: 'Raw Shrimp',\n      examine: 'Raw shrimp, needs cooking.',\n      value: 1,\n      weight: 0.1,\n      stackable: true,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_shrimp',\n      icon: 'raw_shrimp_icon',\n    })\n\n    this.register({\n      id: 327,\n      name: 'Raw Sardine',\n      examine: 'Raw sardine, needs cooking.',\n      value: 2,\n      weight: 0.1,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_sardine',\n      icon: 'raw_sardine_icon',\n    })\n\n    this.register({\n      id: 335,\n      name: 'Raw Trout',\n      examine: 'Raw trout, needs cooking.',\n      value: 10,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_trout',\n      icon: 'raw_trout_icon',\n    })\n\n    // Cooked food\n    this.register({\n      id: 315,\n      name: 'Shrimps',\n      examine: 'Some nicely cooked shrimps.',\n      value: 5,\n      weight: 0.1,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'shrimps',\n      icon: 'shrimps_icon',\n    })\n\n    this.register({\n      id: 325,\n      name: 'Sardine',\n      examine: 'A nicely cooked sardine.',\n      value: 8,\n      weight: 0.1,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'sardine',\n      icon: 'sardine_icon',\n    })\n\n    this.register({\n      id: 333,\n      name: 'Trout',\n      examine: 'A nicely cooked trout.',\n      value: 25,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'trout',\n      icon: 'trout_icon',\n    })\n\n    // Burnt food\n    this.register({\n      id: 323,\n      name: 'Burnt Shrimp',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.1,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_shrimp',\n      icon: 'burnt_shrimp_icon',\n    })\n\n    this.register({\n      id: 369,\n      name: 'Burnt Sardine',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.1,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_sardine',\n      icon: 'burnt_sardine_icon',\n    })\n\n    this.register({\n      id: 343,\n      name: 'Burnt Trout',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_trout',\n      icon: 'burnt_trout_icon',\n    })\n\n    // Bones (always dropped by NPCs)\n    this.register({\n      id: 526,\n      name: 'Bones',\n      examine: 'These would be good for prayer training.',\n      value: 1,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'bones',\n      icon: 'bones_icon',\n    })\n\n    // Additional cooking ingredients\n    this.register({\n      id: 341,\n      name: 'Raw Salmon',\n      examine: 'Raw salmon, needs cooking.',\n      value: 15,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_salmon',\n      icon: 'raw_salmon_icon',\n    })\n\n    this.register({\n      id: 339,\n      name: 'Salmon',\n      examine: 'A nicely cooked salmon.',\n      value: 40,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'salmon',\n      icon: 'salmon_icon',\n    })\n\n    this.register({\n      id: 347,\n      name: 'Burnt Salmon',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_salmon',\n      icon: 'burnt_salmon_icon',\n    })\n\n    this.register({\n      id: 359,\n      name: 'Raw Tuna',\n      examine: 'Raw tuna, needs cooking.',\n      value: 20,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_tuna',\n      icon: 'raw_tuna_icon',\n    })\n\n    this.register({\n      id: 361,\n      name: 'Tuna',\n      examine: 'A nicely cooked tuna.',\n      value: 50,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'tuna',\n      icon: 'tuna_icon',\n    })\n\n    this.register({\n      id: 367,\n      name: 'Burnt Tuna',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_tuna',\n      icon: 'burnt_tuna_icon',\n    })\n\n    this.register({\n      id: 377,\n      name: 'Raw Lobster',\n      examine: 'Raw lobster, needs cooking.',\n      value: 100,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_lobster',\n      icon: 'raw_lobster_icon',\n    })\n\n    this.register({\n      id: 379,\n      name: 'Lobster',\n      examine: 'A nicely cooked lobster.',\n      value: 150,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'lobster',\n      icon: 'lobster_icon',\n    })\n\n    this.register({\n      id: 381,\n      name: 'Burnt Lobster',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_lobster',\n      icon: 'burnt_lobster_icon',\n    })\n\n    this.register({\n      id: 371,\n      name: 'Raw Swordfish',\n      examine: 'Raw swordfish, needs cooking.',\n      value: 200,\n      weight: 0.6,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_swordfish',\n      icon: 'raw_swordfish_icon',\n    })\n\n    this.register({\n      id: 373,\n      name: 'Swordfish',\n      examine: 'A nicely cooked swordfish.',\n      value: 300,\n      weight: 0.6,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'swordfish',\n      icon: 'swordfish_icon',\n    })\n\n    this.register({\n      id: 375,\n      name: 'Burnt Swordfish',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.6,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_swordfish',\n      icon: 'burnt_swordfish_icon',\n    })\n\n    this.register({\n      id: 383,\n      name: 'Raw Shark',\n      examine: 'Raw shark, needs cooking.',\n      value: 500,\n      weight: 0.8,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_shark',\n      icon: 'raw_shark_icon',\n    })\n\n    this.register({\n      id: 385,\n      name: 'Shark',\n      examine: 'A nicely cooked shark.',\n      value: 800,\n      weight: 0.8,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'shark',\n      icon: 'shark_icon',\n    })\n\n    this.register({\n      id: 387,\n      name: 'Burnt Shark',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.8,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_shark',\n      icon: 'burnt_shark_icon',\n    })\n\n    // Meat items\n    this.register({\n      id: 2138,\n      name: 'Raw Chicken',\n      examine: 'Raw chicken, needs cooking.',\n      value: 3,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_chicken',\n      icon: 'raw_chicken_icon',\n    })\n\n    this.register({\n      id: 2140,\n      name: 'Cooked Chicken',\n      examine: 'A nicely cooked chicken.',\n      value: 8,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'cooked_chicken',\n      icon: 'cooked_chicken_icon',\n    })\n\n    this.register({\n      id: 2142,\n      name: 'Burnt Chicken',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_chicken',\n      icon: 'burnt_chicken_icon',\n    })\n\n    this.register({\n      id: 2132,\n      name: 'Raw Beef',\n      examine: 'Raw beef, needs cooking.',\n      value: 3,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'raw_beef',\n      icon: 'raw_beef_icon',\n    })\n\n    this.register({\n      id: 2134,\n      name: 'Cooked Beef',\n      examine: 'A nicely cooked beef.',\n      value: 8,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'cooked_beef',\n      icon: 'cooked_beef_icon',\n    })\n\n    this.register({\n      id: 2146,\n      name: 'Burnt Beef',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.3,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_beef',\n      icon: 'burnt_beef_icon',\n    })\n\n    // Baking items\n    this.register({\n      id: 2307,\n      name: 'Bread Dough',\n      examine: 'Bread dough, ready for baking.',\n      value: 5,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'bread_dough',\n      icon: 'bread_dough_icon',\n    })\n\n    this.register({\n      id: 2309,\n      name: 'Bread',\n      examine: 'A nicely baked bread.',\n      value: 12,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'bread',\n      icon: 'bread_icon',\n    })\n\n    this.register({\n      id: 2311,\n      name: 'Burnt Bread',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.2,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_bread',\n      icon: 'burnt_bread_icon',\n    })\n\n    this.register({\n      id: 1889,\n      name: 'Cake Mixture',\n      examine: 'Cake mixture, ready for baking.',\n      value: 50,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'cake_mixture',\n      icon: 'cake_mixture_icon',\n    })\n\n    this.register({\n      id: 1891,\n      name: 'Cake',\n      examine: 'A nicely baked cake.',\n      value: 100,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'cake',\n      icon: 'cake_icon',\n    })\n\n    this.register({\n      id: 1893,\n      name: 'Burnt Cake',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.5,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_cake',\n      icon: 'burnt_cake_icon',\n    })\n\n    // Complex items\n    this.register({\n      id: 2003,\n      name: 'Stew Ingredients',\n      examine: 'Raw ingredients for stew.',\n      value: 20,\n      weight: 0.4,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'stew_ingredients',\n      icon: 'stew_ingredients_icon',\n    })\n\n    this.register({\n      id: 2005,\n      name: 'Stew',\n      examine: 'A hearty stew.',\n      value: 50,\n      weight: 0.4,\n      stackable: false,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'stew',\n      icon: 'stew_icon',\n    })\n\n    this.register({\n      id: 2007,\n      name: 'Burnt Stew',\n      examine: 'Burnt to a crisp.',\n      value: 1,\n      weight: 0.4,\n      stackable: false,\n      equipable: false,\n      tradeable: false,\n      members: false,\n      model: 'burnt_stew',\n      icon: 'burnt_stew_icon',\n    })\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  CombatBonuses,\n  Equipment,\n  EquipmentSlot,\n  InventoryComponent,\n  ItemStack,\n  RPGEntity,\n  StatsComponent,\n  MovementComponent,\n  Vector3,\n  // ItemDefinition\n} from '../types/index'\nimport { EquipmentBonusCalculator } from './inventory/EquipmentBonusCalculator'\nimport { ItemRegistry } from './inventory/ItemRegistry'\n\nexport class InventorySystem extends System {\n  // Core management\n  private inventories: Map<string, InventoryComponent> = new Map()\n  private itemRegistry: ItemRegistry\n  private equipmentCalculator: EquipmentBonusCalculator\n\n  // Configuration\n  private readonly MAX_STACK_SIZE = 2147483647 // Max int32\n\n  // Persistence\n  private pendingSaves: Set<string> = new Set()\n  private saveTimer?: NodeJS.Timeout\n\n  constructor(world: World) {\n    super(world)\n    this.itemRegistry = new ItemRegistry()\n    this.equipmentCalculator = new EquipmentBonusCalculator(this.itemRegistry)\n\n    // Register default items\n    this.itemRegistry.loadDefaults()\n  }\n\n  /**\n   * Initialize the system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[InventorySystem] Initializing...')\n\n    // Listen for entity creation to add inventory components\n    this.world.events.on('entity:created', (event: any) => {\n      const entity = this.getEntity(event.entityId)\n      if (entity && this.shouldHaveInventory(entity)) {\n        this.createInventoryInternal(event.entityId)\n      }\n    })\n\n    // Listen for entity destruction to clean up\n    this.world.events.on('entity:destroyed', (event: any) => {\n      this.inventories.delete(event.entityId)\n    })\n\n    // Listen for player events\n    this.world.events.on('player:connect', this.handlePlayerConnect.bind(this))\n    this.world.events.on('player:disconnect', this.handlePlayerDisconnect.bind(this))\n\n    // Start auto-save timer\n    this.startAutoSave()\n  }\n\n  /**\n   * Start auto-save timer\n   */\n  private startAutoSave(): void {\n    // Save pending inventories every 10 seconds\n    this.saveTimer = setInterval(() => {\n      this.savePendingInventories()\n    }, 10000)\n  }\n\n  /**\n   * Handle player connect event\n   */\n  private async handlePlayerConnect(data: { playerId: string }): Promise<void> {\n    await this.loadPlayerInventory(data.playerId)\n  }\n\n  /**\n   * Handle player disconnect event\n   */\n  private async handlePlayerDisconnect(data: { playerId: string }): Promise<void> {\n    // Save inventory immediately on disconnect\n    await this.savePlayerInventory(data.playerId)\n    this.pendingSaves.delete(data.playerId)\n  }\n\n  /**\n   * Load player inventory from persistence\n   */\n  private async loadPlayerInventory(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      // Load inventory items\n      const items = await persistence.loadPlayerInventory(playerId)\n      const equipment = await persistence.loadPlayerEquipment(playerId)\n      \n      // Get or create inventory\n      let inventory = this.inventories.get(playerId)\n      if (!inventory) {\n        this.createInventoryInternal(playerId)\n        inventory = this.inventories.get(playerId)\n      }\n      if (!inventory) return\n\n      // Clear and load items\n      inventory.items = new Array(inventory.maxSlots).fill(null)\n      for (const item of items) {\n        if (item.slot >= 0 && item.slot < inventory.maxSlots) {\n          inventory.items[item.slot] = {\n            itemId: item.itemId,\n            quantity: item.quantity,\n            metadata: item.metadata\n          }\n        }\n      }\n\n      // Load equipment\n      for (const equipItem of equipment) {\n        const slot = equipItem.slot as EquipmentSlot\n        const itemDef = this.itemRegistry.get(equipItem.itemId)\n        if (itemDef && itemDef.equipment) {\n          inventory.equipment[slot] = {\n            ...itemDef,\n            metadata: equipItem.metadata\n          } as Equipment\n        }\n      }\n\n      // Update weight and bonuses\n      this.updateWeight(inventory)\n      this.updateEquipmentBonuses(inventory)\n\n      console.log(`[InventorySystem] Loaded inventory for player ${playerId}`)\n    } catch (error) {\n      console.error(`[InventorySystem] Failed to load inventory for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save player inventory to persistence\n   */\n  private async savePlayerInventory(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const inventory = this.inventories.get(playerId)\n    if (!inventory) return\n\n    try {\n      // Prepare inventory items\n      const items: Array<{ slot: number; itemId: number; quantity: number; metadata?: any }> = []\n      for (let i = 0; i < inventory.items.length; i++) {\n        const item = inventory.items[i]\n        if (item) {\n          items.push({\n            slot: i,\n            itemId: item.itemId,\n            quantity: item.quantity,\n            metadata: item.metadata\n          })\n        }\n      }\n\n      // Prepare equipment\n      const equipment: Array<{ slot: string; itemId: number; metadata?: any }> = []\n      for (const [slot, equip] of Object.entries(inventory.equipment)) {\n        if (equip) {\n          equipment.push({\n            slot,\n            itemId: equip.id,\n            metadata: equip.metadata\n          })\n        }\n      }\n\n      // Save to persistence\n      await persistence.savePlayerInventory(playerId, items)\n      await persistence.savePlayerEquipment(playerId, equipment)\n\n      console.log(`[InventorySystem] Saved inventory for player ${playerId}`)\n    } catch (error) {\n      console.error(`[InventorySystem] Failed to save inventory for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save all pending inventories\n   */\n  private async savePendingInventories(): Promise<void> {\n    if (this.pendingSaves.size === 0) return\n\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const toSave = Array.from(this.pendingSaves)\n    this.pendingSaves.clear()\n\n    for (const entityId of toSave) {\n      // Only save if it's a player entity\n      const entity = this.getEntity(entityId)\n      if (entity && entity.type === 'player') {\n        await this.savePlayerInventory(entityId)\n      }\n    }\n  }\n\n  /**\n   * Mark entity for saving\n   */\n  private markForSave(entityId: string): void {\n    this.pendingSaves.add(entityId)\n  }\n\n  /**\n   * Update method\n   */\n  override update(_delta: number): void {\n    // Update weight calculations periodically\n    for (const [_entityId, inventory] of Array.from(this.inventories)) {\n      this.updateWeight(inventory)\n    }\n  }\n\n  /**\n   * Add item to entity inventory\n   */\n  addItem(entityId: string, itemId: number, quantity: number): boolean {\n    const entity = this.getEntity(entityId)\n    if (!entity) {\n      return false\n    }\n\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const itemDef = this.itemRegistry.get(itemId)\n    if (!itemDef) {\n      return false\n    }\n\n    // Try to stack with existing items\n    if (itemDef.stackable) {\n      const existingStack = inventory.items.find(stack => stack?.itemId === itemId)\n      if (existingStack) {\n        existingStack.quantity += quantity\n        this.markForSave(entityId)\n        return true\n      }\n    }\n\n    // Find free slot\n    const freeSlot = inventory.items.findIndex(slot => !slot)\n    if (freeSlot === -1) {\n      return false\n    }\n\n    // Add to inventory\n    inventory.items[freeSlot] = {\n      itemId,\n      quantity,\n    }\n\n    this.markForSave(entityId)\n    return true\n  }\n\n  /**\n   * Remove item from inventory by slot\n   */\n  removeItem(entityId: string, slot: number, quantity?: number): ItemStack | null {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      return null\n    }\n\n    const item = inventory.items[slot]\n    if (!item) {\n      return null\n    }\n\n    const removeQuantity = quantity || item.quantity\n\n    if (removeQuantity >= item.quantity) {\n      // Remove entire stack\n      inventory.items[slot] = null\n      this.updateWeight(inventory)\n      this.syncInventory(entityId)\n      this.markForSave(entityId)\n\n      this.world.events.emit('inventory:item-removed', {\n        entityId,\n        itemId: item.itemId,\n        quantity: item.quantity,\n        slot,\n      })\n\n      return { ...item }\n    } else {\n      // Remove partial stack\n      item.quantity -= removeQuantity\n      this.updateWeight(inventory)\n      this.syncInventory(entityId)\n      this.markForSave(entityId)\n\n      this.world.events.emit('inventory:item-removed', {\n        entityId,\n        itemId: item.itemId,\n        quantity: removeQuantity,\n        slot,\n      })\n\n      return {\n        itemId: item.itemId,\n        quantity: removeQuantity,\n      }\n    }\n  }\n\n  /**\n   * Remove item from inventory by item ID and quantity\n   */\n  removeItemById(entityId: string, itemId: number, quantity: number): boolean {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      return false\n    }\n\n    let remainingToRemove = quantity\n\n    for (let i = 0; i < inventory.items.length && remainingToRemove > 0; i++) {\n      const item = inventory.items[i]\n      if (item && item.itemId === itemId) {\n        const toRemove = Math.min(item.quantity, remainingToRemove)\n        \n        if (toRemove === item.quantity) {\n          // Remove entire stack\n          inventory.items[i] = null\n        } else {\n          // Reduce quantity\n          item.quantity -= toRemove\n        }\n        \n        remainingToRemove -= toRemove\n        \n        this.world.events.emit('inventory:item-removed', {\n          entityId,\n          itemId: item.itemId,\n          quantity: toRemove,\n          slot: i,\n        })\n      }\n    }\n\n    this.updateWeight(inventory)\n    this.syncInventory(entityId)\n    \n    if (remainingToRemove === 0) {\n      this.markForSave(entityId)\n    }\n\n    return remainingToRemove === 0\n  }\n\n  /**\n   * Get the total quantity of a specific item in inventory\n   */\n  getItemQuantity(entityId: string, itemId: number): number {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      // Try getting from entity component as fallback\n      const entity = this.getEntity(entityId)\n      if (entity) {\n        const entityInventory = entity.getComponent<InventoryComponent>('inventory')\n        if (entityInventory) {\n          let totalQuantity = 0\n          for (const item of entityInventory.items) {\n            if (item && item.itemId === itemId) {\n              totalQuantity += item.quantity\n            }\n          }\n          return totalQuantity\n        }\n      }\n      return 0\n    }\n\n    let totalQuantity = 0\n    for (const item of inventory.items) {\n      if (item && item.itemId === itemId) {\n        totalQuantity += item.quantity\n      }\n    }\n\n    return totalQuantity\n  }\n\n  /**\n   * Move item between slots\n   */\n  moveItem(entityId: string, fromSlot: number, toSlot: number): boolean {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      return false\n    }\n\n    if (fromSlot < 0 || fromSlot >= inventory.maxSlots || toSlot < 0 || toSlot >= inventory.maxSlots) {\n      return false\n    }\n\n    const fromItem = inventory.items[fromSlot] || null\n    const toItem = inventory.items[toSlot] || null\n\n    // Simple swap\n    inventory.items[fromSlot] = toItem\n    inventory.items[toSlot] = fromItem\n\n    this.syncInventory(entityId)\n    this.markForSave(entityId)\n\n    this.world.events.emit('inventory:item-moved', {\n      entityId,\n      fromSlot,\n      toSlot,\n    })\n\n    return true\n  }\n\n  /**\n   * Equip item to slot\n   */\n  equipItem(entity: RPGEntity, inventorySlot: number, equipmentSlot: EquipmentSlot): boolean {\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const stack = inventory.items[inventorySlot]\n    if (!stack) {\n      return false\n    }\n\n    const itemDef = this.itemRegistry.get(stack.itemId)\n    if (!itemDef || !itemDef.equipment) {\n      return false\n    }\n\n    // Check if slot matches item type\n    if (itemDef.equipment.slot !== equipmentSlot) {\n      return false\n    }\n\n    // Unequip current item if any\n    const currentEquipped = inventory.equipment[equipmentSlot]\n    if (currentEquipped) {\n      this.unequipItem(entity, equipmentSlot)\n    }\n\n    // Remove from inventory\n    const removedStack = this.removeFromSlot(inventory, inventorySlot, 1)\n    if (!removedStack) {\n      return false\n    }\n\n    // Equip item (convert ItemDefinition to Equipment)\n    const equipment: Equipment = {\n      ...itemDef,\n      metadata: stack.metadata,\n    } as Equipment\n\n    inventory.equipment[equipmentSlot] = equipment\n\n    // Sync network if available\n    this.syncEquipNetwork(entity, equipmentSlot, equipment)\n\n    // Update combat bonuses\n    this.updateCombatBonuses(entity)\n    \n    // Mark for save\n    this.markForSave(entity.data.id)\n\n    // Emit event\n    this.world.events.emit('inventory:item-equipped', {\n      entity,\n      item: removedStack,\n      slot: equipmentSlot,\n    })\n\n    return true\n  }\n\n  /**\n   * Unequip item from slot\n   */\n  unequipItem(entity: RPGEntity, slot: EquipmentSlot): boolean {\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const equipment = inventory.equipment[slot]\n    if (!equipment) {\n      return false\n    }\n\n    // Add to inventory\n    if (!this.addItem(entity.data.id, equipment.id, 1)) {\n      // Inventory full\n      return false\n    }\n\n    // Remove from equipment\n    inventory.equipment[slot] = null\n\n    // Sync network if available\n    this.syncUnequipNetwork(entity, slot)\n\n    // Update combat bonuses\n    this.updateCombatBonuses(entity)\n    \n    // Mark for save\n    this.markForSave(entity.data.id)\n\n    // Emit event\n    this.world.events.emit('inventory:item-unequipped', {\n      entity,\n      item: equipment,\n      slot,\n    })\n\n    return true\n  }\n\n  /**\n   * Drop item from inventory\n   */\n  dropItem(entity: RPGEntity, slotIndex: number, quantity: number = 1): boolean {\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const stack = inventory.items[slotIndex]\n    if (!stack) {\n      return false\n    }\n\n    // Remove from inventory\n    const droppedStack = this.removeFromSlot(inventory, slotIndex, quantity)\n    if (!droppedStack) {\n      return false\n    }\n\n    // Get entity position from movement component\n    const position = this.getEntityPosition(entity)\n    if (!position) {\n      // If no position, put item back and fail\n      this.addItem(entity.data.id, droppedStack.itemId, droppedStack.quantity)\n      return false\n    }\n\n    // Create dropped item entity\n    const droppedEntity = {\n      id: `dropped_${Date.now()}_${Math.random()}`,\n      type: 'item',\n      itemId: droppedStack.itemId,\n      quantity: droppedStack.quantity,\n      position: {\n        x: position.x + (Math.random() - 0.5) * 2,\n        y: position.y,\n        z: position.z + (Math.random() - 0.5) * 2,\n      },\n      droppedBy: entity.data.id,\n      droppedAt: Date.now(),\n    }\n\n    // Add to world entities\n    ;(this.world as any).entities?.set(droppedEntity.id, droppedEntity)\n\n    // Sync network if available\n    this.syncDropItemNetwork(entity, droppedStack, droppedEntity)\n    \n    // Mark for save\n    this.markForSave(entity.data.id)\n\n    // Emit event\n    this.world.events.emit('inventory:item-dropped', {\n      entity,\n      item: droppedStack,\n      position,\n      droppedEntity,\n    })\n\n    return true\n  }\n\n  /**\n   * Get total weight\n   */\n  getWeight(entityId: string): number {\n    const inventory = this.inventories.get(entityId)\n    return inventory ? inventory.totalWeight : 0\n  }\n\n  /**\n   * Get number of free slots\n   */\n  getFreeSlots(entityId: string): number {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      return 0\n    }\n\n    return inventory.items.filter(item => item === null).length\n  }\n\n  /**\n   * Find item in inventory\n   */\n  findItem(entityId: string, itemId: number): number | null {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      return null\n    }\n\n    for (let i = 0; i < inventory.items.length; i++) {\n      if (inventory.items[i]?.itemId === itemId) {\n        return i\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Create inventory for entity (private helper)\n   */\n  private createInventoryInternal(entityId: string): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const inventory: InventoryComponent = {\n      type: 'inventory',\n      entity: entity as any,\n      data: {},\n      items: new Array(28).fill(null),\n      maxSlots: 28,\n      equipment: {\n        [EquipmentSlot.HEAD]: null,\n        [EquipmentSlot.CAPE]: null,\n        [EquipmentSlot.AMULET]: null,\n        [EquipmentSlot.WEAPON]: null,\n        [EquipmentSlot.BODY]: null,\n        [EquipmentSlot.SHIELD]: null,\n        [EquipmentSlot.LEGS]: null,\n        [EquipmentSlot.GLOVES]: null,\n        [EquipmentSlot.BOOTS]: null,\n        [EquipmentSlot.RING]: null,\n        [EquipmentSlot.AMMO]: null,\n      },\n      totalWeight: 0,\n      equipmentBonuses: {\n        attackStab: 0,\n        attackSlash: 0,\n        attackCrush: 0,\n        attackMagic: 0,\n        attackRanged: 0,\n        defenseStab: 0,\n        defenseSlash: 0,\n        defenseCrush: 0,\n        defenseMagic: 0,\n        defenseRanged: 0,\n        meleeStrength: 0,\n        rangedStrength: 0,\n        magicDamage: 0,\n        prayerBonus: 0,\n      },\n    }\n\n    // Check if entity is an RPGEntity with addComponent method\n    if ('addComponent' in entity && typeof entity.addComponent === 'function') {\n      entity.addComponent('inventory', inventory)\n    }\n\n    this.inventories.set(entityId, inventory)\n  }\n\n  /**\n   * Find first free slot\n   */\n  private findFreeSlot(inventory: InventoryComponent): number {\n    for (let i = 0; i < inventory.items.length; i++) {\n      if (inventory.items[i] === null) {\n        return i\n      }\n    }\n    return -1\n  }\n\n  /**\n   * Update total weight\n   */\n  private updateWeight(inventory: InventoryComponent): void {\n    let totalWeight = 0\n\n    // Items weight\n    for (const item of inventory.items) {\n      if (item) {\n        const itemDef = this.itemRegistry.get(item.itemId)\n        if (itemDef) {\n          totalWeight += itemDef.weight * item.quantity\n        }\n      }\n    }\n\n    // Equipment weight\n    for (const slot in inventory.equipment) {\n      const equipped = inventory.equipment[slot as EquipmentSlot]\n      if (equipped) {\n        totalWeight += equipped.weight\n      }\n    }\n\n    inventory.totalWeight = totalWeight\n  }\n\n  /**\n   * Update equipment bonuses\n   */\n  private updateEquipmentBonuses(inventory: InventoryComponent): void {\n    inventory.equipmentBonuses = this.equipmentCalculator.calculateTotalBonuses(inventory.equipment)\n\n    // Update stats component if exists\n    const entity = this.getEntityByInventory(inventory)\n    if (entity) {\n      const stats = entity.getComponent<StatsComponent>('stats')\n      if (stats) {\n        stats.combatBonuses = inventory.equipmentBonuses\n      }\n    }\n  }\n\n  /**\n   * Sync inventory to client\n   */\n  private syncInventory(entityId: string): void {\n    const inventory = this.inventories.get(entityId)\n    if (!inventory) {\n      return\n    }\n\n    // Network sync if available\n    const network = (this.world as any).network\n    if (network) {\n      network.send(entityId, 'inventory:update', {\n        items: inventory.items,\n        equipment: inventory.equipment,\n        weight: inventory.totalWeight,\n        bonuses: inventory.equipmentBonuses,\n      })\n    }\n\n    // Also emit event for local systems\n    this.world.events.emit('inventory:sync', {\n      entityId,\n      items: inventory.items,\n      equipment: inventory.equipment,\n      weight: inventory.totalWeight,\n      bonuses: inventory.equipmentBonuses,\n    })\n  }\n\n  /**\n   * Send message to entity\n   */\n  private sendMessage(entityId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      targetId: entityId,\n      message,\n    })\n  }\n\n  /**\n   * Public method to create inventory for an entity\n   */\n  public createInventory(entityId: string): InventoryComponent | null {\n    this.createInventoryInternal(entityId)\n    return this.inventories.get(entityId) || null\n  }\n\n  /**\n   * Check if entity should have inventory\n   */\n  private shouldHaveInventory(entity: any): boolean {\n    // Players always have inventory\n    if (entity.data?.type === 'player' || entity.type === 'player') {\n      return true\n    }\n\n    // Some NPCs might have inventory (shopkeepers, etc)\n    const npcComponent = entity.getComponent?.('npc')\n    if (npcComponent && npcComponent.hasInventory) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Get entity from world\n   */\n  private getEntity(entityId: string): RPGEntity | undefined {\n    // Handle test environment where entities are in a Map\n    if (this.world.entities.items instanceof Map) {\n      const entity = this.world.entities.items.get(entityId)\n      if (!entity || typeof entity.getComponent !== 'function') {\n        return undefined\n      }\n      return entity as unknown as RPGEntity\n    }\n\n    // Handle production environment\n    const entity = this.world.entities.get?.(entityId)\n    if (!entity || typeof entity.getComponent !== 'function') {\n      return undefined\n    }\n    return entity as unknown as RPGEntity\n  }\n\n  /**\n   * Get entity by inventory component\n   */\n  private getEntityByInventory(inventory: InventoryComponent): RPGEntity | undefined {\n    for (const [entityId, inv] of Array.from(this.inventories)) {\n      if (inv === inventory) {\n        return this.getEntity(entityId)\n      }\n    }\n    return undefined\n  }\n\n  /**\n   * Create empty combat bonuses\n   */\n  private createEmptyBonuses(): CombatBonuses {\n    return {\n      attackStab: 0,\n      attackSlash: 0,\n      attackCrush: 0,\n      attackMagic: 0,\n      attackRanged: 0,\n      defenseStab: 0,\n      defenseSlash: 0,\n      defenseCrush: 0,\n      defenseMagic: 0,\n      defenseRanged: 0,\n      meleeStrength: 0,\n      rangedStrength: 0,\n      magicDamage: 0,\n      prayerBonus: 0,\n    }\n  }\n\n  /**\n   * Register default items\n   */\n  private registerDefaultItems(): void {\n    // Example items\n    this.itemRegistry.register({\n      id: 1,\n      name: 'Coins',\n      examine: 'Lovely money!',\n      value: 1,\n      weight: 0,\n      stackable: true,\n      equipable: false,\n      tradeable: true,\n      members: false,\n      model: 'coins.glb',\n      icon: 'coins.png',\n    })\n\n    this.itemRegistry.register({\n      id: 1038,\n      name: 'Red partyhat',\n      examine: 'A nice hat from a cracker.',\n      value: 1,\n      weight: 0,\n      stackable: false,\n      equipable: true,\n      tradeable: true,\n      members: false,\n      equipment: {\n        slot: EquipmentSlot.HEAD,\n        requirements: {},\n        bonuses: this.createEmptyBonuses(),\n      },\n      model: 'red_partyhat.glb',\n      icon: 'red_partyhat.png',\n    })\n\n    // Add more default items...\n  }\n\n  /**\n   * Get entity position from movement component\n   */\n  private getEntityPosition(entity: RPGEntity): Vector3 | null {\n    // Try movement component first\n    const movement = entity.getComponent<MovementComponent>('movement')\n    if (movement?.position) {\n      return movement.position\n    }\n\n    // Fall back to entity position\n    if (entity.position) {\n      return entity.position\n    }\n\n    // Try data position\n    if (entity.data?.position) {\n      if (Array.isArray(entity.data.position)) {\n        return {\n          x: entity.data.position[0] || 0,\n          y: entity.data.position[1] || 0,\n          z: entity.data.position[2] || 0,\n        }\n      }\n      return entity.data.position\n    }\n\n    return null\n  }\n\n  /**\n   * Sync drop item over network\n   */\n  private syncDropItemNetwork(entity: RPGEntity, stack: ItemStack, droppedEntity: any): void {\n    const network = (this.world as any).network\n    if (!network) {\n      return\n    }\n\n    const itemDef = this.itemRegistry.get(stack.itemId)\n\n    network.broadcast('item_dropped', {\n      entityId: entity.data.id,\n      item: {\n        id: stack.itemId,\n        name: itemDef?.name || 'Unknown item',\n        quantity: stack.quantity,\n      },\n      droppedEntityId: droppedEntity.id,\n      position: droppedEntity.position,\n    })\n  }\n\n  /**\n   * Sync equip item over network\n   */\n  private syncEquipNetwork(entity: RPGEntity, slot: EquipmentSlot, equipment: Equipment): void {\n    const network = (this.world as any).network\n    if (!network) {\n      return\n    }\n\n    network.broadcast('item_equipped', {\n      entityId: entity.data.id,\n      slot,\n      equipment: {\n        id: equipment.id,\n        name: equipment.name,\n        bonuses: equipment.equipment?.bonuses,\n      },\n    })\n  }\n\n  /**\n   * Sync unequip item over network\n   */\n  private syncUnequipNetwork(entity: RPGEntity, slot: EquipmentSlot): void {\n    const network = (this.world as any).network\n    if (!network) {\n      return\n    }\n\n    network.broadcast('item_unequipped', {\n      entityId: entity.data.id,\n      slot,\n    })\n  }\n\n  /**\n   * Update combat bonuses\n   */\n  private updateCombatBonuses(entity: RPGEntity): void {\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    const stats = entity.getComponent<StatsComponent>('stats')\n\n    if (!inventory || !stats) {\n      return\n    }\n\n    // Calculate bonuses from equipment\n    const bonuses = this.equipmentCalculator.calculateTotalBonuses(inventory.equipment)\n\n    // Update the inventory's equipment bonuses\n    inventory.equipmentBonuses = bonuses\n\n    // Apply to stats\n    stats.combatBonuses = bonuses\n  }\n\n  /**\n   * Remove item from slot\n   */\n  private removeFromSlot(inventory: InventoryComponent, slot: number, quantity: number): ItemStack | null {\n    const stack = inventory.items[slot]\n    if (!stack || stack.quantity < quantity) {\n      return null\n    }\n\n    if (stack.quantity === quantity) {\n      // Remove entire stack\n      inventory.items[slot] = null\n      return stack\n    } else {\n      // Split stack\n      stack.quantity -= quantity\n      return {\n        itemId: stack.itemId,\n        quantity,\n      }\n    }\n  }\n\n  /**\n   * Check if item can be equipped to slot\n   */\n  private canEquipToSlot(itemStack: ItemStack, slot: EquipmentSlot): boolean {\n    const itemDef = this.itemRegistry.get(itemStack.itemId)\n    if (!itemDef || !itemDef.equipment) {\n      return false\n    }\n\n    const equipmentSlot = itemDef.equipment.slot\n    return equipmentSlot === slot\n  }\n\n  /**\n   * Add item to specific entity\n   */\n  private addItemToEntity(entity: RPGEntity, itemStack: ItemStack): boolean {\n    const inventory = entity.getComponent<InventoryComponent>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    // Find free slot\n    const freeSlot = inventory.items.findIndex(slot => !slot)\n    if (freeSlot === -1) {\n      return false\n    }\n\n    // Add to inventory\n    inventory.items[freeSlot] = itemStack\n    return true\n  }\n}\n", "/**\n * Quest Definitions - RuneScape-style quest content and progression\n * Defines quest requirements, objectives, rewards, and storylines\n */\n\nimport { SkillType } from '../skills/SkillDefinitions'\n\nexport enum QuestDifficulty {\n  NOVICE = 'novice',\n  INTERMEDIATE = 'intermediate',\n  EXPERIENCED = 'experienced',\n  MASTER = 'master',\n  GRANDMASTER = 'grandmaster',\n}\n\nexport enum QuestStatus {\n  NOT_STARTED = 'not_started',\n  IN_PROGRESS = 'in_progress',\n  COMPLETED = 'completed',\n}\n\nexport enum ObjectiveType {\n  KILL_NPCS = 'kill_npcs',\n  COLLECT_ITEMS = 'collect_items',\n  TALK_TO_NPC = 'talk_to_npc',\n  REACH_LOCATION = 'reach_location',\n  USE_ITEM = 'use_item',\n  CRAFT_ITEMS = 'craft_items',\n  SKILL_LEVEL = 'skill_level',\n  COMPLETE_QUEST = 'complete_quest',\n  CUSTOM = 'custom',\n}\n\nexport interface QuestObjective {\n  id: string\n  type: ObjectiveType\n  description: string\n  target?: string // NPC ID, item ID, location ID, etc.\n  quantity?: number\n  skillType?: SkillType\n  level?: number\n  completed: boolean\n  hidden?: boolean // Don't show until previous objectives complete\n}\n\nexport interface QuestRequirement {\n  type: 'quest' | 'skill' | 'item' | 'level'\n  questId?: string\n  skillType?: SkillType\n  level?: number\n  itemId?: string\n  quantity?: number\n  combatLevel?: number\n}\n\nexport interface QuestReward {\n  type: 'experience' | 'item' | 'coins' | 'access' | 'ability'\n  skillType?: SkillType\n  experience?: number\n  itemId?: string\n  quantity?: number\n  coins?: number\n  unlocks?: string[] // Areas, NPCs, features unlocked\n  description: string\n}\n\nexport interface DialogueNode {\n  id: string\n  speaker: string // NPC name or 'Player'\n  text: string\n  choices?: {\n    text: string\n    nextNodeId: string\n    condition?: (playerId: string) => boolean\n  }[]\n  nextNodeId?: string // For linear dialogue\n  action?: {\n    type: 'complete_objective' | 'give_item' | 'teleport' | 'custom'\n    objectiveId?: string\n    itemId?: string\n    quantity?: number\n    location?: { x: number; y: number; z: number }\n    customAction?: string\n  }\n}\n\nexport interface QuestDefinition {\n  id: string\n  name: string\n  description: string\n  lore: string\n  difficulty: QuestDifficulty\n  series?: string // Quest series name\n\n  // Requirements\n  requirements: QuestRequirement[]\n\n  // Quest content\n  objectives: QuestObjective[]\n  dialogue: { [nodeId: string]: DialogueNode }\n  startNpcId: string\n\n  // Rewards\n  experienceRewards: { [skill in SkillType]?: number }\n  itemRewards: { itemId: string; quantity: number }[]\n  coinReward: number\n  questPoints: number\n  unlocks: string[] // Features, areas, or content unlocked\n\n  // Metadata\n  estimatedDuration: number // minutes\n  membersOnly: boolean\n  category: string // 'Combat', 'Skill', 'Story', etc.\n}\n\n// Import JSON quests - use ES module imports instead of require\nimport tutorialQuest from '../../config/quests/tutorial_quest.json'\nimport goblinMenace from '../../config/quests/goblin_menace.json'\nimport sheepShearerJson from '../../config/quests/sheep_shearer.json'\nimport impCatcher from '../../config/quests/imp_catcher.json'\nimport doricQuest from '../../config/quests/doric_quest.json'\nimport romeoAndJuliet from '../../config/quests/romeo_and_juliet.json'\nimport restlessGhost from '../../config/quests/restless_ghost.json'\nimport witchsPotion from '../../config/quests/witchs_potion.json'\nimport ernestTheChicken from '../../config/quests/ernest_the_chicken.json'\n\n// Convert JSON quests to QuestDefinition format\nfunction convertJsonQuest(jsonQuest: any): QuestDefinition {\n  const objectives: QuestObjective[] = []\n  const dialogue: { [nodeId: string]: DialogueNode } = {}\n  \n  // Convert stages to objectives\n  jsonQuest.stages?.forEach((stage: any) => {\n    stage.objectives?.forEach((obj: any) => {\n      objectives.push({\n        id: obj.type + '_' + stage.id,\n        type: obj.type as ObjectiveType,\n        description: obj.description || stage.description,\n        target: obj.npcId || obj.itemId,\n        quantity: obj.quantity,\n        completed: false,\n        hidden: obj.hidden\n      })\n    })\n  })\n  \n  // Build dialogue nodes from stages\n  if (jsonQuest.stages?.length > 0) {\n    const startStage = jsonQuest.stages[0]\n    dialogue.start = {\n      id: 'start',\n      speaker: jsonQuest.startNpc || 'Quest Giver',\n      text: startStage.objectives?.[0]?.dialogue || jsonQuest.description,\n      choices: [\n        { text: \"I'll help!\", nextNodeId: 'accept' },\n        { text: \"Not right now.\", nextNodeId: 'decline' }\n      ]\n    }\n    \n    dialogue.accept = {\n      id: 'accept',\n      speaker: jsonQuest.startNpc || 'Quest Giver',\n      text: 'Great! ' + jsonQuest.description,\n      action: { type: 'complete_objective', objectiveId: objectives[0]?.id }\n    }\n    \n    dialogue.decline = {\n      id: 'decline',\n      speaker: jsonQuest.startNpc || 'Quest Giver',\n      text: 'Come back when you are ready.'\n    }\n  }\n  \n  return {\n    id: jsonQuest.id,\n    name: jsonQuest.name,\n    description: jsonQuest.description,\n    lore: jsonQuest.description,\n    difficulty: QuestDifficulty.NOVICE,\n    requirements: [],\n    objectives,\n    dialogue,\n    startNpcId: jsonQuest.startNpc || 'quest_giver',\n    experienceRewards: jsonQuest.rewards?.experience || {},\n    itemRewards: jsonQuest.rewards?.items || [],\n    coinReward: jsonQuest.rewards?.items?.find((i: any) => i.itemId === 'coins')?.quantity || 0,\n    questPoints: jsonQuest.rewards?.questPoints || 1,\n    unlocks: jsonQuest.rewards?.unlocks || [],\n    estimatedDuration: 30,\n    membersOnly: false,\n    category: 'Story'\n  }\n}\n\n// Core RuneScape-style quests - merge existing with JSON quests\nexport const QUEST_DEFINITIONS: { [key: string]: QuestDefinition } = {\n  // JSON quests\n  tutorial_quest: convertJsonQuest(tutorialQuest),\n  goblin_menace: convertJsonQuest(goblinMenace),\n  sheep_shearer_json: convertJsonQuest(sheepShearerJson),\n  imp_catcher: convertJsonQuest(impCatcher),\n  doric_quest: convertJsonQuest(doricQuest),\n  romeo_and_juliet: convertJsonQuest(romeoAndJuliet),\n  restless_ghost: convertJsonQuest(restlessGhost),\n  witchs_potion: convertJsonQuest(witchsPotion),\n  ernest_the_chicken: convertJsonQuest(ernestTheChicken),\n  \n  // Original hardcoded quests\n  cooks_assistant: {\n    id: 'cooks_assistant',\n    name: \"Cook's Assistant\",\n    description: \"Help the Lumbridge cook prepare a cake for the Duke's birthday.\",\n    lore: \"The cook in Lumbridge Castle is in a panic! The Duke's birthday is today and he needs to prepare a special cake, but he's missing some key ingredients.\",\n    difficulty: QuestDifficulty.NOVICE,\n    requirements: [],\n    objectives: [\n      {\n        id: 'talk_to_cook',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to the Cook in Lumbridge Castle',\n        target: 'lumbridge_cook',\n        completed: false,\n      },\n      {\n        id: 'collect_milk',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Collect a bucket of milk',\n        target: 'bucket_of_milk',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'collect_egg',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Collect an egg',\n        target: 'egg',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'collect_flour',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Collect a pot of flour',\n        target: 'pot_of_flour',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'return_to_cook',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Return the ingredients to the Cook',\n        target: 'lumbridge_cook',\n        completed: false,\n        hidden: true,\n      },\n    ],\n    dialogue: {\n      start: {\n        id: 'start',\n        speaker: 'Cook',\n        text: \"Oh dear, oh dear! The Duke's birthday is today and I haven't even started baking his cake! I need milk, an egg, and flour. Could you help me gather them?\",\n        choices: [\n          { text: \"Yes, I'll help you!\", nextNodeId: 'accept' },\n          { text: \"Sorry, I'm too busy.\", nextNodeId: 'decline' },\n        ],\n      },\n      accept: {\n        id: 'accept',\n        speaker: 'Cook',\n        text: 'Wonderful! I need a bucket of milk from a cow, an egg from a chicken, and a pot of flour from the wheat field. Please hurry!',\n        action: { type: 'complete_objective', objectiveId: 'talk_to_cook' },\n      },\n      decline: {\n        id: 'decline',\n        speaker: 'Cook',\n        text: 'Oh... well, I understand you must be busy. Please come back if you change your mind!',\n      },\n      complete: {\n        id: 'complete',\n        speaker: 'Cook',\n        text: \"Perfect! You've brought everything I need. The Duke will be so pleased with his cake. Here's your reward!\",\n        action: { type: 'complete_objective', objectiveId: 'return_to_cook' },\n      },\n    },\n    startNpcId: 'lumbridge_cook',\n    experienceRewards: {\n      [SkillType.COOKING]: 300,\n    },\n    itemRewards: [{ itemId: 'coins', quantity: 100 }],\n    coinReward: 100,\n    questPoints: 1,\n    unlocks: ['cooking_tutorial'],\n    estimatedDuration: 15,\n    membersOnly: false,\n    category: 'Skill',\n  },\n\n  sheep_shearer: {\n    id: 'sheep_shearer',\n    name: 'Sheep Shearer',\n    description: 'Help Fred the Farmer collect wool from his sheep.',\n    lore: \"Fred the Farmer has lost his shears and needs help collecting wool from his sheep. It's shearing season and the sheep are getting uncomfortable!\",\n    difficulty: QuestDifficulty.NOVICE,\n    requirements: [],\n    objectives: [\n      {\n        id: 'talk_to_fred',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to Fred the Farmer',\n        target: 'fred_farmer',\n        completed: false,\n      },\n      {\n        id: 'collect_wool',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Collect 20 balls of wool',\n        target: 'ball_of_wool',\n        quantity: 20,\n        completed: false,\n      },\n      {\n        id: 'return_wool',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Return the wool to Fred',\n        target: 'fred_farmer',\n        completed: false,\n        hidden: true,\n      },\n    ],\n    dialogue: {\n      start: {\n        id: 'start',\n        speaker: 'Fred the Farmer',\n        text: \"Ah, perfect timing! I've lost my shears and my sheep desperately need shearing. Could you collect 20 balls of wool for me? You can shear the sheep in my field.\",\n        choices: [\n          { text: \"Sure, I'll help!\", nextNodeId: 'accept' },\n          { text: 'Not right now.', nextNodeId: 'decline' },\n        ],\n      },\n      accept: {\n        id: 'accept',\n        speaker: 'Fred the Farmer',\n        text: \"Excellent! My sheep are in the field behind me. Use shears on them to collect wool. Bring me 20 balls of wool when you're done!\",\n        action: { type: 'complete_objective', objectiveId: 'talk_to_fred' },\n      },\n      complete: {\n        id: 'complete',\n        speaker: 'Fred the Farmer',\n        text: \"Fantastic! That's exactly what I needed. My sheep look much more comfortable now. Here's some coin for your trouble!\",\n        action: { type: 'complete_objective', objectiveId: 'return_wool' },\n      },\n    },\n    startNpcId: 'fred_farmer',\n    experienceRewards: {\n      [SkillType.CRAFTING]: 150,\n    },\n    itemRewards: [{ itemId: 'coins', quantity: 60 }],\n    coinReward: 60,\n    questPoints: 1,\n    unlocks: ['spinning_wheel_access'],\n    estimatedDuration: 20,\n    membersOnly: false,\n    category: 'Skill',\n  },\n\n  knights_sword: {\n    id: 'knights_sword',\n    name: \"The Knight's Sword\",\n    description: 'Help Sir Vyvin replace his lost ceremonial sword.',\n    lore: 'Sir Vyvin has lost his ceremonial sword and needs it replaced before the ceremony. The sword requires special blurite ore and advanced smithing techniques.',\n    difficulty: QuestDifficulty.INTERMEDIATE,\n    requirements: [{ type: 'skill', skillType: SkillType.MINING, level: 10 }],\n    objectives: [\n      {\n        id: 'talk_to_vyvin',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to Sir Vyvin',\n        target: 'sir_vyvin',\n        completed: false,\n      },\n      {\n        id: 'learn_about_sword',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Learn about the sword from Reldo',\n        target: 'reldo',\n        completed: false,\n      },\n      {\n        id: 'mine_blurite',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Mine blurite ore',\n        target: 'blurite_ore',\n        quantity: 2,\n        completed: false,\n      },\n      {\n        id: 'get_redberry_pie',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Get a redberry pie for Thurgo',\n        target: 'redberry_pie',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'talk_to_thurgo',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to Thurgo the dwarf smith',\n        target: 'thurgo',\n        completed: false,\n      },\n      {\n        id: 'return_sword',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Return the sword to Sir Vyvin',\n        target: 'sir_vyvin',\n        completed: false,\n        hidden: true,\n      },\n    ],\n    dialogue: {\n      start: {\n        id: 'start',\n        speaker: 'Sir Vyvin',\n        text: \"Oh dear! I've lost my ceremonial sword and the ceremony is tomorrow! It was made of blurite - a very special metal. Could you help me get it replaced?\",\n        choices: [\n          { text: \"Yes, I'll help you find a replacement.\", nextNodeId: 'accept' },\n          { text: 'Sorry, that sounds too difficult.', nextNodeId: 'decline' },\n        ],\n      },\n      accept: {\n        id: 'accept',\n        speaker: 'Sir Vyvin',\n        text: 'Thank you! The sword was made by an Imcando dwarf long ago. Perhaps Reldo in the palace library knows more about them.',\n        action: { type: 'complete_objective', objectiveId: 'talk_to_vyvin' },\n      },\n    },\n    startNpcId: 'sir_vyvin',\n    experienceRewards: {\n      [SkillType.SMITHING]: 12725,\n    },\n    itemRewards: [],\n    coinReward: 0,\n    questPoints: 1,\n    unlocks: ['blurite_smithing'],\n    estimatedDuration: 45,\n    membersOnly: false,\n    category: 'Skill',\n  },\n\n  dragon_slayer: {\n    id: 'dragon_slayer',\n    name: 'Dragon Slayer',\n    description: 'Prove yourself worthy by slaying the mighty dragon Elvarg.',\n    lore: 'The island of Crandor was once a thriving community, until the dragon Elvarg came and destroyed it. Now the dragon threatens the mainland. Can you defeat this ancient evil?',\n    difficulty: QuestDifficulty.EXPERIENCED,\n    requirements: [\n      { type: 'level', combatLevel: 32 },\n      { type: 'quest', questId: 'cooks_assistant' },\n      { type: 'quest', questId: 'sheep_shearer' },\n    ],\n    objectives: [\n      {\n        id: 'talk_to_guildmaster',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to the Champions Guild Guildmaster',\n        target: 'guildmaster',\n        completed: false,\n      },\n      {\n        id: 'find_map_pieces',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Find the three map pieces',\n        target: 'map_piece',\n        quantity: 3,\n        completed: false,\n      },\n      {\n        id: 'get_antidragon_shield',\n        type: ObjectiveType.COLLECT_ITEMS,\n        description: 'Obtain an anti-dragon shield',\n        target: 'antidragon_shield',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'prepare_ship',\n        type: ObjectiveType.CUSTOM,\n        description: 'Prepare the ship to Crandor',\n        completed: false,\n      },\n      {\n        id: 'slay_elvarg',\n        type: ObjectiveType.KILL_NPCS,\n        description: 'Slay the dragon Elvarg',\n        target: 'elvarg',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'return_to_guildmaster',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Return to the Guildmaster',\n        target: 'guildmaster',\n        completed: false,\n        hidden: true,\n      },\n    ],\n    dialogue: {\n      start: {\n        id: 'start',\n        speaker: 'Guildmaster',\n        text: \"So, you think you're ready to face a dragon? Elvarg has terrorized these lands for years. If you can defeat her, you'll earn the right to wear rune plate mail!\",\n        choices: [\n          { text: \"Yes, I'm ready for the challenge!\", nextNodeId: 'accept' },\n          { text: 'A dragon? Maybe I should train more first...', nextNodeId: 'decline' },\n        ],\n      },\n      accept: {\n        id: 'accept',\n        speaker: 'Guildmaster',\n        text: \"Brave words! You'll need to find the map to Crandor - it was torn into three pieces for safety. You'll also need an anti-dragon shield. Good luck, adventurer!\",\n        action: { type: 'complete_objective', objectiveId: 'talk_to_guildmaster' },\n      },\n    },\n    startNpcId: 'guildmaster',\n    experienceRewards: {\n      [SkillType.STRENGTH]: 18650,\n      [SkillType.DEFENCE]: 18650,\n    },\n    itemRewards: [],\n    coinReward: 0,\n    questPoints: 2,\n    unlocks: ['rune_platebody_wear', 'green_dhide_body_wear'],\n    estimatedDuration: 120,\n    membersOnly: false,\n    category: 'Combat',\n  },\n\n  monkey_madness: {\n    id: 'monkey_madness',\n    name: 'Monkey Madness',\n    description: 'Go undercover as a monkey to infiltrate Ape Atoll.',\n    lore: \"The monkey colony on Ape Atoll has been acting strangely. King Narnode Shareen suspects they're planning something and needs you to investigate. But getting onto the island requires some very unusual methods...\",\n    difficulty: QuestDifficulty.MASTER,\n    requirements: [\n      { type: 'quest', questId: 'knights_sword' },\n      { type: 'skill', skillType: SkillType.AGILITY, level: 40 },\n      { type: 'skill', skillType: SkillType.THIEVING, level: 35 },\n    ],\n    objectives: [\n      {\n        id: 'talk_to_narnode',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to King Narnode Shareen',\n        target: 'king_narnode',\n        completed: false,\n      },\n      {\n        id: 'infiltrate_ape_atoll',\n        type: ObjectiveType.CUSTOM,\n        description: 'Infiltrate Ape Atoll disguised as a monkey',\n        completed: false,\n      },\n      {\n        id: 'gather_intelligence',\n        type: ObjectiveType.CUSTOM,\n        description: 'Gather intelligence on the monkey plans',\n        completed: false,\n      },\n      {\n        id: 'escape_ape_atoll',\n        type: ObjectiveType.CUSTOM,\n        description: 'Escape from Ape Atoll',\n        completed: false,\n      },\n      {\n        id: 'report_to_narnode',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Report your findings to King Narnode',\n        target: 'king_narnode',\n        completed: false,\n      },\n    ],\n    dialogue: {\n      start: {\n        id: 'start',\n        speaker: 'King Narnode Shareen',\n        text: 'Ah, a brave adventurer! I have a most unusual request. The monkeys on Ape Atoll have been acting suspiciously. I need someone to go undercover and investigate. Are you up for the challenge?',\n        choices: [\n          { text: 'Undercover as a monkey? That sounds interesting!', nextNodeId: 'accept' },\n          { text: 'That sounds completely insane.', nextNodeId: 'decline' },\n        ],\n      },\n      accept: {\n        id: 'accept',\n        speaker: 'King Narnode Shareen',\n        text: \"Excellent! It will be dangerous - the monkeys don't take kindly to intruders. But with the right disguise and careful planning, you might just pull it off!\",\n        action: { type: 'complete_objective', objectiveId: 'talk_to_narnode' },\n      },\n    },\n    startNpcId: 'king_narnode',\n    experienceRewards: {\n      [SkillType.ATTACK]: 35000,\n      [SkillType.DEFENCE]: 35000,\n      [SkillType.HITPOINTS]: 35000,\n      [SkillType.STRENGTH]: 35000,\n    },\n    itemRewards: [{ itemId: 'dragon_scimitar', quantity: 1 }],\n    coinReward: 0,\n    questPoints: 3,\n    unlocks: ['dragon_weapons_wear', 'ape_atoll_access'],\n    estimatedDuration: 180,\n    membersOnly: true,\n    category: 'Combat',\n  },\n\n  legends_quest: {\n    id: 'legends_quest',\n    name: 'Legends Quest',\n    description: 'Prove yourself worthy of joining the Legends Guild.',\n    lore: 'The ultimate test of a true adventurer. Deep in the jungles of Karamja lies an ancient civilization and powerful artifacts. Only the most skilled and experienced adventurers can hope to complete this quest.',\n    difficulty: QuestDifficulty.GRANDMASTER,\n    requirements: [\n      { type: 'quest', questId: 'dragon_slayer' },\n      { type: 'quest', questId: 'monkey_madness' },\n      { type: 'skill', skillType: SkillType.ATTACK, level: 50 },\n      { type: 'skill', skillType: SkillType.STRENGTH, level: 50 },\n      { type: 'skill', skillType: SkillType.MINING, level: 52 },\n      { type: 'skill', skillType: SkillType.SMITHING, level: 50 },\n      { type: 'skill', skillType: SkillType.MAGIC, level: 56 },\n      { type: 'skill', skillType: SkillType.PRAYER, level: 42 },\n      { type: 'skill', skillType: SkillType.CRAFTING, level: 50 },\n      { type: 'skill', skillType: SkillType.AGILITY, level: 50 },\n      { type: 'skill', skillType: SkillType.THIEVING, level: 50 },\n    ],\n    objectives: [\n      {\n        id: 'talk_to_legends_guard',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Talk to the Legends Guild guard',\n        target: 'legends_guard',\n        completed: false,\n      },\n      {\n        id: 'explore_kharazi_jungle',\n        type: ObjectiveType.REACH_LOCATION,\n        description: 'Explore the Kharazi Jungle',\n        target: 'kharazi_jungle',\n        completed: false,\n      },\n      {\n        id: 'complete_totem',\n        type: ObjectiveType.CUSTOM,\n        description: 'Complete the ancient totem',\n        completed: false,\n      },\n      {\n        id: 'defeat_demon',\n        type: ObjectiveType.KILL_NPCS,\n        description: 'Defeat the jungle demon',\n        target: 'jungle_demon',\n        quantity: 1,\n        completed: false,\n      },\n      {\n        id: 'claim_reward',\n        type: ObjectiveType.TALK_TO_NPC,\n        description: 'Claim your reward from the Legends Guild',\n        target: 'legends_guard',\n        completed: false,\n      },\n    ],\n    dialogue: {\n      start: {\n        id: 'start',\n        speaker: 'Legends Guild Guard',\n        text: 'Welcome, adventurer. You seek to join the Legends Guild? This is no simple task. You must venture into the dangerous Kharazi Jungle and prove your worth. Are you prepared for the ultimate challenge?',\n        choices: [\n          { text: \"Yes, I'm ready to become a legend!\", nextNodeId: 'accept' },\n          { text: 'I need more time to prepare.', nextNodeId: 'decline' },\n        ],\n      },\n      accept: {\n        id: 'accept',\n        speaker: 'Legends Guild Guard',\n        text: 'Then let your legend begin! The jungle holds ancient secrets and terrible dangers. Only the worthy will return. May fortune favor you, adventurer!',\n        action: { type: 'complete_objective', objectiveId: 'talk_to_legends_guard' },\n      },\n    },\n    startNpcId: 'legends_guard',\n    experienceRewards: {\n      [SkillType.ATTACK]: 7650,\n      [SkillType.DEFENCE]: 7650,\n      [SkillType.STRENGTH]: 7650,\n      [SkillType.HITPOINTS]: 7650,\n    },\n    itemRewards: [{ itemId: 'legends_cape', quantity: 1 }],\n    coinReward: 0,\n    questPoints: 4,\n    unlocks: ['legends_guild_access', 'dragon_sq_shield_make'],\n    estimatedDuration: 300,\n    membersOnly: true,\n    category: 'Combat',\n  },\n}\n\n// Helper functions\nexport function getQuestDefinition(questId: string): QuestDefinition | null {\n  return QUEST_DEFINITIONS[questId] || null\n}\n\nexport function getQuestsByDifficulty(difficulty: QuestDifficulty): QuestDefinition[] {\n  return Object.values(QUEST_DEFINITIONS).filter(quest => quest.difficulty === difficulty)\n}\n\nexport function getQuestsByCategory(category: string): QuestDefinition[] {\n  return Object.values(QUEST_DEFINITIONS).filter(quest => quest.category === category)\n}\n\nexport function canPlayerStartQuest(\n  playerId: string,\n  questId: string,\n  getSkillLevel: (playerId: string, skill: SkillType) => number,\n  isQuestCompleted: (playerId: string, questId: string) => boolean,\n  getCombatLevel: (playerId: string) => number\n): boolean {\n  const quest = getQuestDefinition(questId)\n  if (!quest) {\n    return false\n  }\n\n  for (const requirement of quest.requirements) {\n    switch (requirement.type) {\n      case 'skill':\n        if (requirement.skillType && requirement.level) {\n          if (getSkillLevel(playerId, requirement.skillType) < requirement.level) {\n            return false\n          }\n        }\n        break\n      case 'quest':\n        if (requirement.questId && !isQuestCompleted(playerId, requirement.questId)) {\n          return false\n        }\n        break\n      case 'level':\n        if (requirement.combatLevel && getCombatLevel(playerId) < requirement.combatLevel) {\n          return false\n        }\n        break\n    }\n  }\n\n  return true\n}\n\nexport function getAllAvailableQuests(\n  playerId: string,\n  getSkillLevel: (playerId: string, skill: SkillType) => number,\n  isQuestCompleted: (playerId: string, questId: string) => boolean,\n  getCombatLevel: (playerId: string) => number\n): QuestDefinition[] {\n  return Object.values(QUEST_DEFINITIONS).filter(\n    quest =>\n      !isQuestCompleted(playerId, quest.id) &&\n      canPlayerStartQuest(playerId, quest.id, getSkillLevel, isQuestCompleted, getCombatLevel)\n  )\n}\n", "/**\n * Quest System - RuneScape-style quest progression and management\n * Handles quest states, objectives, dialogue, and rewards\n */\n\nimport { System } from '../../core/systems/System'\nimport type { World, Entity } from '../../types'\nimport {\n  QuestDefinition,\n  QuestStatus,\n  QuestObjective,\n  ObjectiveType,\n  DialogueNode,\n  getQuestDefinition,\n  canPlayerStartQuest,\n  getAllAvailableQuests,\n  QUEST_DEFINITIONS,\n} from './quests/QuestDefinitions'\nimport { SkillType } from './skills/SkillDefinitions'\n\nexport interface QuestProgress {\n  questId: string\n  status: QuestStatus\n  objectives: { [objectiveId: string]: boolean }\n  currentDialogueNode?: string\n  startedAt: number\n  completedAt?: number\n}\n\nexport interface QuestComponent {\n  type: 'quest'\n  activeQuests: { [questId: string]: QuestProgress }\n  completedQuests: string[]\n  questPoints: number\n  lastQuestActivity: number\n}\n\nexport interface QuestDialogueState {\n  playerId: string\n  npcId: string\n  questId: string\n  currentNodeId: string\n  context: { [key: string]: any }\n}\n\nexport class QuestSystem extends System {\n  private activeDialogues: Map<string, QuestDialogueState> = new Map()\n  private questJournal: Map<string, { [questId: string]: string[] }> = new Map() // Player quest journal entries\n  \n  // Persistence\n  private pendingSaves: Set<string> = new Set()\n  private saveTimer?: NodeJS.Timeout\n\n  constructor(world: World) {\n    super(world)\n  }\n\n  async initialize(): Promise<void> {\n    console.log('[QuestSystem] Initializing...')\n\n    // Listen for quest events\n    this.world.events.on('player:joined', this.handlePlayerJoined.bind(this))\n    this.world.events.on('quest:start', this.handleStartQuest.bind(this))\n    this.world.events.on('quest:abandon', this.handleAbandonQuest.bind(this))\n    this.world.events.on('quest:complete_objective', this.handleCompleteObjective.bind(this))\n    this.world.events.on('quest:talk_to_npc', this.handleTalkToNpc.bind(this))\n    this.world.events.on('quest:dialogue_choice', this.handleDialogueChoice.bind(this))\n    this.world.events.on('quest:check_progress', this.handleCheckProgress.bind(this))\n    this.world.events.on('quest:view_journal', this.handleViewJournal.bind(this))\n\n    // Listen for game events that might complete objectives\n    this.world.events.on('combat:npc_killed', this.handleNpcKilled.bind(this))\n    this.world.events.on('inventory:item_added', this.handleItemCollected.bind(this))\n    this.world.events.on('skills:level_up', this.handleSkillLevelUp.bind(this))\n    this.world.events.on('player:location_reached', this.handleLocationReached.bind(this))\n    this.world.events.on('inventory:item_used', this.handleItemUsed.bind(this))\n    \n    // Listen for player events for persistence\n    this.world.events.on('player:connect', this.handlePlayerConnect.bind(this))\n    this.world.events.on('player:disconnect', this.handlePlayerDisconnect.bind(this))\n\n    // Start auto-save timer\n    this.startAutoSave()\n\n    console.log('[QuestSystem] Initialized with quest tracking and dialogue system')\n  }\n\n  /**\n   * Start auto-save timer\n   */\n  private startAutoSave(): void {\n    // Save pending quests every 10 seconds\n    this.saveTimer = setInterval(() => {\n      this.savePendingQuests()\n    }, 10000)\n  }\n\n  /**\n   * Handle player connect event\n   */\n  private async handlePlayerConnect(data: { playerId: string }): Promise<void> {\n    await this.loadPlayerQuests(data.playerId)\n  }\n\n  /**\n   * Handle player disconnect event\n   */\n  private async handlePlayerDisconnect(data: { playerId: string }): Promise<void> {\n    // Save quests immediately on disconnect\n    await this.savePlayerQuests(data.playerId)\n    this.pendingSaves.delete(data.playerId)\n  }\n\n  /**\n   * Load player quests from persistence\n   */\n  private async loadPlayerQuests(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      const quests = await persistence.loadPlayerQuests(playerId)\n      \n      // Get or create quest component\n      let entity = this.world.getEntityById(playerId)\n      if (!entity) return\n      \n      let questComponent = entity.getComponent('quest') as QuestComponent\n      if (!questComponent) {\n        const newComponent = this.createQuestComponent(playerId)\n        if (!newComponent) return\n        questComponent = newComponent\n      }\n\n      // Load quest progress\n      for (const questData of quests) {\n        if (questData.status === 'completed') {\n          // Add to completed quests\n          if (!questComponent.completedQuests.includes(questData.questId)) {\n            questComponent.completedQuests.push(questData.questId)\n            // Add quest points\n            const questDef = getQuestDefinition(questData.questId)\n            if (questDef) {\n              questComponent.questPoints += questDef.questPoints\n            }\n          }\n        } else if (questData.status === 'started' || questData.status === 'in_progress') {\n          // Restore active quest\n          const progress: QuestProgress = {\n            questId: questData.questId,\n            status: QuestStatus.IN_PROGRESS,\n            objectives: questData.progress?.objectives || {},\n            currentDialogueNode: questData.progress?.currentDialogueNode,\n            startedAt: new Date(questData.startedAt || Date.now()).getTime(),\n            completedAt: questData.completedAt ? new Date(questData.completedAt).getTime() : undefined\n          }\n          questComponent.activeQuests[questData.questId] = progress\n        }\n      }\n\n      console.log(`[QuestSystem] Loaded quests for player ${playerId}`)\n    } catch (error) {\n      console.error(`[QuestSystem] Failed to load quests for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save player quests to persistence\n   */\n  private async savePlayerQuests(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) return\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) return\n\n    try {\n      const quests: Array<{ questId: string; status: string; progress?: any; startedAt?: string; completedAt?: string }> = []\n      \n      // Save active quests\n      for (const [questId, progress] of Object.entries(questComponent.activeQuests)) {\n        quests.push({\n          questId,\n          status: progress.status === QuestStatus.COMPLETED ? 'completed' : 'in_progress',\n          progress: {\n            objectives: progress.objectives,\n            currentDialogueNode: progress.currentDialogueNode\n          },\n          startedAt: new Date(progress.startedAt).toISOString(),\n          completedAt: progress.completedAt ? new Date(progress.completedAt).toISOString() : undefined\n        })\n      }\n\n      // Save completed quests\n      for (const questId of questComponent.completedQuests) {\n        // Skip if already saved as active (edge case)\n        if (!questComponent.activeQuests[questId]) {\n          quests.push({\n            questId,\n            status: 'completed'\n          })\n        }\n      }\n\n      await persistence.savePlayerQuests(playerId, quests)\n      console.log(`[QuestSystem] Saved quests for player ${playerId}`)\n    } catch (error) {\n      console.error(`[QuestSystem] Failed to save quests for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save all pending quests\n   */\n  private async savePendingQuests(): Promise<void> {\n    if (this.pendingSaves.size === 0) return\n\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const toSave = Array.from(this.pendingSaves)\n    this.pendingSaves.clear()\n\n    for (const playerId of toSave) {\n      // Only save if it's a player entity\n      const entity = this.world.getEntityById(playerId)\n      if (entity && entity.type === 'player') {\n        await this.savePlayerQuests(playerId)\n      }\n    }\n  }\n\n  /**\n   * Mark player for saving\n   */\n  private markForSave(playerId: string): void {\n    this.pendingSaves.add(playerId)\n  }\n\n  private handlePlayerJoined(data: any): void {\n    const { entityId } = data\n    this.createQuestComponent(entityId)\n  }\n\n  public createQuestComponent(entityId: string): QuestComponent | null {\n    const entity = this.world.getEntityById(entityId)\n    if (!entity) {\n      return null\n    }\n\n    const questComponent: QuestComponent = {\n      type: 'quest',\n      activeQuests: {},\n      completedQuests: [],\n      questPoints: 0,\n      lastQuestActivity: Date.now(),\n    }\n\n    entity.addComponent(questComponent)\n\n    // Initialize quest journal\n    this.questJournal.set(entityId, {})\n\n    return questComponent\n  }\n\n  private handleStartQuest(data: any): void {\n    const { playerId, questId } = data\n    this.startQuest(playerId, questId)\n  }\n\n  private handleAbandonQuest(data: any): void {\n    const { playerId, questId } = data\n    this.abandonQuest(playerId, questId)\n  }\n\n  private handleCompleteObjective(data: any): void {\n    const { playerId, questId, objectiveId } = data\n    this.completeObjective(playerId, questId, objectiveId)\n  }\n\n  private handleTalkToNpc(data: any): void {\n    const { playerId, npcId } = data\n    this.handleNpcInteraction(playerId, npcId)\n  }\n\n  private handleDialogueChoice(data: any): void {\n    const { playerId, choiceIndex } = data\n    this.processDialogueChoice(playerId, choiceIndex)\n  }\n\n  private handleCheckProgress(data: any): void {\n    const { playerId, questId } = data\n    const progress = this.getQuestProgress(playerId, questId)\n\n    this.world.events.emit('quest:progress_response', {\n      playerId,\n      questId,\n      progress,\n    })\n  }\n\n  private handleViewJournal(data: any): void {\n    const { playerId } = data\n    const journal = this.getQuestJournal(playerId)\n\n    this.world.events.emit('quest:journal_response', {\n      playerId,\n      journal,\n    })\n  }\n\n  public startQuest(playerId: string, questId: string): boolean {\n    const entity = this.world.getEntityById(playerId)\n    const questDef = getQuestDefinition(questId)\n\n    if (!entity || !questDef) {\n      this.world.events.emit('quest:error', {\n        playerId,\n        message: 'Quest not found',\n      })\n      return false\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      this.world.events.emit('quest:error', {\n        playerId,\n        message: 'Quest component not found',\n      })\n      return false\n    }\n\n    // Check if quest is already started or completed\n    if (questComponent.activeQuests[questId] || questComponent.completedQuests.includes(questId)) {\n      this.world.events.emit('quest:error', {\n        playerId,\n        message: 'Quest already started or completed',\n      })\n      return false\n    }\n\n    // Check requirements\n    if (!this.canPlayerStartQuest(playerId, questId)) {\n      this.world.events.emit('quest:error', {\n        playerId,\n        message: 'Quest requirements not met',\n      })\n      return false\n    }\n\n    // Initialize quest progress\n    const objectives: { [objectiveId: string]: boolean } = {}\n    questDef.objectives.forEach(obj => {\n      objectives[obj.id] = false\n    })\n\n    const questProgress: QuestProgress = {\n      questId,\n      status: QuestStatus.IN_PROGRESS,\n      objectives,\n      startedAt: Date.now(),\n    }\n\n    questComponent.activeQuests[questId] = questProgress\n    questComponent.lastQuestActivity = Date.now()\n\n    // Mark for save\n    this.markForSave(playerId)\n\n    // Add initial journal entry\n    this.addJournalEntry(playerId, questId, `Started quest: ${questDef.name}`)\n    this.addJournalEntry(playerId, questId, questDef.description)\n\n    // Start dialogue with quest giver if applicable\n    if (questDef.startNpcId && questDef.dialogue.start) {\n      this.startDialogue(playerId, questDef.startNpcId, questId, 'start')\n    }\n\n    this.world.events.emit('quest:started', {\n      playerId,\n      questId,\n      questName: questDef.name,\n      difficulty: questDef.difficulty,\n    })\n\n    return true\n  }\n\n  public abandonQuest(playerId: string, questId: string): boolean {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return false\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent || !questComponent.activeQuests[questId]) {\n      this.world.events.emit('quest:error', {\n        playerId,\n        message: 'Quest not active',\n      })\n      return false\n    }\n\n    // Remove from active quests\n    delete questComponent.activeQuests[questId]\n    questComponent.lastQuestActivity = Date.now()\n\n    // Mark for save\n    this.markForSave(playerId)\n\n    // Clear any active dialogue\n    this.activeDialogues.delete(playerId)\n\n    // Add journal entry\n    this.addJournalEntry(playerId, questId, 'Quest abandoned')\n\n    this.world.events.emit('quest:abandoned', {\n      playerId,\n      questId,\n    })\n\n    return true\n  }\n\n  public completeObjective(playerId: string, questId: string, objectiveId: string): boolean {\n    const entity = this.world.getEntityById(playerId)\n    const questDef = getQuestDefinition(questId)\n\n    if (!entity || !questDef) {\n      return false\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    const questProgress = questComponent?.activeQuests[questId]\n\n    if (!questProgress) {\n      return false\n    }\n\n    // Mark objective as complete\n    questProgress.objectives[objectiveId] = true\n    questComponent.lastQuestActivity = Date.now()\n\n    // Mark for save\n    this.markForSave(playerId)\n\n    const objective = questDef.objectives.find(obj => obj.id === objectiveId)\n    if (objective) {\n      this.addJournalEntry(playerId, questId, `\u2713 ${objective.description}`)\n    }\n\n    this.world.events.emit('quest:objective_completed', {\n      playerId,\n      questId,\n      objectiveId,\n      description: objective?.description,\n    })\n\n    // Check if quest is complete\n    const allObjectivesComplete = questDef.objectives.every(obj => questProgress.objectives[obj.id])\n\n    if (allObjectivesComplete) {\n      this.completeQuest(playerId, questId)\n    }\n\n    return true\n  }\n\n  private completeQuest(playerId: string, questId: string): void {\n    const entity = this.world.getEntityById(playerId)\n    const questDef = getQuestDefinition(questId)\n\n    if (!entity || !questDef) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    const questProgress = questComponent.activeQuests[questId]\n    if (!questProgress) {\n      return\n    }\n\n    // Mark as completed\n    questProgress.status = QuestStatus.COMPLETED\n    questProgress.completedAt = Date.now()\n\n    // Move to completed quests\n    questComponent.completedQuests.push(questId)\n    delete questComponent.activeQuests[questId]\n\n    // Add quest points\n    questComponent.questPoints += questDef.questPoints\n\n    // Mark for save\n    this.markForSave(playerId)\n\n    // Give rewards\n    this.giveQuestRewards(playerId, questDef)\n\n    // Add journal entry\n    this.addJournalEntry(playerId, questId, `Quest completed! Gained ${questDef.questPoints} quest points.`)\n\n    this.world.events.emit('quest:completed', {\n      playerId,\n      questId,\n      questName: questDef.name,\n      questPoints: questDef.questPoints,\n      experienceRewards: questDef.experienceRewards,\n      itemRewards: questDef.itemRewards,\n      coinReward: questDef.coinReward,\n      unlocks: questDef.unlocks,\n    })\n  }\n\n  private giveQuestRewards(playerId: string, questDef: QuestDefinition): void {\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    const skillsSystem = this.world.systems.find(s => s.constructor.name === 'EnhancedSkillsSystem')\n\n    // Give experience rewards\n    if (skillsSystem) {\n      Object.entries(questDef.experienceRewards).forEach(([skill, xp]) => {\n        ;(skillsSystem as any).addExperience(playerId, skill as SkillType, xp)\n      })\n    }\n\n    // Give item rewards\n    if (inventorySystem) {\n      questDef.itemRewards.forEach(reward => {\n        ;(inventorySystem as any).addItem(playerId, reward.itemId, reward.quantity)\n      })\n\n      // Give coin reward\n      if (questDef.coinReward > 0) {\n        ;(inventorySystem as any).addItem(playerId, 'coins', questDef.coinReward)\n      }\n    }\n\n    // Handle unlocks (this would integrate with other systems)\n    questDef.unlocks.forEach(unlock => {\n      this.world.events.emit('quest:unlock', {\n        playerId,\n        unlock,\n        questId: questDef.id,\n      })\n    })\n  }\n\n  public handleNpcInteraction(playerId: string, npcId: string): void {\n    // Check if any active quests have dialogue for this NPC\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    // Check active quests for NPC dialogue\n    for (const [questId, progress] of Object.entries(questComponent.activeQuests)) {\n      const questDef = getQuestDefinition(questId)\n      if (!questDef) {\n        continue\n      }\n\n      // Check if this NPC is relevant to current objectives\n      const relevantObjective = questDef.objectives.find(\n        obj => obj.type === ObjectiveType.TALK_TO_NPC && obj.target === npcId && !progress.objectives[obj.id]\n      )\n\n      if (relevantObjective) {\n        // Start dialogue for this quest\n        this.startDialogue(playerId, npcId, questId, 'start')\n        return\n      }\n    }\n\n    // Check if NPC starts any new quests\n    const availableQuests = Object.values(QUEST_DEFINITIONS).filter(\n      quest =>\n        quest.startNpcId === npcId &&\n        !questComponent.completedQuests.includes(quest.id) &&\n        !questComponent.activeQuests[quest.id] &&\n        this.canPlayerStartQuest(playerId, quest.id)\n    )\n\n    if (availableQuests.length > 0) {\n      const quest = availableQuests[0] // Start first available quest\n      this.startDialogue(playerId, npcId, quest.id, 'start')\n    }\n  }\n\n  private startDialogue(playerId: string, npcId: string, questId: string, nodeId: string): void {\n    const questDef = getQuestDefinition(questId)\n    if (!questDef || !questDef.dialogue[nodeId]) {\n      return\n    }\n\n    const dialogueState: QuestDialogueState = {\n      playerId,\n      npcId,\n      questId,\n      currentNodeId: nodeId,\n      context: {},\n    }\n\n    this.activeDialogues.set(playerId, dialogueState)\n\n    const node = questDef.dialogue[nodeId]\n    this.sendDialogue(playerId, node)\n  }\n\n  private sendDialogue(playerId: string, node: DialogueNode): void {\n    this.world.events.emit('quest:dialogue', {\n      playerId,\n      speaker: node.speaker,\n      text: node.text,\n      choices: node.choices || [],\n      nodeId: node.id,\n    })\n  }\n\n  public processDialogueChoice(playerId: string, choiceIndex: number): void {\n    const dialogueState = this.activeDialogues.get(playerId)\n    if (!dialogueState) {\n      return\n    }\n\n    const questDef = getQuestDefinition(dialogueState.questId)\n    if (!questDef) {\n      return\n    }\n\n    const currentNode = questDef.dialogue[dialogueState.currentNodeId]\n    if (!currentNode || !currentNode.choices) {\n      return\n    }\n\n    const choice = currentNode.choices[choiceIndex]\n    if (!choice) {\n      return\n    }\n\n    // Check choice condition\n    if (choice.condition && !choice.condition(playerId)) {\n      this.world.events.emit('quest:error', {\n        playerId,\n        message: 'Choice not available',\n      })\n      return\n    }\n\n    // Move to next dialogue node\n    const nextNode = questDef.dialogue[choice.nextNodeId]\n    if (nextNode) {\n      dialogueState.currentNodeId = choice.nextNodeId\n\n      // Execute any actions\n      if (nextNode.action) {\n        this.executeDialogueAction(playerId, dialogueState.questId, nextNode.action)\n      }\n\n      this.sendDialogue(playerId, nextNode)\n    } else {\n      // End dialogue\n      this.activeDialogues.delete(playerId)\n    }\n  }\n\n  private executeDialogueAction(playerId: string, questId: string, action: any): void {\n    switch (action.type) {\n      case 'complete_objective':\n        if (action.objectiveId) {\n          this.completeObjective(playerId, questId, action.objectiveId)\n        }\n        break\n      case 'give_item':\n        if (action.itemId && action.quantity) {\n          const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n          if (inventorySystem) {\n            ;(inventorySystem as any).addItem(playerId, action.itemId, action.quantity)\n          }\n        }\n        break\n      case 'teleport':\n        if (action.location) {\n          this.world.events.emit('player:teleport', {\n            playerId,\n            location: action.location,\n          })\n        }\n        break\n    }\n  }\n\n  // Event handlers for objective completion\n  private handleNpcKilled(data: any): void {\n    const { killerId, npcId } = data\n    this.checkKillObjectives(killerId, npcId)\n  }\n\n  private handleItemCollected(data: any): void {\n    const { playerId, itemId, quantity } = data\n    this.checkCollectionObjectives(playerId, itemId, quantity)\n  }\n\n  private handleSkillLevelUp(data: any): void {\n    const { playerId, skill, newLevel } = data\n    this.checkSkillObjectives(playerId, skill, newLevel)\n  }\n\n  private handleLocationReached(data: any): void {\n    const { playerId, locationId } = data\n    this.checkLocationObjectives(playerId, locationId)\n  }\n\n  private handleItemUsed(data: any): void {\n    const { playerId, itemId } = data\n    this.checkItemUseObjectives(playerId, itemId)\n  }\n\n  private checkKillObjectives(playerId: string, npcId: string): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    Object.entries(questComponent.activeQuests).forEach(([questId, progress]) => {\n      const questDef = getQuestDefinition(questId)\n      if (!questDef) {\n        return\n      }\n\n      questDef.objectives.forEach(obj => {\n        if (obj.type === ObjectiveType.KILL_NPCS && obj.target === npcId && !progress.objectives[obj.id]) {\n          // Track kill count (simplified - in real implementation would track counts)\n          this.completeObjective(playerId, questId, obj.id)\n        }\n      })\n    })\n  }\n\n  private checkCollectionObjectives(playerId: string, itemId: string, quantity: number): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    Object.entries(questComponent.activeQuests).forEach(([questId, progress]) => {\n      const questDef = getQuestDefinition(questId)\n      if (!questDef) {\n        return\n      }\n\n      questDef.objectives.forEach(obj => {\n        if (obj.type === ObjectiveType.COLLECT_ITEMS && obj.target === itemId && !progress.objectives[obj.id]) {\n          // Check if player has required quantity\n          const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n          if (inventorySystem) {\n            const hasItems = (inventorySystem as any).hasItem(playerId, itemId, obj.quantity || 1)\n            if (hasItems) {\n              this.completeObjective(playerId, questId, obj.id)\n            }\n          }\n        }\n      })\n    })\n  }\n\n  private checkSkillObjectives(playerId: string, skill: SkillType, newLevel: number): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    Object.entries(questComponent.activeQuests).forEach(([questId, progress]) => {\n      const questDef = getQuestDefinition(questId)\n      if (!questDef) {\n        return\n      }\n\n      questDef.objectives.forEach(obj => {\n        if (\n          obj.type === ObjectiveType.SKILL_LEVEL &&\n          obj.skillType === skill &&\n          newLevel >= (obj.level || 1) &&\n          !progress.objectives[obj.id]\n        ) {\n          this.completeObjective(playerId, questId, obj.id)\n        }\n      })\n    })\n  }\n\n  private checkLocationObjectives(playerId: string, locationId: string): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    Object.entries(questComponent.activeQuests).forEach(([questId, progress]) => {\n      const questDef = getQuestDefinition(questId)\n      if (!questDef) {\n        return\n      }\n\n      questDef.objectives.forEach(obj => {\n        if (obj.type === ObjectiveType.REACH_LOCATION && obj.target === locationId && !progress.objectives[obj.id]) {\n          this.completeObjective(playerId, questId, obj.id)\n        }\n      })\n    })\n  }\n\n  private checkItemUseObjectives(playerId: string, itemId: string): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    if (!questComponent) {\n      return\n    }\n\n    Object.entries(questComponent.activeQuests).forEach(([questId, progress]) => {\n      const questDef = getQuestDefinition(questId)\n      if (!questDef) {\n        return\n      }\n\n      questDef.objectives.forEach(obj => {\n        if (obj.type === ObjectiveType.USE_ITEM && obj.target === itemId && !progress.objectives[obj.id]) {\n          this.completeObjective(playerId, questId, obj.id)\n        }\n      })\n    })\n  }\n\n  private canPlayerStartQuest(playerId: string, questId: string): boolean {\n    const skillsSystem = this.world.systems.find(s => s.constructor.name === 'EnhancedSkillsSystem')\n    const equipmentSystem = this.world.systems.find(s => s.constructor.name === 'EquipmentSystem')\n\n    const getSkillLevel = (playerId: string, skill: SkillType) => {\n      return skillsSystem ? (skillsSystem as any).getSkillLevel(playerId, skill) : 1\n    }\n\n    const isQuestCompleted = (playerId: string, questId: string) => {\n      return this.isQuestCompleted(playerId, questId)\n    }\n\n    const getCombatLevel = (playerId: string) => {\n      return equipmentSystem ? (equipmentSystem as any).getCombatLevel(playerId) : 3\n    }\n\n    return canPlayerStartQuest(playerId, questId, getSkillLevel, isQuestCompleted, getCombatLevel)\n  }\n\n  private addJournalEntry(playerId: string, questId: string, entry: string): void {\n    const playerJournal = this.questJournal.get(playerId) || {}\n    if (!playerJournal[questId]) {\n      playerJournal[questId] = []\n    }\n\n    playerJournal[questId].push(`[${new Date().toLocaleTimeString()}] ${entry}`)\n    this.questJournal.set(playerId, playerJournal)\n  }\n\n  // Public query methods\n  public getQuestProgress(playerId: string, questId: string): QuestProgress | null {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return null\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    return questComponent?.activeQuests[questId] || null\n  }\n\n  public isQuestCompleted(playerId: string, questId: string): boolean {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return false\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    return questComponent?.completedQuests.includes(questId) || false\n  }\n\n  public getActiveQuests(playerId: string): QuestProgress[] {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return []\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    return questComponent ? Object.values(questComponent.activeQuests) : []\n  }\n\n  public getCompletedQuests(playerId: string): string[] {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return []\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    return questComponent?.completedQuests || []\n  }\n\n  public getQuestPoints(playerId: string): number {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return 0\n    }\n\n    const questComponent = entity.getComponent('quest') as QuestComponent\n    return questComponent?.questPoints || 0\n  }\n\n  public getAvailableQuests(playerId: string): QuestDefinition[] {\n    const skillsSystem = this.world.systems.find(s => s.constructor.name === 'EnhancedSkillsSystem')\n    const equipmentSystem = this.world.systems.find(s => s.constructor.name === 'EquipmentSystem')\n\n    const getSkillLevel = (playerId: string, skill: SkillType) => {\n      return skillsSystem ? (skillsSystem as any).getSkillLevel(playerId, skill) : 1\n    }\n\n    const isQuestCompleted = (playerId: string, questId: string) => {\n      return this.isQuestCompleted(playerId, questId)\n    }\n\n    const getCombatLevel = (playerId: string) => {\n      return equipmentSystem ? (equipmentSystem as any).getCombatLevel(playerId) : 3\n    }\n\n    return getAllAvailableQuests(playerId, getSkillLevel, isQuestCompleted, getCombatLevel)\n  }\n\n  public getQuestJournal(playerId: string): { [questId: string]: string[] } {\n    return this.questJournal.get(playerId) || {}\n  }\n\n  public getQuestComponent(playerId: string): QuestComponent | null {\n    const entity = this.world.getEntityById(playerId)\n    return entity ? (entity.getComponent('quest') as QuestComponent) : null\n  }\n\n  update(deltaTime: number): void {\n    // Quest system doesn't need regular updates - event driven\n  }\n\n  serialize(): any {\n    return {\n      activeDialogues: Object.fromEntries(this.activeDialogues),\n      questJournal: Object.fromEntries(this.questJournal),\n    }\n  }\n\n  deserialize(data: any): void {\n    if (data.activeDialogues) {\n      this.activeDialogues = new Map(Object.entries(data.activeDialogues))\n    }\n    if (data.questJournal) {\n      this.questJournal = new Map(Object.entries(data.questJournal))\n    }\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type {\n  SkillType,\n  StatsComponent,\n  Entity,\n  SkillData,\n  // PlayerEntity,\n  InventoryComponent,\n} from '../types'\n\ninterface XPDrop {\n  entityId: string\n  skill: SkillType\n  amount: number\n  timestamp: number\n}\n\ninterface SkillMilestone {\n  level: number\n  name: string\n  message: string\n}\n\nexport class SkillsSystem extends System {\n  private static readonly MAX_LEVEL = 99\n  private static readonly MAX_XP = 200_000_000 // 200M XP cap\n  private static readonly COMBAT_SKILLS: SkillType[] = [\n    'attack',\n    'strength',\n    'defense',\n    'ranged',\n    'magic',\n    'hitpoints',\n    'prayer',\n  ]\n\n  private xpTable: number[] = []\n  private xpDrops: XPDrop[] = []\n  private skillMilestones: Map<SkillType, SkillMilestone[]> = new Map()\n  private pendingSaves: Set<string> = new Set() // Track entities with pending saves\n  private saveTimer?: NodeJS.Timeout\n\n  constructor(world: World) {\n    super(world)\n    this.generateXPTable()\n    this.setupSkillMilestones()\n    this.setupEventListeners()\n    this.startAutoSave()\n  }\n\n  private setupEventListeners(): void {\n    // Listen for XP gain events from other systems\n    this.world.events.on('combat:kill', this.handleCombatKill.bind(this))\n    this.world.events.on('skill:action', this.handleSkillAction.bind(this))\n    this.world.events.on('quest:complete', this.handleQuestComplete.bind(this))\n    \n    // Listen for player events\n    this.world.events.on('player:disconnect', this.handlePlayerDisconnect.bind(this))\n    this.world.events.on('player:connect', this.handlePlayerConnect.bind(this))\n  }\n\n  private startAutoSave(): void {\n    // Save pending skill changes every 10 seconds\n    this.saveTimer = setInterval(() => {\n      this.savePendingSkills()\n    }, 10000)\n  }\n\n  update(_deltaTime: number): void {\n    // Clean up old XP drops (for UI)\n    const currentTime = Date.now()\n    this.xpDrops = this.xpDrops.filter(\n      drop => currentTime - drop.timestamp < 3000 // Keep for 3 seconds\n    )\n  }\n\n  /**\n   * Grant XP to a specific skill\n   */\n  public grantXP(entityId: string, skill: SkillType, amount: number): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    const skillData = stats[skill] as SkillData\n    if (!skillData) {\n      console.warn(`Skill ${skill} not found on entity ${entityId}`)\n      return\n    }\n\n    // Apply XP modifiers (e.g., from equipment, prayers, etc.)\n    const modifiedAmount = this.calculateModifiedXP(entity, skill, amount)\n\n    // Check XP cap\n    const oldXP = skillData.xp\n    const newXP = Math.min(oldXP + modifiedAmount, SkillsSystem.MAX_XP)\n    const actualGain = newXP - oldXP\n\n    if (actualGain <= 0) {\n      return\n    }\n\n    // Update XP\n    skillData.xp = newXP\n\n    // Check for level up\n    const oldLevel = skillData.level\n    const newLevel = this.getLevelForXP(newXP)\n\n    if (newLevel > oldLevel) {\n      this.handleLevelUp(entity, skill, oldLevel, newLevel)\n    }\n\n    // Update combat level if it's a combat skill\n    if (SkillsSystem.COMBAT_SKILLS.includes(skill)) {\n      this.updateCombatLevel(entity, stats)\n    }\n\n    // Update total level\n    this.updateTotalLevel(entity, stats)\n\n    // Add XP drop for UI\n    this.xpDrops.push({\n      entityId,\n      skill,\n      amount: actualGain,\n      timestamp: Date.now(),\n    })\n\n    // Mark entity for saving\n    this.pendingSaves.add(entityId)\n\n    // Emit XP gained event\n    this.world.events.emit('xp:gained', {\n      entityId,\n      skill,\n      amount: actualGain,\n      totalXP: newXP,\n      level: skillData.level,\n    })\n  }\n\n  /**\n   * Get the level for a given amount of XP\n   */\n  public getLevelForXP(xp: number): number {\n    for (let level = SkillsSystem.MAX_LEVEL; level >= 1; level--) {\n      if (xp >= this.xpTable[level]) {\n        return level\n      }\n    }\n    return 1\n  }\n\n  /**\n   * Get the XP required for a specific level\n   */\n  public getXPForLevel(level: number): number {\n    if (level < 1) {\n      return 0\n    }\n    if (level > SkillsSystem.MAX_LEVEL) {\n      return this.xpTable[SkillsSystem.MAX_LEVEL]\n    }\n    return this.xpTable[level]\n  }\n\n  /**\n   * Get XP remaining to next level\n   */\n  public getXPToNextLevel(skill: SkillData): number {\n    if (skill.level >= SkillsSystem.MAX_LEVEL) {\n      return 0\n    }\n\n    const nextLevelXP = this.getXPForLevel(skill.level + 1)\n    return nextLevelXP - skill.xp\n  }\n\n  /**\n   * Get XP progress percentage to next level\n   */\n  public getXPProgress(skill: SkillData): number {\n    if (skill.level >= SkillsSystem.MAX_LEVEL) {\n      return 100\n    }\n\n    const currentLevelXP = this.getXPForLevel(skill.level)\n    const nextLevelXP = this.getXPForLevel(skill.level + 1)\n    const progressXP = skill.xp - currentLevelXP\n    const requiredXP = nextLevelXP - currentLevelXP\n\n    return (progressXP / requiredXP) * 100\n  }\n\n  /**\n   * Check if entity meets skill requirements\n   */\n  public meetsRequirements(entity: Entity, requirements: Partial<Record<SkillType, number>>): boolean {\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return false\n    }\n\n    for (const [skill, requiredLevel] of Object.entries(requirements)) {\n      const skillData = stats[skill as SkillType] as SkillData\n      if (!skillData || skillData.level < requiredLevel) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Get combat level for an entity\n   */\n  public getCombatLevel(stats: StatsComponent): number {\n    // RuneScape combat level formula\n    const base = 0.25 * (stats.defense.level + stats.hitpoints.level + Math.floor(stats.prayer.level / 2))\n\n    const melee = 0.325 * (stats.attack.level + stats.strength.level)\n    const ranged = 0.325 * Math.floor(stats.ranged.level * 1.5)\n    const magic = 0.325 * Math.floor(stats.magic.level * 1.5)\n\n    return Math.floor(base + Math.max(melee, ranged, magic))\n  }\n\n  /**\n   * Get total level (sum of all skill levels)\n   */\n  public getTotalLevel(stats: StatsComponent): number {\n    let total = 0\n\n    // Sum all skill levels\n    const skills: SkillType[] = [\n      'attack',\n      'strength',\n      'defense',\n      'ranged',\n      'magic',\n      'prayer',\n      'hitpoints',\n      'mining',\n      'smithing',\n      'fishing',\n      'cooking',\n      'woodcutting',\n      'firemaking',\n      'crafting',\n      'herblore',\n      'agility',\n      'thieving',\n      'slayer',\n      'farming',\n      'runecrafting',\n      'hunter',\n      'construction',\n    ]\n\n    for (const skill of skills) {\n      const skillData = stats[skill] as SkillData\n      if (skillData) {\n        total += skillData.level\n      }\n    }\n\n    return total\n  }\n\n  /**\n   * Get total XP across all skills\n   */\n  public getTotalXP(stats: StatsComponent): number {\n    let total = 0\n\n    const skills: SkillType[] = [\n      'attack',\n      'strength',\n      'defense',\n      'ranged',\n      'magic',\n      'prayer',\n      'hitpoints',\n      'mining',\n      'smithing',\n      'fishing',\n      'cooking',\n      'woodcutting',\n      'firemaking',\n      'crafting',\n      'herblore',\n      'agility',\n      'thieving',\n      'slayer',\n      'farming',\n      'runecrafting',\n      'hunter',\n      'construction',\n    ]\n\n    for (const skill of skills) {\n      const skillData = stats[skill] as SkillData\n      if (skillData) {\n        total += skillData.xp\n      }\n    }\n\n    return total\n  }\n\n  /**\n   * Reset a skill to level 1\n   */\n  public resetSkill(entityId: string, skill: SkillType): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    const skillData = stats[skill] as SkillData\n    if (!skillData) {\n      return\n    }\n\n    skillData.level = 1\n    skillData.xp = 0\n\n    // Update combat level if needed\n    if (SkillsSystem.COMBAT_SKILLS.includes(skill)) {\n      this.updateCombatLevel(entity, stats)\n    }\n\n    this.updateTotalLevel(entity, stats)\n\n    this.world.events.emit('skill:reset', {\n      entityId,\n      skill,\n    })\n  }\n\n  /**\n   * Set skill level directly (for admin commands)\n   */\n  public setSkillLevel(entityId: string, skill: SkillType, level: number): void {\n    if (level < 1 || level > SkillsSystem.MAX_LEVEL) {\n      console.warn(`Invalid level ${level} for skill ${skill}`)\n      return\n    }\n\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    const skillData = stats[skill] as SkillData\n    if (!skillData) {\n      return\n    }\n\n    const oldLevel = skillData.level\n    skillData.level = level\n    skillData.xp = this.getXPForLevel(level)\n\n    if (level > oldLevel) {\n      this.handleLevelUp(entity, skill, oldLevel, level)\n    }\n\n    // Update combat level if needed\n    if (SkillsSystem.COMBAT_SKILLS.includes(skill)) {\n      this.updateCombatLevel(entity, stats)\n    }\n\n    this.updateTotalLevel(entity, stats)\n  }\n\n  private generateXPTable(): void {\n    this.xpTable = [0, 0] // Levels 0 and 1\n\n    for (let level = 2; level <= SkillsSystem.MAX_LEVEL; level++) {\n      const xp = Math.floor(level - 1 + 300 * Math.pow(2, (level - 1) / 7)) / 4\n      this.xpTable.push(Math.floor(this.xpTable[level - 1] + xp))\n    }\n  }\n\n  private setupSkillMilestones(): void {\n    // Define special milestones for each skill\n    const commonMilestones: SkillMilestone[] = [\n      { level: 50, name: 'Halfway', message: 'Halfway to mastery!' },\n      { level: 92, name: 'Half XP', message: 'Halfway to 99 in XP!' },\n      { level: 99, name: 'Mastery', message: 'Skill mastered!' },\n    ]\n\n    // Apply common milestones to all skills\n    const skills: SkillType[] = [\n      'attack',\n      'strength',\n      'defense',\n      'ranged',\n      'magic',\n      'prayer',\n      'hitpoints',\n      'mining',\n      'smithing',\n      'fishing',\n      'cooking',\n      'woodcutting',\n      'firemaking',\n      'crafting',\n      'herblore',\n      'agility',\n      'thieving',\n      'slayer',\n      'farming',\n      'runecrafting',\n      'hunter',\n      'construction',\n    ]\n\n    for (const skill of skills) {\n      this.skillMilestones.set(skill, [...commonMilestones])\n    }\n\n    // Add skill-specific milestones\n    const combatMilestones = this.skillMilestones.get('attack')!\n    combatMilestones.push(\n      { level: 40, name: 'Rune Weapons', message: 'You can now wield rune weapons!' },\n      { level: 60, name: 'Dragon Weapons', message: 'You can now wield dragon weapons!' }\n    )\n  }\n\n  private handleLevelUp(entity: Entity, skill: SkillType, oldLevel: number, newLevel: number): void {\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    const skillData = stats[skill] as SkillData\n    skillData.level = newLevel\n\n    // Check for milestones\n    const milestones = this.skillMilestones.get(skill) || []\n    for (const milestone of milestones) {\n      if (milestone.level > oldLevel && milestone.level <= newLevel) {\n        this.world.events.emit('skill:milestone', {\n          entityId: entity.id,\n          skill,\n          milestone,\n        })\n      }\n    }\n\n    // Special handling for HP level up\n    if (skill === 'hitpoints') {\n      const newMax = this.calculateMaxHitpoints(newLevel)\n      stats.hitpoints.max = newMax\n      // Heal to full on HP level up\n      stats.hitpoints.current = newMax\n    }\n\n    // Special handling for Prayer level up\n    if (skill === 'prayer') {\n      const newMax = newLevel\n      stats.prayer.maxPoints = newMax\n    }\n\n    this.world.events.emit('skill:levelup', {\n      entityId: entity.id,\n      skill,\n      oldLevel,\n      newLevel,\n      totalLevel: stats.totalLevel,\n    })\n  }\n\n  private calculateMaxHitpoints(level: number): number {\n    // RuneScape formula: 10 + level\n    return 10 + level\n  }\n\n  private updateCombatLevel(entity: Entity, stats: StatsComponent): void {\n    const oldCombatLevel = stats.combatLevel\n    const newCombatLevel = this.getCombatLevel(stats)\n\n    if (newCombatLevel !== oldCombatLevel) {\n      stats.combatLevel = newCombatLevel\n\n      this.world.events.emit('combat:levelChanged', {\n        entityId: entity.id,\n        oldLevel: oldCombatLevel,\n        newLevel: newCombatLevel,\n      })\n    }\n  }\n\n  private updateTotalLevel(entity: Entity, stats: StatsComponent): void {\n    const oldTotalLevel = stats.totalLevel\n    const newTotalLevel = this.getTotalLevel(stats)\n\n    if (newTotalLevel !== oldTotalLevel) {\n      stats.totalLevel = newTotalLevel\n\n      this.world.events.emit('total:levelChanged', {\n        entityId: entity.id,\n        oldLevel: oldTotalLevel,\n        newLevel: newTotalLevel,\n      })\n    }\n  }\n\n  private calculateModifiedXP(entity: Entity, skill: SkillType, baseXP: number): number {\n    let modifier = 1.0\n\n    // Check for XP-boosting equipment\n    const inventory = entity.getComponent('inventory') as any\n    if (inventory && inventory.equipment) {\n      // Example: Wisdom amulet gives 5% XP boost\n      if ((inventory.equipment.amulet as any)?.name === 'wisdom_amulet') {\n        modifier += 0.05\n      }\n    }\n\n    // Check for active XP events (if events system exists)\n    const eventsSystem = (this.world as any).getSystem?.('events')\n    if (eventsSystem && typeof eventsSystem.getActiveEvents === 'function') {\n      const activeEvents = eventsSystem.getActiveEvents() || []\n      for (const event of activeEvents) {\n        if (event.type === 'double_xp') {\n          modifier *= 2\n        } else if (event.type === 'bonus_xp' && event.skills?.includes(skill)) {\n          modifier += event.bonusRate || 0.5\n        }\n      }\n    }\n\n    return Math.floor(baseXP * modifier)\n  }\n\n  // Event handlers\n  private handleCombatKill(data: {\n    attackerId: string\n    targetId: string\n    damageDealt: number\n    attackStyle: string\n  }): void {\n    const { attackerId, targetId, damageDealt, attackStyle } = data\n\n    const target = this.world.entities.get(targetId)\n    if (!target) {\n      return\n    }\n\n    const targetStats = target.getComponent('stats') as any\n    if (!targetStats) {\n      return\n    }\n\n    // Calculate XP based on target's hitpoints\n    const baseXP = targetStats.hitpoints.max * 4 // 4 XP per hitpoint\n\n    // Grant XP based on attack style\n    switch (attackStyle) {\n      case 'accurate':\n        this.grantXP(attackerId, 'attack', baseXP)\n        break\n      case 'aggressive':\n        this.grantXP(attackerId, 'strength', baseXP)\n        break\n      case 'defensive':\n        this.grantXP(attackerId, 'defense', baseXP)\n        break\n      case 'controlled':\n        // Split XP between attack, strength, and defense\n        this.grantXP(attackerId, 'attack', baseXP / 3)\n        this.grantXP(attackerId, 'strength', baseXP / 3)\n        this.grantXP(attackerId, 'defense', baseXP / 3)\n        break\n      case 'ranged':\n        this.grantXP(attackerId, 'ranged', baseXP)\n        break\n      case 'magic':\n        this.grantXP(attackerId, 'magic', baseXP)\n        break\n    }\n\n    // Always grant HP XP\n    this.grantXP(attackerId, 'hitpoints', baseXP / 3)\n  }\n\n  private handleSkillAction(data: { entityId: string; skill: SkillType; xp: number }): void {\n    this.grantXP(data.entityId, data.skill, data.xp)\n  }\n\n  private handleQuestComplete(data: {\n    playerId: string\n    questId: string\n    rewards: {\n      xp?: Record<SkillType, number>\n    }\n  }): void {\n    if (!data.rewards.xp) {\n      return\n    }\n\n    for (const [skill, xp] of Object.entries(data.rewards.xp)) {\n      this.grantXP(data.playerId, skill as SkillType, xp)\n    }\n  }\n\n  // Public getters\n  public getXPDrops(): XPDrop[] {\n    return [...this.xpDrops]\n  }\n\n  public getSkillData(entityId: string, skill: SkillType): SkillData | null {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return null\n    }\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return null\n    }\n\n    return (stats[skill] as SkillData) || null\n  }\n\n  /**\n   * Load player skills from persistence\n   */\n  private async loadPlayerSkills(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      const skills = await persistence.loadPlayerSkills(playerId)\n      const entity = this.world.entities.get(playerId)\n      if (!entity) return\n\n      const stats = entity.getComponent('stats') as any\n      if (!stats) return\n\n      // Apply loaded skills\n      for (const skillData of skills) {\n        const skill = stats[skillData.type]\n        if (skill) {\n          skill.level = skillData.level\n          skill.xp = skillData.experience\n        }\n      }\n\n      // Update derived stats\n      this.updateCombatLevel(entity, stats)\n      this.updateTotalLevel(entity, stats)\n\n      console.log(`[SkillsSystem] Loaded skills for player ${playerId}`)\n    } catch (error) {\n      console.error(`[SkillsSystem] Failed to load skills for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save player skills to persistence\n   */\n  private async savePlayerSkills(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const entity = this.world.entities.get(playerId)\n    if (!entity) return\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) return\n\n    try {\n      const skills: Array<{ type: string; level: number; experience: number }> = []\n      \n      // Collect all skills\n      const skillTypes: SkillType[] = [\n        'attack', 'strength', 'defense', 'ranged', 'magic', 'prayer', 'hitpoints',\n        'mining', 'smithing', 'fishing', 'cooking', 'woodcutting', 'firemaking',\n        'crafting', 'herblore', 'agility', 'thieving', 'slayer', 'farming',\n        'runecrafting', 'hunter', 'construction'\n      ]\n\n      for (const skillType of skillTypes) {\n        const skill = stats[skillType]\n        if (skill) {\n          skills.push({\n            type: skillType,\n            level: skill.level,\n            experience: skill.xp\n          })\n        }\n      }\n\n      await persistence.savePlayerSkills(playerId, skills)\n      console.log(`[SkillsSystem] Saved skills for player ${playerId}`)\n    } catch (error) {\n      console.error(`[SkillsSystem] Failed to save skills for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save all pending skill updates\n   */\n  private async savePendingSkills(): Promise<void> {\n    if (this.pendingSaves.size === 0) return\n\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const toSave = Array.from(this.pendingSaves)\n    this.pendingSaves.clear()\n\n    for (const entityId of toSave) {\n      // Only save if it's a player entity\n      const entity = this.world.entities.get(entityId)\n      if (entity && entity.type === 'player') {\n        await this.savePlayerSkills(entityId)\n      }\n    }\n  }\n\n  /**\n   * Handle player connect event\n   */\n  private async handlePlayerConnect(data: { playerId: string }): Promise<void> {\n    await this.loadPlayerSkills(data.playerId)\n  }\n\n  /**\n   * Handle player disconnect event\n   */\n  private async handlePlayerDisconnect(data: { playerId: string }): Promise<void> {\n    // Save skills immediately on disconnect\n    await this.savePlayerSkills(data.playerId)\n    this.pendingSaves.delete(data.playerId)\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type { Entity, Vector3 } from '../../types'\n\n// Define types locally to avoid import issues\ninterface ItemStack {\n  itemId: number\n  quantity: number\n  metadata?: any\n}\n\ninterface ItemValue {\n  stack: ItemStack\n  value: number\n}\n\ninterface PlayerEntity extends Entity {\n  type: 'player'\n  username: string\n  displayName: string\n  accountType: 'normal' | 'ironman' | 'hardcore' | 'ultimate'\n  playTime: number\n  membershipStatus: boolean\n}\nimport { ItemRegistry } from './inventory/ItemRegistry'\n\nexport interface BankTab {\n  items: (ItemStack | null)[]\n  name?: string\n}\n\nexport interface BankAccount {\n  playerId: string\n  tabs: BankTab[]\n  pin?: string\n  pinAttempts: number\n  lastPinAttempt?: number\n  totalSlots: number\n  usedSlots: number\n}\n\nexport class BankingSystem extends System {\n  private static readonly DEFAULT_BANK_SIZE = 816 // 8 tabs * 102 slots per tab\n  private static readonly SLOTS_PER_TAB = 102\n  private static readonly DEFAULT_TABS = 8\n  private static readonly MAX_PIN_ATTEMPTS = 3\n  private static readonly PIN_LOCKOUT_TIME = 300000 // 5 minutes in milliseconds\n\n  private bankAccounts: Map<string, BankAccount> = new Map()\n  private bankBooths: Set<string> = new Set()\n  private playerBankOpen: Map<string, boolean> = new Map()\n  private itemRegistry: ItemRegistry\n  \n  // Persistence\n  private pendingSaves: Set<string> = new Set()\n  private saveTimer?: NodeJS.Timeout\n\n  constructor(world: World) {\n    super(world)\n    this.itemRegistry = new ItemRegistry()\n    this.itemRegistry.loadDefaults()\n    this.initializeBankBooths()\n    this.setupEventListeners()\n    this.startAutoSave()\n  }\n\n  private setupEventListeners(): void {\n    // Listen for player events for persistence\n    this.world.events.on('player:connect', this.handlePlayerConnect.bind(this))\n    this.world.events.on('player:disconnect', this.handlePlayerDisconnect.bind(this))\n  }\n\n  /**\n   * Start auto-save timer\n   */\n  private startAutoSave(): void {\n    // Save pending banks every 10 seconds\n    this.saveTimer = setInterval(() => {\n      this.savePendingBanks()\n    }, 10000)\n  }\n\n  /**\n   * Handle player connect event\n   */\n  private async handlePlayerConnect(data: { playerId: string }): Promise<void> {\n    await this.loadPlayerBank(data.playerId)\n  }\n\n  /**\n   * Handle player disconnect event\n   */\n  private async handlePlayerDisconnect(data: { playerId: string }): Promise<void> {\n    // Save bank immediately on disconnect\n    await this.savePlayerBank(data.playerId)\n    this.pendingSaves.delete(data.playerId)\n  }\n\n  /**\n   * Load player bank from persistence\n   */\n  private async loadPlayerBank(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      const bankItems = await persistence.loadPlayerBank(playerId)\n      \n      if (bankItems.length > 0) {\n        // Create account with loaded items\n        const account = this.getOrCreateAccount(playerId)\n        \n        // Clear existing items and rebuild from saved data\n        let usedSlots = 0\n        for (let tabIndex = 0; tabIndex < account.tabs.length; tabIndex++) {\n          account.tabs[tabIndex].items.fill(null)\n        }\n        \n        // Add items to first available slots\n        let currentTab = 0\n        let currentSlot = 0\n        \n        for (const item of bankItems) {\n          if (currentTab >= account.tabs.length) break\n          \n          account.tabs[currentTab].items[currentSlot] = {\n            itemId: item.itemId,\n            quantity: item.quantity\n          }\n          usedSlots++\n          \n          currentSlot++\n          if (currentSlot >= BankingSystem.SLOTS_PER_TAB) {\n            currentSlot = 0\n            currentTab++\n          }\n        }\n        \n        account.usedSlots = usedSlots\n        console.log(`[BankingSystem] Loaded bank for player ${playerId} with ${usedSlots} items`)\n      }\n    } catch (error) {\n      console.error(`[BankingSystem] Failed to load bank for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save player bank to persistence\n   */\n  private async savePlayerBank(playerId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const account = this.bankAccounts.get(playerId)\n    if (!account) return\n\n    try {\n      // Convert bank tabs to flat array for persistence\n      const items: Array<{ itemId: number; quantity: number }> = []\n      \n      for (const tab of account.tabs) {\n        for (const item of tab.items) {\n          if (item) {\n            items.push({\n              itemId: item.itemId,\n              quantity: item.quantity || 1\n            })\n          }\n        }\n      }\n\n      await persistence.savePlayerBank(playerId, items)\n      console.log(`[BankingSystem] Saved bank for player ${playerId} with ${items.length} items`)\n    } catch (error) {\n      console.error(`[BankingSystem] Failed to save bank for ${playerId}:`, error)\n    }\n  }\n\n  /**\n   * Save all pending banks\n   */\n  private async savePendingBanks(): Promise<void> {\n    if (this.pendingSaves.size === 0) return\n\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const toSave = Array.from(this.pendingSaves)\n    this.pendingSaves.clear()\n\n    for (const playerId of toSave) {\n      // Only save if account exists\n      if (this.bankAccounts.has(playerId)) {\n        await this.savePlayerBank(playerId)\n      }\n    }\n  }\n\n  /**\n   * Mark player for saving\n   */\n  private markForSave(playerId: string): void {\n    this.pendingSaves.add(playerId)\n  }\n\n  private initializeBankBooths(): void {\n    // Register default bank booth locations\n    this.bankBooths.add('bank_varrock_west')\n    this.bankBooths.add('bank_varrock_east')\n    this.bankBooths.add('bank_lumbridge')\n    this.bankBooths.add('bank_falador_west')\n    this.bankBooths.add('bank_falador_east')\n    this.bankBooths.add('bank_edgeville')\n  }\n\n  registerBankBooth(boothId: string): void {\n    this.bankBooths.add(boothId)\n  }\n\n  private getOrCreateAccount(playerId: string): BankAccount {\n    if (!this.bankAccounts.has(playerId)) {\n      const tabs: BankTab[] = []\n      for (let i = 0; i < BankingSystem.DEFAULT_TABS; i++) {\n        tabs.push({\n          items: new Array(BankingSystem.SLOTS_PER_TAB).fill(null),\n          name: i === 0 ? 'Main' : undefined,\n        })\n      }\n\n      this.bankAccounts.set(playerId, {\n        playerId,\n        tabs,\n        pinAttempts: 0,\n        totalSlots: BankingSystem.DEFAULT_BANK_SIZE,\n        usedSlots: 0,\n      })\n    }\n    return this.bankAccounts.get(playerId)!\n  }\n\n  openBank(player: PlayerEntity, bankBoothId: string): boolean {\n    if (!this.bankBooths.has(bankBoothId)) {\n      this.world.events.emit('bank:error', {\n        playerId: player.id,\n        error: 'Invalid bank booth',\n      })\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n\n    // Check PIN\n    if (account.pin && !this.isPinVerified(player.id)) {\n      this.world.events.emit('bank:pin_required', {\n        playerId: player.id,\n      })\n      return false\n    }\n\n    this.playerBankOpen.set(player.id, true)\n\n    this.world.events.emit('bank:opened', {\n      playerId: player.id,\n      bankData: this.getBankData(account),\n    })\n\n    return true\n  }\n\n  closeBank(player: PlayerEntity): void {\n    this.playerBankOpen.delete(player.id)\n\n    this.world.events.emit('bank:closed', {\n      playerId: player.id,\n    })\n  }\n\n  isBankOpen(playerId: string): boolean {\n    return this.playerBankOpen.get(playerId) || false\n  }\n\n  depositItem(player: PlayerEntity, inventorySlot: number, quantity?: number): boolean {\n    if (!this.isBankOpen(player.id)) {\n      return false\n    }\n\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    const item = inventory.items[inventorySlot]\n    if (!item) {\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n    const depositAmount = quantity || item.quantity || 1\n\n    // Check if we have space\n    const existingStack = this.findItemInBank(account, item.itemId)\n    if (!existingStack && account.usedSlots >= account.totalSlots) {\n      this.world.events.emit('bank:error', {\n        playerId: player.id,\n        error: 'Bank is full',\n      })\n      return false\n    }\n\n    // Find inventory system to remove item\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (!inventorySystem) {\n      return false\n    }\n\n    // Remove from inventory\n    const removed = (inventorySystem as any).removeItem(player.id, inventorySlot, depositAmount)\n    if (!removed) {\n      return false\n    }\n\n    // Add to bank\n    if (existingStack) {\n      existingStack.quantity = (existingStack.quantity || 1) + depositAmount\n    } else {\n      // Find first empty slot\n      for (const tab of account.tabs) {\n        const emptyIndex = tab.items.findIndex(slot => slot === null)\n        if (emptyIndex !== -1) {\n          tab.items[emptyIndex] = {\n            itemId: item.itemId,\n            quantity: depositAmount,\n          }\n          account.usedSlots++\n          break\n        }\n      }\n    }\n\n    // Mark for save\n    this.markForSave(player.id)\n\n    this.world.events.emit('bank:deposit', {\n      playerId: player.id,\n      itemId: item.itemId,\n      quantity: depositAmount,\n    })\n\n    return true\n  }\n\n  depositAll(player: PlayerEntity): void {\n    if (!this.isBankOpen(player.id)) {\n      return\n    }\n\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return\n    }\n\n    // Deposit all items from inventory\n    for (let i = inventory.items.length - 1; i >= 0; i--) {\n      if (inventory.items[i]) {\n        this.depositItem(player, i)\n      }\n    }\n  }\n\n  withdrawItem(player: PlayerEntity, tabIndex: number, slotIndex: number, quantity?: number): boolean {\n    if (!this.isBankOpen(player.id)) {\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n\n    if (tabIndex < 0 || tabIndex >= account.tabs.length) {\n      return false\n    }\n\n    const tab = account.tabs[tabIndex]\n    const item = tab.items[slotIndex]\n\n    if (!item) {\n      return false\n    }\n\n    const withdrawAmount = Math.min(quantity || item.quantity || 1, item.quantity || 1)\n\n    // Find inventory system to add item\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (!inventorySystem) {\n      return false\n    }\n\n    // Try to add to inventory\n    const added = (inventorySystem as any).addItem(player.id, item.itemId, withdrawAmount)\n    if (!added) {\n      this.world.events.emit('bank:error', {\n        playerId: player.id,\n        error: 'Inventory full',\n      })\n      return false\n    }\n\n    // Remove from bank\n    if (item.quantity && item.quantity > withdrawAmount) {\n      item.quantity -= withdrawAmount\n    } else {\n      tab.items[slotIndex] = null\n      account.usedSlots--\n    }\n\n    // Mark for save\n    this.markForSave(player.id)\n\n    this.world.events.emit('bank:withdraw', {\n      playerId: player.id,\n      itemId: item.itemId,\n      quantity: withdrawAmount,\n    })\n\n    return true\n  }\n\n  withdrawAll(player: PlayerEntity, tabIndex: number, slotIndex: number): boolean {\n    if (!this.isBankOpen(player.id)) {\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n    const tab = account.tabs[tabIndex]\n    const item = tab.items[slotIndex]\n\n    if (!item) {\n      return false\n    }\n\n    return this.withdrawItem(player, tabIndex, slotIndex, item.quantity)\n  }\n\n  searchBank(player: PlayerEntity, searchTerm: string): ItemStack[] {\n    const account = this.getOrCreateAccount(player.id)\n    const results: ItemStack[] = []\n    const lowerSearch = searchTerm.toLowerCase()\n\n    for (const tab of account.tabs) {\n      for (const item of tab.items) {\n        if (item) {\n          // In a real implementation, we'd search by item name\n          // For now, we'll just search by item ID\n          if (item.itemId.toString().includes(lowerSearch)) {\n            results.push({ ...item })\n          }\n        }\n      }\n    }\n\n    return results\n  }\n\n  moveItem(player: PlayerEntity, fromTab: number, fromSlot: number, toTab: number, toSlot: number): boolean {\n    if (!this.isBankOpen(player.id)) {\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n\n    // Validate indices\n    if (\n      fromTab < 0 ||\n      fromTab >= account.tabs.length ||\n      toTab < 0 ||\n      toTab >= account.tabs.length ||\n      fromSlot < 0 ||\n      fromSlot >= BankingSystem.SLOTS_PER_TAB ||\n      toSlot < 0 ||\n      toSlot >= BankingSystem.SLOTS_PER_TAB\n    ) {\n      return false\n    }\n\n    const fromItem = account.tabs[fromTab].items[fromSlot]\n    if (!fromItem) {\n      return false\n    }\n\n    const toItem = account.tabs[toTab].items[toSlot]\n\n    // Swap items\n    account.tabs[fromTab].items[fromSlot] = toItem\n    account.tabs[toTab].items[toSlot] = fromItem\n\n    // Mark for save\n    this.markForSave(player.id)\n\n    this.world.events.emit('bank:item_moved', {\n      playerId: player.id,\n      fromTab,\n      fromSlot,\n      toTab,\n      toSlot,\n    })\n\n    return true\n  }\n\n  setTabName(player: PlayerEntity, tabIndex: number, name: string): boolean {\n    if (!this.isBankOpen(player.id)) {\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n\n    if (tabIndex < 0 || tabIndex >= account.tabs.length) {\n      return false\n    }\n\n    account.tabs[tabIndex].name = name.substring(0, 20) // Limit name length\n\n    // Mark for save\n    this.markForSave(player.id)\n\n    this.world.events.emit('bank:tab_renamed', {\n      playerId: player.id,\n      tabIndex,\n      name: account.tabs[tabIndex].name,\n    })\n\n    return true\n  }\n\n  // PIN Management\n  setPin(player: PlayerEntity, pin: string): boolean {\n    if (pin.length !== 4 || !/^\\d{4}$/.test(pin)) {\n      this.world.events.emit('bank:error', {\n        playerId: player.id,\n        error: 'PIN must be 4 digits',\n      })\n      return false\n    }\n\n    const account = this.getOrCreateAccount(player.id)\n    account.pin = pin\n    account.pinAttempts = 0\n\n    this.world.events.emit('bank:pin_set', {\n      playerId: player.id,\n    })\n\n    return true\n  }\n\n  verifyPin(player: PlayerEntity, pin: string): boolean {\n    const account = this.getOrCreateAccount(player.id)\n\n    if (!account.pin) {\n      return true\n    }\n\n    // Check lockout\n    if (account.pinAttempts >= BankingSystem.MAX_PIN_ATTEMPTS) {\n      const timeSinceLastAttempt = Date.now() - (account.lastPinAttempt || 0)\n      if (timeSinceLastAttempt < BankingSystem.PIN_LOCKOUT_TIME) {\n        const remainingTime = Math.ceil((BankingSystem.PIN_LOCKOUT_TIME - timeSinceLastAttempt) / 1000)\n        this.world.events.emit('bank:error', {\n          playerId: player.id,\n          error: `PIN locked. Try again in ${remainingTime} seconds`,\n        })\n        return false\n      } else {\n        // Reset attempts after lockout\n        account.pinAttempts = 0\n      }\n    }\n\n    if (pin === account.pin) {\n      account.pinAttempts = 0\n      this.world.events.emit('bank:pin_verified', {\n        playerId: player.id,\n      })\n      return true\n    } else {\n      account.pinAttempts++\n      account.lastPinAttempt = Date.now()\n\n      const remainingAttempts = BankingSystem.MAX_PIN_ATTEMPTS - account.pinAttempts\n\n      this.world.events.emit('bank:pin_failed', {\n        playerId: player.id,\n        remainingAttempts,\n      })\n\n      return false\n    }\n  }\n\n  removePin(player: PlayerEntity, currentPin: string): boolean {\n    const account = this.getOrCreateAccount(player.id)\n\n    if (!account.pin) {\n      return true\n    }\n\n    if (currentPin !== account.pin) {\n      this.world.events.emit('bank:error', {\n        playerId: player.id,\n        error: 'Incorrect PIN',\n      })\n      return false\n    }\n\n    account.pin = undefined\n    account.pinAttempts = 0\n\n    this.world.events.emit('bank:pin_removed', {\n      playerId: player.id,\n    })\n\n    return true\n  }\n\n  private isPinVerified(_playerId: string): boolean {\n    // In a real implementation, this would track PIN verification per session\n    // For now, we'll assume PIN is always verified once entered\n    return true\n  }\n\n  // Helper methods\n  private findItemInBank(account: BankAccount, itemId: number): ItemStack | null {\n    for (const tab of account.tabs) {\n      for (const item of tab.items) {\n        if (item && item.itemId === itemId) {\n          return item\n        }\n      }\n    }\n    return null\n  }\n\n  private getBankData(account: BankAccount): any {\n    return {\n      tabs: account.tabs.map(tab => ({\n        name: tab.name,\n        items: tab.items,\n      })),\n      usedSlots: account.usedSlots,\n      totalSlots: account.totalSlots,\n    }\n  }\n\n  getBankValue(player: PlayerEntity): number {\n    const account = this.getOrCreateAccount(player.id)\n    let totalValue = 0\n\n    // Calculate total value using item registry\n    for (const tab of account.tabs) {\n      for (const item of tab.items) {\n        if (item) {\n          const itemDef = this.itemRegistry.get(item.itemId)\n          if (itemDef) {\n            // Use high alchemy value (item.value * 0.6) or shop value\n            const itemValue = Math.floor(itemDef.value * 0.6)\n            totalValue += itemValue * (item.quantity || 1)\n          }\n        }\n      }\n    }\n\n    return totalValue\n  }\n\n  getTotalItems(player: PlayerEntity): number {\n    const account = this.getOrCreateAccount(player.id)\n    let total = 0\n\n    for (const tab of account.tabs) {\n      for (const item of tab.items) {\n        if (item) {\n          total += item.quantity || 1\n        }\n      }\n    }\n\n    return total\n  }\n\n  update(_deltaTime: number): void {\n    // Banking system doesn't need regular updates\n  }\n\n  serialize(): any {\n    const data: any = {\n      bankAccounts: {},\n    }\n\n    for (const [playerId, account] of Array.from(this.bankAccounts)) {\n      data.bankAccounts[playerId] = {\n        ...account,\n        // Don't serialize PIN for security\n        pin: account.pin ? '****' : undefined,\n      }\n    }\n\n    return data\n  }\n\n  deserialize(data: any): void {\n    if (data.bankAccounts) {\n      for (const [playerId, accountData] of Object.entries(data.bankAccounts)) {\n        this.bankAccounts.set(playerId, accountData as BankAccount)\n      }\n    }\n  }\n\n  /**\n   * Calculate bank value (for death costs)\n   */\n  calculateBankValue(entityId: string): number {\n    const bank = this.bankAccounts.get(entityId)\n    if (!bank) {\n      return 0\n    }\n\n    let totalValue = 0\n\n    // Add up all item values\n    for (const tab of bank.tabs.values()) {\n      for (const stack of tab.items) {\n        if (stack) {\n          const itemDef = this.itemRegistry.get(stack.itemId)\n          if (itemDef) {\n            // Use high alchemy value (item.value * 0.6) or shop value\n            const itemValue = Math.floor(itemDef.value * 0.6)\n            totalValue += itemValue * stack.quantity\n          }\n        }\n      }\n    }\n\n    return totalValue\n  }\n\n  /**\n   * Get most valuable items (for death mechanics)\n   */\n  getMostValuableItems(entityId: string, count: number): ItemValue[] {\n    const bank = this.bankAccounts.get(entityId)\n    if (!bank) {\n      return []\n    }\n\n    const itemValues: ItemValue[] = []\n\n    // Collect all items with values\n    for (const tab of bank.tabs.values()) {\n      for (const stack of tab.items) {\n        if (stack) {\n          const itemDef = this.itemRegistry.get(stack.itemId)\n          if (itemDef) {\n            const itemValue = Math.floor(itemDef.value * 0.6)\n            itemValues.push({\n              stack,\n              value: itemValue * stack.quantity,\n            })\n          }\n        }\n      }\n    }\n\n    // Sort by value descending\n    itemValues.sort((a, b) => b.value - a.value)\n\n    return itemValues.slice(0, count)\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport { RPGEntity, ItemStack, InventoryComponent } from '../types/index'\n\nexport interface TradeOffer {\n  playerId: string\n  items: (ItemStack | null)[]\n  goldAmount: number\n  accepted: boolean\n}\n\nexport interface TradeSession {\n  id: string\n  player1Id: string\n  player2Id: string\n  offer1: TradeOffer\n  offer2: TradeOffer\n  status: 'pending' | 'first_screen' | 'second_screen' | 'completed' | 'cancelled'\n  createdAt: number\n  lastUpdate: number\n}\n\nexport class TradingSystem extends System {\n  private tradeSessions: Map<string, TradeSession> = new Map()\n  private playerTrades: Map<string, string> = new Map() // playerId -> sessionId\n\n  // Configuration\n  private readonly TRADE_TIMEOUT = 300000 // 5 minutes\n  private readonly TRADE_SLOTS = 28 // Same as inventory\n  private readonly MIN_TRADE_DISTANCE = 10 // tiles\n\n  constructor(world: World) {\n    super(world)\n  }\n\n  /**\n   * Initialize trade request\n   */\n  public requestTrade(requesterId: string, targetId: string): boolean {\n    // Check if players exist\n    const requester = this.world.entities.get(requesterId)\n    const target = this.world.entities.get(targetId)\n\n    if (!requester || !target) {\n      this.sendTradeMessage(requesterId, 'Player not found.')\n      return false\n    }\n\n    // Check if already in trade\n    if (this.playerTrades.has(requesterId)) {\n      this.sendTradeMessage(requesterId, 'You are already in a trade.')\n      return false\n    }\n\n    if (this.playerTrades.has(targetId)) {\n      this.sendTradeMessage(requesterId, 'That player is busy.')\n      return false\n    }\n\n    // Check distance\n    const distance = this.getDistance(requester as any, target as any)\n    if (distance > this.MIN_TRADE_DISTANCE) {\n      this.sendTradeMessage(requesterId, 'You are too far away to trade.')\n      return false\n    }\n\n    // Check if target is ironman\n    const targetType = (target as any).accountType\n    if (targetType === 'ironman' || targetType === 'hardcore_ironman') {\n      this.sendTradeMessage(requesterId, 'That player is an Iron Man and cannot trade.')\n      return false\n    }\n\n    // Send trade request\n    this.world.events.emit('trade:request', {\n      requesterId,\n      targetId,\n      timestamp: Date.now(),\n    })\n\n    this.sendTradeMessage(targetId, `${(requester as any).displayName || 'Player'} wishes to trade with you.`)\n\n    return true\n  }\n\n  /**\n   * Accept trade request\n   */\n  public acceptTradeRequest(accepterId: string, requesterId: string): boolean {\n    // Verify both players are free to trade\n    if (this.playerTrades.has(accepterId) || this.playerTrades.has(requesterId)) {\n      return false\n    }\n\n    // Create trade session\n    const sessionId = `trade_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    const session: TradeSession = {\n      id: sessionId,\n      player1Id: requesterId,\n      player2Id: accepterId,\n      offer1: {\n        playerId: requesterId,\n        items: new Array(this.TRADE_SLOTS).fill(null),\n        goldAmount: 0,\n        accepted: false,\n      },\n      offer2: {\n        playerId: accepterId,\n        items: new Array(this.TRADE_SLOTS).fill(null),\n        goldAmount: 0,\n        accepted: false,\n      },\n      status: 'first_screen',\n      createdAt: Date.now(),\n      lastUpdate: Date.now(),\n    }\n\n    this.tradeSessions.set(sessionId, session)\n    this.playerTrades.set(requesterId, sessionId)\n    this.playerTrades.set(accepterId, sessionId)\n\n    // Notify players\n    this.world.events.emit('trade:started', {\n      sessionId,\n      player1Id: requesterId,\n      player2Id: accepterId,\n    })\n\n    return true\n  }\n\n  /**\n   * Add item to trade offer\n   */\n  public offerItem(playerId: string, inventorySlot: number, quantity?: number): boolean {\n    const sessionId = this.playerTrades.get(playerId)\n    if (!sessionId) {\n      return false\n    }\n\n    const session = this.tradeSessions.get(sessionId)\n    if (!session || session.status !== 'first_screen') {\n      return false\n    }\n\n    // Get player's inventory\n    const player = this.world.entities.get(playerId)\n    const inventory = player?.getComponent('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const item = (inventory as any).items[inventorySlot]\n    if (!item) {\n      return false\n    }\n\n    // Get offer\n    const offer = session.player1Id === playerId ? session.offer1 : session.offer2\n\n    // Find empty slot in trade\n    const emptySlot = offer.items.findIndex(item => item === null)\n    if (emptySlot === -1) {\n      this.sendTradeMessage(playerId, 'Your trade offer is full.')\n      return false\n    }\n\n    // Calculate quantity\n    const offerQuantity = Math.min(quantity || item.quantity, item.quantity)\n\n    // Check if item is tradeable\n    const itemDef = this.getItemDefinition(item.itemId)\n    if (!itemDef || !itemDef.tradeable) {\n      this.sendTradeMessage(playerId, 'This item cannot be traded.')\n      return false\n    }\n\n    // Add to offer\n    offer.items[emptySlot] = {\n      itemId: item.itemId,\n      quantity: offerQuantity,\n    }\n\n    // Reset acceptances\n    session.offer1.accepted = false\n    session.offer2.accepted = false\n    session.lastUpdate = Date.now()\n\n    // Notify both players\n    this.notifyTradeUpdate(session)\n\n    return true\n  }\n\n  /**\n   * Remove item from trade offer\n   */\n  public removeOfferItem(playerId: string, tradeSlot: number): boolean {\n    const sessionId = this.playerTrades.get(playerId)\n    if (!sessionId) {\n      return false\n    }\n\n    const session = this.tradeSessions.get(sessionId)\n    if (!session || session.status !== 'first_screen') {\n      return false\n    }\n\n    const offer = session.player1Id === playerId ? session.offer1 : session.offer2\n\n    if (!offer.items[tradeSlot]) {\n      return false\n    }\n\n    // Remove item\n    offer.items[tradeSlot] = null\n\n    // Reset acceptances\n    session.offer1.accepted = false\n    session.offer2.accepted = false\n    session.lastUpdate = Date.now()\n\n    // Notify both players\n    this.notifyTradeUpdate(session)\n\n    return true\n  }\n\n  /**\n   * Accept current trade screen\n   */\n  public acceptTrade(playerId: string): boolean {\n    const sessionId = this.playerTrades.get(playerId)\n    if (!sessionId) {\n      return false\n    }\n\n    const session = this.tradeSessions.get(sessionId)\n    if (!session) {\n      return false\n    }\n\n    if (session.status === 'first_screen') {\n      // Accept first screen\n      const offer = session.player1Id === playerId ? session.offer1 : session.offer2\n      offer.accepted = true\n\n      // Check if both accepted\n      if (session.offer1.accepted && session.offer2.accepted) {\n        // Move to second screen\n        session.status = 'second_screen'\n        session.offer1.accepted = false\n        session.offer2.accepted = false\n        session.lastUpdate = Date.now()\n\n        this.world.events.emit('trade:second_screen', {\n          sessionId: session.id,\n        })\n      }\n    } else if (session.status === 'second_screen') {\n      // Accept second screen\n      const offer = session.player1Id === playerId ? session.offer1 : session.offer2\n      offer.accepted = true\n\n      // Check if both accepted\n      if (session.offer1.accepted && session.offer2.accepted) {\n        // Complete trade\n        return this.completeTrade(session)\n      }\n    }\n\n    this.notifyTradeUpdate(session)\n    return true\n  }\n\n  /**\n   * Cancel trade\n   */\n  public cancelTrade(playerId: string): boolean {\n    const sessionId = this.playerTrades.get(playerId)\n    if (!sessionId) {\n      return false\n    }\n\n    const session = this.tradeSessions.get(sessionId)\n    if (!session) {\n      return false\n    }\n\n    // Clean up\n    this.playerTrades.delete(session.player1Id)\n    this.playerTrades.delete(session.player2Id)\n    this.tradeSessions.delete(sessionId)\n\n    // Notify players\n    this.world.events.emit('trade:cancelled', {\n      sessionId: session.id,\n      cancelledBy: playerId,\n    })\n\n    this.sendTradeMessage(session.player1Id, 'Trade cancelled.')\n    this.sendTradeMessage(session.player2Id, 'Trade cancelled.')\n\n    return true\n  }\n\n  /**\n   * Complete the trade\n   */\n  private completeTrade(session: TradeSession): boolean {\n    const player1 = this.world.entities.get(session.player1Id)\n    const player2 = this.world.entities.get(session.player2Id)\n\n    if (!player1 || !player2) {\n      this.cancelTrade(session.player1Id)\n      return false\n    }\n\n    // Verify both players have space\n    if (!this.verifyTradeSpace(player1 as any, session.offer2 as any) || !this.verifyTradeSpace(player2 as any, session.offer1 as any)) {\n      this.sendTradeMessage(session.player1Id, 'Not enough inventory space.')\n      this.sendTradeMessage(session.player2Id, 'Not enough inventory space.')\n      return false\n    }\n\n    // Verify both players have the items\n    if (!this.verifyTradeItems(player1 as any, session.offer1 as any) || !this.verifyTradeItems(player2 as any, session.offer2 as any)) {\n      this.sendTradeMessage(session.player1Id, 'Trade items no longer available.')\n      this.sendTradeMessage(session.player2Id, 'Trade items no longer available.')\n      this.cancelTrade(session.player1Id)\n      return false\n    }\n\n    // Exchange items\n    this.exchangeItems(player1 as any, player2 as any, session.offer1, session.offer2)\n\n    // Clean up\n    this.playerTrades.delete(session.player1Id)\n    this.playerTrades.delete(session.player2Id)\n    this.tradeSessions.delete(session.id)\n\n    // Notify completion\n    this.world.events.emit('trade:completed', {\n      sessionId: session.id,\n      player1Id: session.player1Id,\n      player2Id: session.player2Id,\n    })\n\n    this.sendTradeMessage(session.player1Id, 'Trade successful.')\n    this.sendTradeMessage(session.player2Id, 'Trade successful.')\n\n    return true\n  }\n\n  /**\n   * Verify player has space for incoming items\n   */\n  private verifyTradeSpace(player: RPGEntity, incomingOffer: TradeOffer): boolean {\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    // Count empty slots\n    const emptySlots = inventory.items.filter(item => item === null).length\n\n    // Count incoming non-stackable items\n    let requiredSlots = 0\n    for (const item of incomingOffer.items) {\n      if (!item) {\n        continue\n      }\n\n      const itemDef = this.getItemDefinition(item.itemId)\n      if (!itemDef) {\n        continue\n      }\n\n      if (!itemDef.stackable) {\n        requiredSlots++\n      } else {\n        // Check if we already have this stackable\n        const existing = inventory.items.find(i => i?.itemId === item.itemId)\n        if (!existing) {\n          requiredSlots++\n        }\n      }\n    }\n\n    return emptySlots >= requiredSlots\n  }\n\n  /**\n   * Verify player has the items they're offering\n   */\n  private verifyTradeItems(player: RPGEntity, offer: TradeOffer): boolean {\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    // Check each offered item\n    for (const offeredItem of offer.items) {\n      if (!offeredItem) {\n        continue\n      }\n\n      let found = 0\n      for (const invItem of inventory.items) {\n        if (invItem?.itemId === offeredItem.itemId) {\n          found += invItem.quantity\n        }\n      }\n\n      if (found < offeredItem.quantity) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Exchange items between players\n   */\n  private exchangeItems(player1: RPGEntity, player2: RPGEntity, offer1: TradeOffer, offer2: TradeOffer): void {\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return\n    }\n\n    // Remove items from player1 and give to player2\n    for (const item of offer1.items) {\n      if (!item) {\n        continue\n      }\n      inventorySystem.removeItem(player1.id, item.itemId, item.quantity)\n      inventorySystem.addItem(player2.id, item.itemId, item.quantity)\n    }\n\n    // Remove items from player2 and give to player1\n    for (const item of offer2.items) {\n      if (!item) {\n        continue\n      }\n      inventorySystem.removeItem(player2.id, item.itemId, item.quantity)\n      inventorySystem.addItem(player1.id, item.itemId, item.quantity)\n    }\n  }\n\n  /**\n   * Update loop - clean up expired trades\n   */\n  public update(_delta: number): void {\n    const now = Date.now()\n\n    for (const [_sessionId, session] of this.tradeSessions) {\n      if (now - session.lastUpdate > this.TRADE_TIMEOUT) {\n        this.cancelTrade(session.player1Id)\n      }\n    }\n  }\n\n  /**\n   * Helper methods\n   */\n  private getDistance(entity1: RPGEntity, entity2: RPGEntity): number {\n    const pos1 = entity1.position\n    const pos2 = entity2.position\n\n    const dx = pos1.x - pos2.x\n    const dz = pos1.z - pos2.z\n\n    return Math.sqrt(dx * dx + dz * dz)\n  }\n\n  private getItemDefinition(itemId: number): any {\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return null\n    }\n\n    return inventorySystem.itemRegistry?.getItem(itemId)\n  }\n\n  private sendTradeMessage(playerId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      playerId,\n      message,\n      type: 'trade',\n    })\n  }\n\n  private notifyTradeUpdate(session: TradeSession): void {\n    this.world.events.emit('trade:updated', {\n      sessionId: session.id,\n      status: session.status,\n      offer1: session.offer1,\n      offer2: session.offer2,\n    })\n  }\n\n  /**\n   * Get active trade session for player\n   */\n  public getTradeSession(playerId: string): TradeSession | null {\n    const sessionId = this.playerTrades.get(playerId)\n    if (!sessionId) {\n      return null\n    }\n\n    return this.tradeSessions.get(sessionId) || null\n  }\n\n  /**\n   * Check if player is in trade\n   */\n  public isTrading(playerId: string): boolean {\n    return this.playerTrades.has(playerId)\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type { Vector3 } from '../types'\nimport { RPGEntity } from '../entities/RPGEntity'\n\nexport interface NavigationPath {\n  _entityId: string\n  waypoints: Vector3[]\n  currentWaypoint: number\n  speed: number\n  arrived: boolean\n  callback?: () => void\n}\n\nexport interface NavigationRequest {\n  _entityId: string\n  destination: Vector3\n  speed?: number\n  callback?: () => void\n}\n\n/**\n * Simple navigation system for direct movement without collision detection\n * This is a basic implementation that can be enhanced with pathfinding later\n */\nexport class NavigationSystem extends System {\n  private activePaths: Map<string, NavigationPath> = new Map()\n  private readonly DEFAULT_SPEED = 2 // units per second\n  private readonly ARRIVAL_THRESHOLD = 0.5 // distance to consider \"arrived\"\n\n  constructor(world: World) {\n    super(world)\n  }\n\n  override async init(_options: any): Promise<void> {\n    console.log('[NavigationSystem] Initializing...')\n  }\n\n  /**\n   * Navigate entity to destination\n   */\n  navigateTo(request: NavigationRequest): void {\n    const { _entityId, destination, speed = this.DEFAULT_SPEED, callback } = request\n\n    // Validate entity ID\n    if (!_entityId || typeof _entityId !== 'string') {\n      console.error(`[NavigationSystem] Invalid entity ID: ${_entityId}`)\n      if (callback) {\n        callback()\n      }\n      return\n    }\n\n    // Validate destination\n    if (\n      !destination ||\n      typeof destination.x !== 'number' ||\n      typeof destination.y !== 'number' ||\n      typeof destination.z !== 'number'\n    ) {\n      console.error(`[NavigationSystem] Invalid destination for entity ${_entityId}:`, destination)\n      if (callback) {\n        callback()\n      }\n      return\n    }\n\n    // Get entity\n    const entity = this.getEntity(_entityId)\n    if (!entity) {\n      console.error(`[NavigationSystem] Entity ${_entityId} not found`)\n      if (callback) {\n        callback()\n      }\n      return\n    }\n\n    // Get current position\n    const currentPosition = entity.position || entity.data?.position\n    if (!currentPosition) {\n      console.warn(`[NavigationSystem] Entity ${_entityId} has no position`)\n      return\n    }\n\n    const startPos: Vector3 = Array.isArray(currentPosition)\n      ? { x: currentPosition[0] || 0, y: currentPosition[1] || 0, z: currentPosition[2] || 0 }\n      : currentPosition\n\n    // For now, simple direct path (no pathfinding)\n    const waypoints = [startPos, destination]\n\n    // Create navigation path\n    const path: NavigationPath = {\n      _entityId,\n      waypoints,\n      currentWaypoint: 1, // Start moving to waypoint 1 (destination)\n      speed,\n      arrived: false,\n      callback,\n    }\n\n    this.activePaths.set(_entityId, path)\n\n    console.log(\n      `[NavigationSystem] Entity ${_entityId} navigating to [${destination.x}, ${destination.y}, ${destination.z}]`\n    )\n  }\n\n  /**\n   * Update navigation paths\n   */\n  override fixedUpdate(delta: number): void {\n    const deltaSeconds = delta / 1000\n\n    for (const [_entityId, path] of this.activePaths) {\n      if (path.arrived) {\n        continue\n      }\n\n      this.updatePath(path, deltaSeconds)\n    }\n\n    // Clean up completed paths\n    for (const [_entityId, path] of this.activePaths) {\n      if (path.arrived) {\n        this.activePaths.delete(_entityId)\n      }\n    }\n  }\n\n  /**\n   * Update a single navigation path\n   */\n  private updatePath(path: NavigationPath, deltaSeconds: number): void {\n    const entity = this.getEntity(path._entityId)\n    if (!entity) {\n      path.arrived = true\n      return\n    }\n\n    // Get current position\n    const currentPosition = entity.position || entity.data?.position\n    if (!currentPosition) {\n      path.arrived = true\n      return\n    }\n\n    const currentPos: Vector3 = Array.isArray(currentPosition)\n      ? { x: currentPosition[0] || 0, y: currentPosition[1] || 0, z: currentPosition[2] || 0 }\n      : currentPosition\n\n    // Get target waypoint\n    const targetWaypoint = path.waypoints[path.currentWaypoint]\n    if (!targetWaypoint) {\n      path.arrived = true\n      if (path.callback) {\n        path.callback()\n      }\n      return\n    }\n\n    // Calculate direction and distance\n    const direction = {\n      x: targetWaypoint.x - currentPos.x,\n      y: targetWaypoint.y - currentPos.y,\n      z: targetWaypoint.z - currentPos.z,\n    }\n\n    const distance = Math.sqrt(direction.x ** 2 + direction.y ** 2 + direction.z ** 2)\n\n    // Check if arrived at waypoint\n    if (distance <= this.ARRIVAL_THRESHOLD) {\n      path.currentWaypoint++\n\n      // Check if all waypoints reached\n      if (path.currentWaypoint >= path.waypoints.length) {\n        path.arrived = true\n        console.log(`[NavigationSystem] Entity ${path._entityId} arrived at destination`)\n\n        if (path.callback) {\n          path.callback()\n        }\n        return\n      }\n\n      // Continue to next waypoint\n      return\n    }\n\n    // Normalize direction\n    const normalizedDirection = {\n      x: direction.x / distance,\n      y: direction.y / distance,\n      z: direction.z / distance,\n    }\n\n    // Calculate movement this frame\n    const moveDistance = path.speed * deltaSeconds\n    const actualMoveDistance = Math.min(moveDistance, distance)\n\n    // Calculate new position\n    const newPosition = {\n      x: currentPos.x + normalizedDirection.x * actualMoveDistance,\n      y: currentPos.y + normalizedDirection.y * actualMoveDistance,\n      z: currentPos.z + normalizedDirection.z * actualMoveDistance,\n    }\n\n    // Update entity position\n    if (entity.position) {\n      entity.position = newPosition\n    } else if (entity.data?.position) {\n      if (Array.isArray(entity.data.position)) {\n        entity.data.position = [newPosition.x, newPosition.y, newPosition.z]\n      } else {\n        entity.data.position = newPosition\n      }\n    }\n\n    // Update Three.js node if available\n    if (entity.node) {\n      entity.node.position.set(newPosition.x, newPosition.y, newPosition.z)\n    }\n  }\n\n  /**\n   * Stop navigation for entity\n   */\n  stopNavigation(_entityId: string): void {\n    const path = this.activePaths.get(_entityId)\n    if (path) {\n      path.arrived = true\n      console.log(`[NavigationSystem] Stopped navigation for entity ${_entityId}`)\n    }\n  }\n\n  /**\n   * Check if entity is currently navigating\n   */\n  isNavigating(_entityId: string): boolean {\n    if (!_entityId || typeof _entityId !== 'string') {\n      console.warn(`[NavigationSystem] isNavigating called with invalid _entityId: ${_entityId}`)\n      return false\n    }\n\n    const path = this.activePaths.get(_entityId)\n    return path ? !path.arrived : false\n  }\n\n  /**\n   * Get distance between two positions\n   */\n  getDistance(pos1: Vector3, pos2: Vector3): number {\n    const dx = pos2.x - pos1.x\n    const dy = pos2.y - pos1.y\n    const dz = pos2.z - pos1.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  /**\n   * Get entity by ID with comprehensive fallback strategies\n   */\n  private getEntity(_entityId: string): RPGEntity | undefined {\n    if (!_entityId) {\n      console.error('[NavigationSystem] getEntity called with undefined/null _entityId')\n      return undefined\n    }\n\n    // Strategy 1: Try test world entities (Map-based)\n    if ((this.world as any).entities?.items) {\n      const testEntity = (this.world as any).entities.items.get(_entityId)\n      if (testEntity) {\n        return testEntity\n      }\n    }\n\n    // Strategy 2: Try production world entities\n    if (this.world.entities?.get) {\n      const prodEntity = this.world.entities.get(_entityId)\n      if (prodEntity && typeof prodEntity.getComponent === 'function') {\n        return prodEntity as unknown as RPGEntity\n      }\n    }\n\n    // Strategy 3: Try alternative entity storage patterns\n    if ((this.world as any).entityManager?.entities) {\n      const managerEntity = (this.world as any).entityManager.entities.get(_entityId)\n      if (managerEntity) {\n        return managerEntity\n      }\n    }\n\n    // Strategy 4: Try direct world entity lookup\n    if ((this.world as any)[_entityId]) {\n      const directEntity = (this.world as any)[_entityId]\n      if (directEntity && (directEntity.position || directEntity.data?.position)) {\n        return directEntity\n      }\n    }\n\n    console.warn(`[NavigationSystem] Entity ${_entityId} not found in any storage strategy`)\n    return undefined\n  }\n\n  override destroy(): void {\n    this.activePaths.clear()\n    super.destroy()\n  }\n}\n", "import { LootTable } from '../../types'\n\nexport class LootTableManager {\n  private lootTables: Map<string, LootTable> = new Map()\n\n  /**\n   * Register a loot table\n   */\n  register(table: LootTable): void {\n    this.lootTables.set(table.id, table)\n    console.log(`[LootTableManager] Registered loot table: ${table.name}`)\n  }\n\n  /**\n   * Get a loot table by ID\n   */\n  get(id: string): LootTable | undefined {\n    return this.lootTables.get(id)\n  }\n\n  /**\n   * Check if a loot table exists\n   */\n  has(id: string): boolean {\n    return this.lootTables.has(id)\n  }\n\n  /**\n   * Get all registered loot tables\n   */\n  getAll(): LootTable[] {\n    return Array.from(this.lootTables.values())\n  }\n\n  /**\n   * Remove a loot table\n   */\n  remove(id: string): boolean {\n    return this.lootTables.delete(id)\n  }\n\n  /**\n   * Clear all loot tables\n   */\n  clear(): void {\n    this.lootTables.clear()\n  }\n\n  /**\n   * Get the count of registered loot tables\n   */\n  get size(): number {\n    return this.lootTables.size\n  }\n}\n", "import { LootTable, LootDrop, RPGEntity, StatsComponent } from '../../types/index'\n\nexport class DropCalculator {\n  /**\n   * Calculate drops from a loot table\n   */\n  calculateDrops(lootTable: LootTable, _killer?: RPGEntity | null): LootDrop[] {\n    const drops: LootDrop[] = []\n\n    // Add always drops\n    for (const drop of lootTable.drops) {\n      if (drop.rarity === 'always') {\n        drops.push(this.createDrop(drop))\n      }\n    }\n\n    // Roll for other drops\n    const regularDrops = lootTable.drops.filter(d => d.rarity !== 'always')\n    if (regularDrops.length > 0) {\n      const rolled = this.rollWeightedDrop(regularDrops)\n      if (rolled) {\n        drops.push(this.createDrop(rolled))\n      }\n    }\n\n    // Check for rare drop table access\n    if (lootTable.rareDropTable && Math.random() < 0.01) {\n      // 1% chance\n      // Would roll on rare drop table here\n      console.log('[DropCalculator] Rare drop table access!')\n    }\n\n    return drops\n  }\n\n  /**\n   * Roll for a weighted drop\n   */\n  private rollWeightedDrop(drops: LootDrop[]): LootDrop | null {\n    const totalWeight = drops.reduce((sum, drop) => sum + drop.weight, 0)\n    if (totalWeight === 0) {\n      return null\n    }\n\n    let roll = Math.random() * totalWeight\n\n    for (const drop of drops) {\n      roll -= drop.weight\n      if (roll <= 0) {\n        // Check rarity chance\n        if (this.checkRarity(drop.rarity)) {\n          return drop\n        }\n        break\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Check if rarity roll succeeds\n   */\n  private checkRarity(rarity: string): boolean {\n    const rarityChances: Record<string, number> = {\n      common: 1.0,\n      uncommon: 0.25,\n      rare: 0.05,\n      very_rare: 0.01,\n      ultra_rare: 0.001,\n    }\n\n    const chance = rarityChances[rarity] || 1.0\n    return Math.random() < chance\n  }\n\n  /**\n   * Create a drop with rolled quantity\n   */\n  private createDrop(template: LootDrop): LootDrop {\n    // LootDrop already has quantity as a number, no need to roll\n    return {\n      itemId: template.itemId,\n      quantity: template.quantity,\n      weight: template.weight,\n      rarity: template.rarity,\n    }\n  }\n\n  /**\n   * Roll quantity within range (for future use with range-based drops)\n   */\n  // private rollQuantity(range: { min: number; max: number }): number {\n  //   if (range.min === range.max) return range.min;\n  //   return Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;\n  // }\n\n  /**\n   * Apply drop modifiers (e.g., ring of wealth)\n   */\n  applyModifiers(drops: LootDrop[], killer?: RPGEntity | null): LootDrop[] {\n    if (!killer) {\n      return drops\n    }\n\n    // Check for drop modifiers\n    const stats = killer.getComponent<StatsComponent>('stats')\n    if (!stats) {\n      return drops\n    }\n\n    // Apply drop modifiers including ring of wealth\n    return this.applyDropModifiers(drops, killer)\n  }\n\n  /**\n   * Apply drop modifiers (ring of wealth, etc.)\n   */\n  private applyDropModifiers(drops: LootDrop[], killer?: RPGEntity): LootDrop[] {\n    // Check for ring of wealth, etc.\n    if (killer) {\n      const hasRingOfWealth = this.hasRingOfWealth(killer)\n\n      if (hasRingOfWealth) {\n        // Ring of wealth effects:\n        // 1. Removes empty drops from rare drop table\n        drops = drops.filter(drop => drop.itemId !== 0)\n\n        // 2. Slightly improves chances for rare drops\n        drops = drops.map(drop => {\n          // Check if it's a rare drop (you might want to add rarity to ItemDrop)\n          const isRareDrop = this.isRareDrop(drop.itemId)\n          if (isRareDrop) {\n            // Add 1-2 extra quantity to rare drops occasionally\n            if (Math.random() < 0.1) {\n              // 10% chance\n              return {\n                ...drop,\n                quantity: drop.quantity + Math.floor(Math.random() * 2) + 1,\n              }\n            }\n          }\n          return drop\n        })\n      }\n\n      // Check for other drop modifiers\n      const hasLootingEnchant = this.hasLootingEnchantment(killer)\n      if (hasLootingEnchant) {\n        // Increase quantity of drops\n        drops = drops.map(drop => ({\n          ...drop,\n          quantity: Math.floor(drop.quantity * 1.2), // 20% increase\n        }))\n      }\n    }\n\n    return drops\n  }\n\n  /**\n   * Check if player has ring of wealth equipped\n   */\n  private hasRingOfWealth(entity: RPGEntity): boolean {\n    const inventory = entity.getComponent<any>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const ring = inventory.equipment?.ring\n    return ring && (ring.name === 'Ring of wealth' || ring.name === 'Ring of wealth (i)')\n  }\n\n  /**\n   * Check if player has looting enchantment\n   */\n  private hasLootingEnchantment(entity: RPGEntity): boolean {\n    const inventory = entity.getComponent<any>('inventory')\n    if (!inventory) {\n      return false\n    }\n\n    const weapon = inventory.equipment?.weapon\n    return weapon && weapon.enchantments?.includes('looting')\n  }\n\n  /**\n   * Check if item is considered a rare drop\n   */\n  private isRareDrop(itemId: number): boolean {\n    // Define rare item IDs (you might want to load this from config)\n    const rareItems = [\n      1249, // Dragon spear\n      4087, // Dragon platelegs\n      4585, // Dragon plateskirt\n      11840, // Dragon boots\n      6571, // Uncut onyx\n      2577, // Ranger boots\n      // Add more rare item IDs\n    ]\n\n    return rareItems.includes(itemId)\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport { LootTable, LootDrop, LootComponent, Vector3, RPGEntity, ItemDrop, LootEntry, ItemStack } from '../types/index'\nimport { LootTableManager } from './loot/LootTableManager'\nimport { DropCalculator } from './loot/DropCalculator'\nimport { ItemRegistry } from './inventory/ItemRegistry'\n\nexport class LootSystem extends System {\n  // Core management\n  private lootDrops: Map<string, LootComponent> = new Map()\n  private lootTableManager: LootTableManager\n  private dropCalculator: DropCalculator\n  private itemRegistry: ItemRegistry\n\n  // Configuration\n  private readonly LOOT_DESPAWN_TIME = 120000 // 2 minutes\n  private readonly LOOT_VISIBLE_TIME = 60000 // 1 minute private, then public\n  private readonly MAX_DROPS_PER_AREA = 100 // Performance limit\n\n  constructor(world: World) {\n    super(world)\n    this.lootTableManager = new LootTableManager()\n    this.dropCalculator = new DropCalculator()\n    this.itemRegistry = new ItemRegistry()\n    this.itemRegistry.loadDefaults()\n\n    // Register default loot tables\n    this.registerDefaultLootTables()\n  }\n\n  /**\n   * Initialize the system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[LootSystem] Initializing...')\n\n    // Listen for entity death\n    this.world.events.on('entity:death', (event: any) => {\n      this.handleEntityDeath(event.entityId, event.killerId)\n    })\n\n    // Listen for item drops\n    this.world.events.on('inventory:item-dropped', (event: any) => {\n      this.handleItemDrop(event)\n    })\n\n    // Listen for loot pickup attempts\n    this.world.events.on('player:pickup', (event: any) => {\n      this.handlePickupAttempt(event.playerId, event.lootId)\n    })\n  }\n\n  /**\n   * Update method\n   */\n  override update(_delta: number): void {\n    const now = Date.now()\n\n    // Update loot drops\n    for (const [lootId, loot] of Array.from(this.lootDrops)) {\n      // Check despawn\n      if (now - loot.spawnTime > this.LOOT_DESPAWN_TIME) {\n        this.despawnLoot(lootId)\n        continue\n      }\n\n      // Update visibility\n      if (loot.owner && now - loot.spawnTime > this.LOOT_VISIBLE_TIME) {\n        loot.owner = null // Make public\n        this.syncLoot(lootId)\n      }\n    }\n\n    // Clean up area if too many drops\n    this.enforceDropLimit()\n  }\n\n  /**\n   * Handle entity death and generate loot\n   */\n  private async handleEntityDeath(entityId: string, killerId: string | null): Promise<void> {\n    const entity = this.getEntity(entityId)\n    if (!entity) {\n      return\n    }\n\n    // Get loot table\n    const lootTableId = this.getLootTableId(entity)\n    if (!lootTableId) {\n      return\n    }\n\n    const lootTable = this.lootTableManager.get(lootTableId)\n    if (!lootTable) {\n      return\n    }\n\n    // Calculate drops\n    const itemDrops = this.generateDrops(entityId)\n\n    if (itemDrops.length === 0) {\n      return\n    }\n\n    // Convert ItemDrops to LootDrops\n    const drops: LootDrop[] = itemDrops.map(drop => ({\n      itemId: drop.itemId,\n      quantity: drop.quantity,\n      weight: 100,\n      rarity: 'common' as const,\n    }))\n\n    // Get death position\n    const position = entity.data.position || { x: 0, y: 0, z: 0 }\n\n    // Convert array position to Vector3 if needed\n    const vector3Position: Vector3 = Array.isArray(position)\n      ? { x: position[0] || 0, y: position[1] || 0, z: position[2] || 0 }\n      : position\n\n    // Create loot drop\n    await this.createLootDrop({\n      position: vector3Position,\n      items: drops,\n      owner: killerId,\n      source: entityId,\n    })\n  }\n\n  /**\n   * Handle manual item drop\n   */\n  private async handleItemDrop(event: {\n    entityId: string\n    itemId: number\n    quantity: number\n    position: Vector3\n  }): Promise<void> {\n    await this.createLootDrop({\n      position: event.position,\n      items: [\n        {\n          itemId: event.itemId,\n          quantity: event.quantity,\n          weight: 100,\n          rarity: 'always',\n        },\n      ],\n      owner: event.entityId,\n      source: event.entityId,\n    })\n  }\n\n  /**\n   * Create loot drop in world\n   */\n  private async createLootDrop(config: {\n    position: Vector3\n    items: LootDrop[]\n    owner: string | null\n    source: string\n  }): Promise<void> {\n    // Stack items if multiple of same type\n    const stackedItems = this.stackItems(config.items)\n\n    // Create loot entity ID\n    const lootId = `loot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    // Create loot component\n    const lootComponent: LootComponent = {\n      type: 'loot',\n      entity: null as any, // Loot doesn't have an entity yet\n      data: {},\n      items: stackedItems,\n      owner: config.owner,\n      spawnTime: Date.now(),\n      position: config.position,\n      source: config.source,\n    }\n\n    // Store in our map\n    this.lootDrops.set(lootId, lootComponent)\n\n    // Create actual world entity for the loot drop (for tests and world interaction)\n    const lootEntity = {\n      id: lootId,\n      type: 'loot',\n      position: config.position,\n      items: stackedItems,\n      owner: config.owner,\n      spawnTime: Date.now(),\n      source: config.source,\n      getComponent: (type: string) => {\n        if (type === 'loot') {\n          return lootComponent\n        }\n        return null\n      },\n    }\n\n    // Add to world entities\n    if (this.world.entities.items instanceof Map) {\n      this.world.entities.items.set(lootId, lootEntity as any)\n    } else if (this.world.entities.set) {\n      this.world.entities.set(lootId, lootEntity as any)\n    }\n\n    // Emit event\n    this.world.events.emit('loot:spawned', {\n      lootId,\n      position: config.position,\n      owner: config.owner,\n      items: stackedItems,\n    })\n\n    // Also emit as loot:dropped for tests - one event per item with randomized positions\n    for (let i = 0; i < stackedItems.length; i++) {\n      const item = stackedItems[i]\n      if (!item) {\n        continue\n      }\n\n      // Randomize position slightly for each drop\n      const dropPosition = {\n        x: config.position.x + (Math.random() - 0.5) * 2,\n        y: config.position.y,\n        z: config.position.z + (Math.random() - 0.5) * 2,\n      }\n\n      this.world.events.emit('loot:dropped', {\n        position: dropPosition,\n        itemId: item.itemId,\n        quantity: item.quantity,\n        owner: config.owner,\n        ownershipTimer: config.owner ? 60000 : 0,\n        despawnTimer: 180000,\n      })\n    }\n\n    console.log(`[LootSystem] Created loot drop with ${stackedItems.length} items`)\n  }\n\n  /**\n   * Handle pickup attempt\n   */\n  private async handlePickupAttempt(playerId: string, lootId: string): Promise<void> {\n    const loot = this.lootDrops.get(lootId)\n    const player = this.getEntity(playerId)\n    const lootEntity = this.getEntity(lootId)\n\n    if (!loot || !player || !lootEntity) {\n      return\n    }\n\n    // Check ownership\n    if (loot.owner && loot.owner !== playerId) {\n      const now = Date.now()\n      if (now - loot.spawnTime < this.LOOT_VISIBLE_TIME) {\n        this.sendMessage(playerId, 'This loot belongs to another player.')\n        return\n      }\n    }\n\n    // Check distance\n    const distance = this.calculateDistance(player, lootEntity)\n    if (distance > 2) {\n      this.sendMessage(playerId, \"You're too far away to pick that up.\")\n      return\n    }\n\n    // Try to add items to inventory\n    const inventorySystem = this.getInventorySystem()\n    if (!inventorySystem) {\n      return\n    }\n\n    const pickedUp: LootDrop[] = []\n    const remaining: LootDrop[] = []\n\n    for (const item of loot.items) {\n      const added = await inventorySystem.addItem(playerId, item.itemId, item.quantity)\n      if (added) {\n        pickedUp.push(item)\n      } else {\n        remaining.push(item)\n      }\n    }\n\n    // Update or remove loot\n    if (remaining.length === 0) {\n      // All items picked up\n      this.despawnLoot(lootId)\n    } else {\n      // Some items remain\n      loot.items = remaining\n      this.syncLoot(lootId)\n    }\n\n    // Notify player\n    if (pickedUp.length > 0) {\n      const itemNames = pickedUp.map(item => `${item.quantity}x ${this.getItemName(item.itemId)}`).join(', ')\n\n      this.sendMessage(playerId, `You picked up: ${itemNames}`)\n    }\n\n    // Emit event\n    this.emit('loot:pickup', {\n      playerId,\n      lootId,\n      items: pickedUp,\n    })\n  }\n\n  /**\n   * Despawn loot\n   */\n  private despawnLoot(lootId: string): void {\n    const loot = this.lootDrops.get(lootId)\n    if (!loot) {\n      return\n    }\n\n    // Remove from our map\n    this.lootDrops.delete(lootId)\n\n    // Emit event\n    this.world.events.emit('loot:despawned', {\n      lootId,\n      reason: 'timeout',\n    })\n  }\n\n  /**\n   * Stack similar items\n   */\n  private stackItems(items: LootDrop[]): LootDrop[] {\n    if (!items || !Array.isArray(items)) {\n      return []\n    }\n\n    const stacked: { [key: number]: LootDrop } = {}\n\n    for (const item of items) {\n      const existing = stacked[item.itemId]\n      if (existing) {\n        existing.quantity += item.quantity\n      } else {\n        stacked[item.itemId] = { ...item }\n      }\n    }\n\n    return Object.values(stacked)\n  }\n\n  /**\n   * Get loot table ID for entity\n   */\n  private getLootTableId(entity: RPGEntity): string | null {\n    // Check NPC component\n    const npc = entity.getComponent<any>('npc')\n    if (npc) {\n      // Check both lootTable and dropTable for compatibility\n      if (npc.lootTable) {\n        return npc.lootTable\n      }\n      if (npc.dropTable) {\n        return npc.dropTable\n      }\n    }\n\n    // Check entity type\n    switch (entity.data.type) {\n      case 'npc':\n        return `${entity.data.name?.toLowerCase().replace(/\\s+/g, '_')}_drops`\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Get loot model based on items\n   */\n  // private getLootModel(items: LootDrop[]): string {\n  //   // Priority: coins > equipment > resources > default\n  //   if (items.some(item => item.itemId === 1)) { // Coins\n  //     return 'loot_coins.glb';\n  //   }\n\n  //   if (items.some(item => item.itemId > 1000)) { // Equipment IDs\n  //     return 'loot_equipment.glb';\n  //   }\n\n  //   return 'loot_default.glb';\n  // }\n\n  /**\n   * Get item name\n   */\n  private getItemName(itemId: number): string {\n    // TODO: Get from item registry\n    const names: Record<number, string> = {\n      1: 'Coins',\n      1038: 'Red partyhat',\n      // Add more...\n    }\n\n    return names[itemId] || `Item ${itemId}`\n  }\n\n  /**\n   * Enforce drop limit per area\n   */\n  private enforceDropLimit(): void {\n    if (this.lootDrops.size <= this.MAX_DROPS_PER_AREA) {\n      return\n    }\n\n    // Find oldest drops\n    const drops = Array.from(this.lootDrops.entries()).sort((a, b) => a[1].spawnTime - b[1].spawnTime)\n\n    // Remove oldest drops\n    const toRemove = drops.slice(0, drops.length - this.MAX_DROPS_PER_AREA)\n    for (const [lootId] of toRemove) {\n      this.despawnLoot(lootId)\n    }\n  }\n\n  /**\n   * Sync loot state to clients\n   */\n  private syncLoot(lootId: string): void {\n    const loot = this.lootDrops.get(lootId)\n    if (!loot) {\n      return\n    }\n\n    this.emit('loot:sync', {\n      lootId,\n      owner: loot.owner,\n      items: loot.items,\n    })\n  }\n\n  /**\n   * Calculate distance between entities\n   */\n  private calculateDistance(entity1: RPGEntity, entity2: RPGEntity): number {\n    const pos1Raw = entity1.data.position || { x: 0, y: 0, z: 0 }\n    const pos2Raw = entity2.data.position || { x: 0, y: 0, z: 0 }\n\n    // Convert array positions to Vector3 if needed\n    const pos1: Vector3 = Array.isArray(pos1Raw)\n      ? { x: pos1Raw[0] || 0, y: pos1Raw[1] || 0, z: pos1Raw[2] || 0 }\n      : pos1Raw\n\n    const pos2: Vector3 = Array.isArray(pos2Raw)\n      ? { x: pos2Raw[0] || 0, y: pos2Raw[1] || 0, z: pos2Raw[2] || 0 }\n      : pos2Raw\n\n    const dx = pos1.x - pos2.x\n    const dy = pos1.y - pos2.y\n    const dz = pos1.z - pos2.z\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  /**\n   * Get entity from world\n   */\n  private getEntity(entityId: string): RPGEntity | undefined {\n    const entity = this.world.entities.items.get(entityId)\n    if (!entity || typeof entity.getComponent !== 'function') {\n      return undefined\n    }\n    return entity as unknown as RPGEntity\n  }\n\n  /**\n   * Get inventory system\n   */\n  private getInventorySystem(): any {\n    return this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n  }\n\n  /**\n   * Send message to player\n   */\n  private sendMessage(playerId: string, message: string): void {\n    this.emit('chat:system', {\n      targetId: playerId,\n      message,\n    })\n  }\n\n  /**\n   * Register default loot tables\n   */\n  private registerDefaultLootTables(): void {\n    // Goblin drops\n    this.lootTableManager.register({\n      id: 'goblin_drops',\n      name: 'Goblin Drops',\n      drops: [\n        {\n          itemId: 1, // Coins\n          quantity: 15,\n          weight: 100,\n          rarity: 'common',\n        },\n        {\n          itemId: 1173, // Bronze dagger\n          quantity: 1,\n          weight: 20,\n          rarity: 'uncommon',\n        },\n        {\n          itemId: 1139, // Bronze med helm\n          quantity: 1,\n          weight: 10,\n          rarity: 'uncommon',\n        },\n        {\n          itemId: 526, // Bones\n          quantity: 1,\n          weight: 100,\n          rarity: 'always',\n        },\n      ],\n      rareDropTable: false,\n    })\n\n    // Guard drops\n    this.lootTableManager.register({\n      id: 'guard_drops',\n      name: 'Guard Drops',\n      drops: [\n        {\n          itemId: 1, // Coins\n          quantity: 50,\n          weight: 100,\n          rarity: 'common',\n        },\n        {\n          itemId: 1203, // Iron dagger\n          quantity: 1,\n          weight: 15,\n          rarity: 'uncommon',\n        },\n        {\n          itemId: 526, // Bones\n          quantity: 1,\n          weight: 100,\n          rarity: 'always',\n        },\n      ],\n      rareDropTable: true,\n    })\n\n    // Rare drop table\n    this.lootTableManager.register({\n      id: 'rare_drop_table',\n      name: 'Rare Drop Table',\n      drops: [\n        {\n          itemId: 1038, // Red partyhat\n          quantity: 1,\n          weight: 1,\n          rarity: 'very_rare',\n        },\n        {\n          itemId: 985, // Tooth half of key\n          quantity: 1,\n          weight: 5,\n          rarity: 'rare',\n        },\n        {\n          itemId: 987, // Loop half of key\n          quantity: 1,\n          weight: 5,\n          rarity: 'rare',\n        },\n      ],\n      rareDropTable: false,\n    })\n  }\n\n  /**\n   * Register a loot table\n   */\n  public registerLootTable(table: LootTable): void {\n    this.lootTableManager.register(table)\n  }\n\n  /**\n   * Register the rare drop table\n   */\n  public registerRareDropTable(table: LootTable): void {\n    this.lootTableManager.register(table)\n  }\n\n  /**\n   * Generate drops for an entity\n   */\n  public generateDrops(entityId: string): ItemDrop[] {\n    const entity = this.getEntity(entityId)\n    if (!entity) {\n      return []\n    }\n\n    // Get loot table\n    const lootTableId = this.getLootTableId(entity)\n    if (!lootTableId) {\n      return []\n    }\n\n    const lootTable = this.lootTableManager.get(lootTableId)\n    if (!lootTable) {\n      return []\n    }\n\n    const drops: ItemDrop[] = []\n\n    // Process new format drops (primary format)\n    if (lootTable.drops && lootTable.drops.length > 0) {\n      for (const drop of lootTable.drops) {\n        // Roll for this drop based on rarity\n        let shouldDrop = false\n\n        switch (drop.rarity) {\n          case 'always':\n            shouldDrop = true\n            break\n          case 'common':\n            shouldDrop = Math.random() < 0.5 // 50% chance\n            break\n          case 'uncommon':\n            shouldDrop = Math.random() < 0.1 // 10% chance\n            break\n          case 'rare':\n            shouldDrop = Math.random() < 0.01 // 1% chance\n            break\n          case 'very_rare':\n            shouldDrop = Math.random() < 0.001 // 0.1% chance\n            break\n          default:\n            shouldDrop = Math.random() < drop.weight / 100 // Weight-based\n        }\n\n        if (shouldDrop) {\n          drops.push({\n            itemId: drop.itemId,\n            quantity: drop.quantity,\n            noted: false,\n          })\n        }\n      }\n    }\n\n    // Process always drops (backward compatibility)\n    else if (lootTable.alwaysDrops) {\n      for (const drop of lootTable.alwaysDrops) {\n        drops.push({\n          itemId: drop.itemId,\n          quantity: drop.quantity,\n          noted: drop.noted,\n        })\n      }\n    }\n\n    // Check rare drop table access FIRST (before other drops)\n    if (lootTable.rareTableAccess && Math.random() < lootTable.rareTableAccess) {\n      const rareTable = this.lootTableManager.get('rare_drop_table')\n      if (rareTable) {\n        // Try all drop categories from rare table\n        let rareDrop: ItemDrop | null = null\n\n        if (rareTable.commonDrops && rareTable.commonDrops.length > 0) {\n          rareDrop = this.rollFromEntries(rareTable.commonDrops)\n        }\n\n        if (!rareDrop && rareTable.uncommonDrops && rareTable.uncommonDrops.length > 0) {\n          rareDrop = this.rollFromEntries(rareTable.uncommonDrops)\n        }\n\n        if (!rareDrop && rareTable.rareDrops && rareTable.rareDrops.length > 0) {\n          rareDrop = this.rollFromEntries(rareTable.rareDrops)\n        }\n\n        if (rareDrop) {\n          drops.push(rareDrop)\n        }\n      }\n    }\n\n    // Process common drops\n    if (lootTable.commonDrops && lootTable.commonDrops.length > 0) {\n      const maxDrops = lootTable.maxDrops || 1\n      for (let i = 0; i < maxDrops; i++) {\n        const rolled = this.rollFromEntries(lootTable.commonDrops)\n        if (rolled) {\n          drops.push(rolled)\n        }\n      }\n    }\n\n    return drops\n  }\n\n  /**\n   * Roll from loot entries\n   */\n  private rollFromEntries(entries: LootEntry[]): ItemDrop | null {\n    const totalWeight = entries.reduce((sum, entry) => sum + entry.weight, 0)\n    if (totalWeight === 0) {\n      return null\n    }\n\n    let roll = Math.random() * totalWeight\n\n    for (const entry of entries) {\n      roll -= entry.weight\n      if (roll <= 0) {\n        const quantity = this.rollQuantity(entry.quantity)\n        return {\n          itemId: entry.itemId,\n          quantity,\n          noted: entry.noted,\n        }\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Roll quantity within range\n   */\n  private rollQuantity(range: { min: number; max: number }): number {\n    if (range.min === range.max) {\n      return range.min\n    }\n    // Math.random() returns [0, 1), but test mocks can return 1.0\n    const roll = Math.random()\n    if (roll >= 0.999999) {\n      return range.max\n    } // Handle mock returning 1.0\n    return Math.floor(roll * (range.max - range.min + 1)) + range.min\n  }\n\n  /**\n   * Get loot tables for testing\n   */\n  get lootTables() {\n    return this.lootTableManager\n  }\n\n  /**\n   * Get rare drop table for testing\n   */\n  get rareDropTable() {\n    return this.lootTableManager.get('rare_drop_table')\n  }\n\n  /**\n   * Calculate drop value\n   */\n  public calculateDropValue(drops: ItemDrop[]): number {\n    let totalValue = 0\n\n    for (const drop of drops) {\n      // Coins have value equal to quantity\n      if (drop.itemId === 995) {\n        totalValue += drop.quantity\n      } else {\n        // Other items have base value\n        totalValue += drop.quantity * 10 // Base value per item\n      }\n    }\n\n    return totalValue\n  }\n\n  /**\n   * Get total value of drops\n   */\n  private getDropsValue(drops: ItemStack[]): number {\n    let totalValue = 0\n\n    for (const drop of drops) {\n      const itemDef = this.itemRegistry.get(drop.itemId)\n      if (itemDef) {\n        // Use item value from registry\n        totalValue += itemDef.value * drop.quantity\n      }\n    }\n\n    return totalValue\n  }\n}\n", "import { computeBoundsTree, disposeBoundsTree, acceleratedRaycast } from 'three-mesh-bvh';\nimport * as THREE_ORIGINAL from 'three';\nimport * as SkeletonUtilsImport from 'three/examples/jsm/utils/SkeletonUtils.js';\nimport { Vector3Enhanced } from './Vector3Enhanced';\n\n// Install three-mesh-bvh - skip if classes not available\ntry {\n  if ((THREE_ORIGINAL as any).BufferGeometry) {\n    ;(THREE_ORIGINAL as any).BufferGeometry.prototype.computeBoundsTree = computeBoundsTree\n    ;(THREE_ORIGINAL as any).BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n  }\n  if ((THREE_ORIGINAL as any).Mesh) {\n    ;(THREE_ORIGINAL as any).Mesh.prototype.raycast = acceleratedRaycast;\n  }\n\n  // Add custom resize method to InstancedMesh\n  if ((THREE_ORIGINAL as any).InstancedMesh && (THREE_ORIGINAL as any).InstancedBufferAttribute) {\n    ;(THREE_ORIGINAL as any).InstancedMesh.prototype.resize = function (size: number) {\n      const prevSize = this.instanceMatrix.array.length / 16;\n      if (size <= prevSize) {\n        return;\n      }\n      const array = new Float32Array(size * 16);\n      array.set(this.instanceMatrix.array);\n      this.instanceMatrix = new (THREE_ORIGINAL as any).InstancedBufferAttribute(array, 16);\n      this.instanceMatrix.needsUpdate = true;\n    };\n  }\n} catch (e) {\n  console.warn('Failed to install three-mesh-bvh extensions:', e);\n}\n\n// Create enhanced THREE namespace with Vector3Enhanced\nconst THREE_ENHANCED = {\n  ...THREE_ORIGINAL,\n  Vector3: Vector3Enhanced,\n};\n\n// Re-export everything from three to preserve types\nexport * from 'three';\n\n// Override Vector3 export with enhanced version\nexport { Vector3Enhanced } from './Vector3Enhanced';\n\n// Also export as runtime values to prevent type-only inference\nexport { Vector3Enhanced as Vector3 } from './Vector3Enhanced';\nexport const Quaternion = (THREE_ORIGINAL as any).Quaternion;\nexport const Euler = (THREE_ORIGINAL as any).Euler;\nexport const Object3D = (THREE_ORIGINAL as any).Object3D;\nexport const Mesh = (THREE_ORIGINAL as any).Mesh;\nexport const SphereGeometry = (THREE_ORIGINAL as any).SphereGeometry;\nexport const MeshBasicMaterial = (THREE_ORIGINAL as any).MeshBasicMaterial;\nexport const Color = (THREE_ORIGINAL as any).Color;\nexport const Fog = (THREE_ORIGINAL as any).Fog;\nexport const Scene = (THREE_ORIGINAL as any).Scene;\nexport const Group = (THREE_ORIGINAL as any).Group;\nexport const Camera = (THREE_ORIGINAL as any).Camera;\nexport const WebGLRenderer = (THREE_ORIGINAL as any).WebGLRenderer;\nexport const TextureLoader = (THREE_ORIGINAL as any).TextureLoader;\nexport const InstancedMesh = (THREE_ORIGINAL as any).InstancedMesh;\nexport const InstancedBufferAttribute = (THREE_ORIGINAL as any).InstancedBufferAttribute;\nexport const Raycaster = (THREE_ORIGINAL as any).Raycaster;\nexport const Layers = (THREE_ORIGINAL as any).Layers;\nexport const Matrix4 = (THREE_ORIGINAL as any).Matrix4;\nexport const Material = (THREE_ORIGINAL as any).Material;\nexport const Texture = (THREE_ORIGINAL as any).Texture;\nexport const BufferGeometry = (THREE_ORIGINAL as any).BufferGeometry;\nexport const PlaneGeometry = (THREE_ORIGINAL as any).PlaneGeometry;\nexport const PerspectiveCamera = (THREE_ORIGINAL as any).PerspectiveCamera;\nexport const CanvasTexture = (THREE_ORIGINAL as any).CanvasTexture;\nexport const DataTexture = (THREE_ORIGINAL as any).DataTexture;\nexport const VideoTexture = (THREE_ORIGINAL as any).VideoTexture;\nexport const LinearFilter = (THREE_ORIGINAL as any).LinearFilter;\nexport const LinearSRGBColorSpace = (THREE_ORIGINAL as any).LinearSRGBColorSpace;\nexport const SRGBColorSpace = (THREE_ORIGINAL as any).SRGBColorSpace;\n\n// Create the THREE namespace object directly\nexport const THREE = {\n  // Spread all original THREE exports\n  ...THREE_ORIGINAL,\n  // Override with our enhanced Vector3\n  Vector3: Vector3Enhanced,\n  Vector3Enhanced,\n  // Add SkeletonUtils\n  SkeletonUtils: SkeletonUtilsImport,\n  // Ensure key missing exports are available\n  WebGLRenderer: (THREE_ORIGINAL as any).WebGLRenderer,\n  TextureLoader: (THREE_ORIGINAL as any).TextureLoader,\n  Raycaster: (THREE_ORIGINAL as any).Raycaster,\n  Layers: (THREE_ORIGINAL as any).Layers,\n  Matrix4: (THREE_ORIGINAL as any).Matrix4,\n  Material: (THREE_ORIGINAL as any).Material,\n  Texture: (THREE_ORIGINAL as any).Texture,\n  BufferGeometry: (THREE_ORIGINAL as any).BufferGeometry,\n  PlaneGeometry: (THREE_ORIGINAL as any).PlaneGeometry,\n  PerspectiveCamera: (THREE_ORIGINAL as any).PerspectiveCamera,\n  CanvasTexture: (THREE_ORIGINAL as any).CanvasTexture,\n  DataTexture: (THREE_ORIGINAL as any).DataTexture,\n  VideoTexture: (THREE_ORIGINAL as any).VideoTexture,\n  LinearFilter: (THREE_ORIGINAL as any).LinearFilter,\n  LinearSRGBColorSpace: (THREE_ORIGINAL as any).LinearSRGBColorSpace,\n  SRGBColorSpace: (THREE_ORIGINAL as any).SRGBColorSpace,\n  InstancedMesh: (THREE_ORIGINAL as any).InstancedMesh,\n  InstancedBufferAttribute: (THREE_ORIGINAL as any).InstancedBufferAttribute,\n} as any;\n\n// Also provide a namespace for type usage\nexport namespace THREE {\n  export type Vector3 = InstanceType<typeof Vector3Enhanced>\n  export type Vector3Enhanced = InstanceType<typeof Vector3Enhanced>\n  export type Vector3Type = InstanceType<typeof Vector3Enhanced>\n  // Use imported types from three directly - only the ones that exist\n  export type Quaternion = any // Use any to avoid property access issues\n  export type QuaternionType = any\n  export type Euler = any // Use any to avoid method access issues\n  export type EulerType = any\n  export type Matrix4 = any // Use any to avoid method access issues\n  export type Matrix4Type = any\n  export type Object3D = any // Use any to avoid method access issues\n  export type Object3DType = any\n  // For classes that are not directly exported as types, use any\n  export type Mesh = any\n  export type MeshType = any\n  export type SphereGeometry = any\n  export type SphereGeometryType = any\n  export type MeshBasicMaterial = any\n  export type MeshBasicMaterialType = any\n  export type Color = any\n  export type ColorType = any\n  export type Fog = any\n  export type FogType = any\n  export type Texture = any\n  export type TextureType = any\n  export type CanvasTexture = any\n  export type CanvasTextureType = any\n  export type Material = any\n  export type MaterialType = any\n  export type Camera = any\n  export type CameraType = any\n  export type PerspectiveCamera = any\n  export type PerspectiveCameraType = any\n  export type BufferGeometry = any\n  export type PlaneGeometry = any\n  export type WebGLRenderer = any\n  export type InstancedMeshType = any\n  export type InstancedBufferAttributeType = any\n  export type TextureLoader = any\n  export type Scene = any\n  export type SceneType = any\n  export type Group = any\n  export type GroupType = any\n  export type Raycaster = any\n  export type RaycasterType = any\n  export type Layers = any\n  export type LayersType = any\n  export type InstancedMesh = any\n}\n\n// Export the enhanced THREE namespace as default export\nexport default THREE_ENHANCED;\n\n// Extend THREE types to include our custom methods\ndeclare module 'three' {\n  interface InstancedMesh {\n    resize(size: number): void\n  }\n}\n", "import * as THREE_ORIGINAL from 'three';\n\n/**\n * This is an enhanced version of Vector3 to add the _onChange function\n * to match Quaternion\n *\n * Current version is from THREE v167\n *\n * The initial unmodified version was committed so you can diff what changed.\n */\n\n// Global PHYSX declaration\ndeclare const PHYSX: any;\n\ninterface Euler {\n  _x: number\n  _y: number\n  _z: number\n  _order?: string\n}\n\ninterface Camera {\n  matrixWorldInverse: { elements: number[] }\n  projectionMatrix: { elements: number[] }\n  projectionMatrixInverse: { elements: number[] }\n  matrixWorld: { elements: number[] }\n}\n\ninterface BufferAttribute {\n  getX(index: number): number\n  getY(index: number): number\n  getZ(index: number): number\n}\n\nlet _vector: Vector3Enhanced | null = null;\n\nexport class Vector3Enhanced {\n  _x: number;\n  _y: number;\n  _z: number;\n  readonly isVector3 = true as const;\n  readonly isVector3Enhanced = true as const;\n\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set x(value: number) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set y(value: number) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n\n  get z() {\n    return this._z;\n  }\n\n  set z(value: number) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n\n  set(x: number, y: number, z?: number): this {\n    if (z === undefined) {\n      z = this._z;\n    }\n\n    this._x = x;\n    this._y = y;\n    this._z = z;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setScalar(scalar: number): this {\n    this._x = scalar;\n    this._y = scalar;\n    this._z = scalar;\n    this._onChangeCallback();\n    return this;\n  }\n\n  setX(x: number): this {\n    this._x = x;\n    this._onChangeCallback();\n    return this;\n  }\n\n  setY(y: number): this {\n    this._y = y;\n    this._onChangeCallback();\n    return this;\n  }\n\n  setZ(z: number): this {\n    this._z = z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  setComponent(index: number, value: number): this {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      default:\n        throw new Error(`index is out of range: ${index}`);\n    }\n    return this;\n  }\n\n  getComponent(index: number): number {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      default:\n        throw new Error(`index is out of range: ${index}`);\n    }\n  }\n\n  clone(): Vector3Enhanced {\n    return new Vector3Enhanced(this._x, this._y, this._z);\n  }\n\n  copy(v: { x: number; y: number; z: number }): this {\n    this._x = v.x;\n    this._y = v.y;\n    this._z = v.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  add(v: { x: number; y: number; z: number }): this {\n    this._x += v.x;\n    this._y += v.y;\n    this._z += v.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  addScalar(s: number): this {\n    this._x += s;\n    this._y += s;\n    this._z += s;\n    this._onChangeCallback();\n    return this;\n  }\n\n  addVectors(a: { x: number; y: number; z: number }, b: { x: number; y: number; z: number }): this {\n    this._x = a.x + b.x;\n    this._y = a.y + b.y;\n    this._z = a.z + b.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  addScaledVector(v: { x: number; y: number; z: number }, s: number): this {\n    this._x += v.x * s;\n    this._y += v.y * s;\n    this._z += v.z * s;\n    this._onChangeCallback();\n    return this;\n  }\n\n  sub(v: { x: number; y: number; z: number }): this {\n    this._x -= v.x;\n    this._y -= v.y;\n    this._z -= v.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  subScalar(s: number): this {\n    this._x -= s;\n    this._y -= s;\n    this._z -= s;\n    this._onChangeCallback();\n    return this;\n  }\n\n  subVectors(a: { x: number; y: number; z: number }, b: { x: number; y: number; z: number }): this {\n    this._x = a.x - b.x;\n    this._y = a.y - b.y;\n    this._z = a.z - b.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  multiply(v: { x: number; y: number; z: number }): this {\n    this._x *= v.x;\n    this._y *= v.y;\n    this._z *= v.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  multiplyScalar(scalar: number): this {\n    this._x *= scalar;\n    this._y *= scalar;\n    this._z *= scalar;\n    this._onChangeCallback();\n    return this;\n  }\n\n  multiplyVectors(a: { x: number; y: number; z: number }, b: { x: number; y: number; z: number }): this {\n    this._x = a.x * b.x;\n    this._y = a.y * b.y;\n    this._z = a.z * b.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  applyEuler(euler: Euler): this {\n    return this.applyQuaternion(new (THREE_ORIGINAL as any).Quaternion().setFromEuler(euler as any));\n  }\n\n  applyAxisAngle(axis: { x: number; y: number; z: number }, angle: number): this {\n    return this.applyQuaternion(new (THREE_ORIGINAL as any).Quaternion().setFromAxisAngle(axis, angle));\n  }\n\n  applyMatrix3(m: { elements: number[] }): this {\n    const x = this._x,\n      y = this._y,\n      z = this._z;\n    const e = m.elements;\n\n    this._x = e[0]! * x + e[3]! * y + e[6]! * z;\n    this._y = e[1]! * x + e[4]! * y + e[7]! * z;\n    this._z = e[2]! * x + e[5]! * y + e[8]! * z;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  applyNormalMatrix(m: { elements: number[] }): this {\n    return this.applyMatrix3(m).normalize();\n  }\n\n  applyMatrix4(m: { elements: number[] }): this {\n    const x = this._x,\n      y = this._y,\n      z = this._z;\n    const e = m.elements;\n\n    const w = 1 / (e[3]! * x + e[7]! * y + e[11]! * z + e[15]!);\n\n    this._x = (e[0]! * x + e[4]! * y + e[8]! * z + e[12]!) * w;\n    this._y = (e[1]! * x + e[5]! * y + e[9]! * z + e[13]!) * w;\n    this._z = (e[2]! * x + e[6]! * y + e[10]! * z + e[14]!) * w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  applyQuaternion(q: { x: number; y: number; z: number; w: number }): this {\n    // quaternion q is assumed to have unit length\n\n    const vx = this._x,\n      vy = this._y,\n      vz = this._z;\n    const qx = q.x,\n      qy = q.y,\n      qz = q.z,\n      qw = q.w;\n\n    // t = 2 * cross( q.xyz, v );\n    const tx = 2 * (qy * vz - qz * vy);\n    const ty = 2 * (qz * vx - qx * vz);\n    const tz = 2 * (qx * vy - qy * vx);\n\n    // v + q.w * t + cross( q.xyz, t );\n    this._x = vx + qw * tx + qy * tz - qz * ty;\n    this._y = vy + qw * ty + qz * tx - qx * tz;\n    this._z = vz + qw * tz + qx * ty - qy * tx;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  project(camera: Camera): this {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n  }\n\n  unproject(camera: Camera): this {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n  }\n\n  transformDirection(m: { elements: number[] }): this {\n    // input: Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    const x = this._x,\n      y = this._y,\n      z = this._z;\n    const e = m.elements;\n\n    this._x = e[0]! * x + e[4]! * y + e[8]! * z;\n    this._y = e[1]! * x + e[5]! * y + e[9]! * z;\n    this._z = e[2]! * x + e[6]! * y + e[10]! * z;\n\n    // called by normalize?\n    // this._onChangeCallback();\n\n    return this.normalize();\n  }\n\n  divide(v: { x: number; y: number; z: number }): this {\n    this._x /= v.x;\n    this._y /= v.y;\n    this._z /= v.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  divideScalar(scalar: number): this {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  min(v: { x: number; y: number; z: number }): this {\n    this._x = Math.min(this._x, v.x);\n    this._y = Math.min(this._y, v.y);\n    this._z = Math.min(this._z, v.z);\n    this._onChangeCallback();\n    return this;\n  }\n\n  max(v: { x: number; y: number; z: number }): this {\n    this._x = Math.max(this._x, v.x);\n    this._y = Math.max(this._y, v.y);\n    this._z = Math.max(this._z, v.z);\n    this._onChangeCallback();\n    return this;\n  }\n\n  clamp(min: { x: number; y: number; z: number }, max: { x: number; y: number; z: number }): this {\n    // assumes min < max, componentwise\n\n    this._x = Math.max(min.x, Math.min(max.x, this._x));\n    this._y = Math.max(min.y, Math.min(max.y, this._y));\n    this._z = Math.max(min.z, Math.min(max.z, this._z));\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  clampScalar(minVal: number, maxVal: number): this {\n    this._x = Math.max(minVal, Math.min(maxVal, this._x));\n    this._y = Math.max(minVal, Math.min(maxVal, this._y));\n    this._z = Math.max(minVal, Math.min(maxVal, this._z));\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  clampLength(min: number, max: number): this {\n    const length = this.length();\n\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n  }\n\n  floor(): this {\n    this._x = Math.floor(this._x);\n    this._y = Math.floor(this._y);\n    this._z = Math.floor(this._z);\n    this._onChangeCallback();\n    return this;\n  }\n\n  ceil(): this {\n    this._x = Math.ceil(this._x);\n    this._y = Math.ceil(this._y);\n    this._z = Math.ceil(this._z);\n    this._onChangeCallback();\n    return this;\n  }\n\n  round(): this {\n    this._x = Math.round(this._x);\n    this._y = Math.round(this._y);\n    this._z = Math.round(this._z);\n    this._onChangeCallback();\n    return this;\n  }\n\n  roundToZero(): this {\n    this._x = Math.trunc(this._x);\n    this._y = Math.trunc(this._y);\n    this._z = Math.trunc(this._z);\n    this._onChangeCallback();\n    return this;\n  }\n\n  negate(): this {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  dot(v: { x: number; y: number; z: number }): number {\n    return this._x * v.x + this._y * v.y + this._z * v.z;\n  }\n\n  // TODO lengthSquared?\n\n  lengthSq(): number {\n    return this._x * this._x + this._y * this._y + this._z * this._z;\n  }\n\n  length(): number {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\n  }\n\n  manhattanLength(): number {\n    return Math.abs(this._x) + Math.abs(this._y) + Math.abs(this._z);\n  }\n\n  normalize(): this {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  setLength(length: number): this {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  lerp(v: { x: number; y: number; z: number }, alpha: number): this {\n    this._x += (v.x - this._x) * alpha;\n    this._y += (v.y - this._y) * alpha;\n    this._z += (v.z - this._z) * alpha;\n    this._onChangeCallback();\n    return this;\n  }\n\n  lerpVectors(v1: { x: number; y: number; z: number }, v2: { x: number; y: number; z: number }, alpha: number): this {\n    this._x = v1.x + (v2.x - v1.x) * alpha;\n    this._y = v1.y + (v2.y - v1.y) * alpha;\n    this._z = v1.z + (v2.z - v1.z) * alpha;\n    this._onChangeCallback();\n    return this;\n  }\n\n  cross(v: { x: number; y: number; z: number }): this {\n    return this.crossVectors(this, v);\n  }\n\n  crossVectors(a: { x: number; y: number; z: number }, b: { x: number; y: number; z: number }): this {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z;\n    const bx = b.x,\n      by = b.y,\n      bz = b.z;\n\n    this._x = ay * bz - az * by;\n    this._y = az * bx - ax * bz;\n    this._z = ax * by - ay * bx;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  projectOnVector(v: Vector3Enhanced | { x: number; y: number; z: number }): this {\n    const isEnhanced = 'lengthSq' in v && 'dot' in v;\n    const denominator = isEnhanced ? (v as Vector3Enhanced).lengthSq() : v.x * v.x + v.y * v.y + v.z * v.z;\n\n    if (denominator === 0) {\n      return this.set(0, 0, 0);\n    }\n\n    const scalar = isEnhanced ? (v as Vector3Enhanced).dot(this) / denominator : this.dot(v) / denominator;\n\n    return this.copy(v).multiplyScalar(scalar);\n  }\n\n  projectOnPlane(planeNormal: { x: number; y: number; z: number }): this {\n    if (!_vector) {\n      _vector = new Vector3Enhanced();\n    }\n    _vector.copy(this).projectOnVector(planeNormal);\n\n    return this.sub(_vector);\n  }\n\n  reflect(normal: { x: number; y: number; z: number }): this {\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n    if (!_vector) {\n      _vector = new Vector3Enhanced();\n    }\n    return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n  }\n\n  angleTo(v: { x: number; y: number; z: number }): number {\n    const vLengthSq = v.x * v.x + v.y * v.y + v.z * v.z;\n    const denominator = Math.sqrt(this.lengthSq() * vLengthSq);\n\n    if (denominator === 0) {\n      return Math.PI / 2;\n    }\n\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos((THREE_ORIGINAL as any).MathUtils.clamp(theta, -1, 1));\n  }\n\n  distanceTo(v: { x: number; y: number; z: number }): number {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  distanceToSquared(v: { x: number; y: number; z: number }): number {\n    const dx = this._x - v.x,\n      dy = this._y - v.y,\n      dz = this._z - v.z;\n\n    return dx * dx + dy * dy + dz * dz;\n  }\n\n  manhattanDistanceTo(v: { x: number; y: number; z: number }): number {\n    return Math.abs(this._x - v.x) + Math.abs(this._y - v.y) + Math.abs(this._z - v.z);\n  }\n\n  setFromSpherical(s: { radius: number; phi: number; theta: number }): this {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  }\n\n  setFromSphericalCoords(radius: number, phi: number, theta: number): this {\n    const sinPhiRadius = Math.sin(phi) * radius;\n\n    this._x = sinPhiRadius * Math.sin(theta);\n    this._y = Math.cos(phi) * radius;\n    this._z = sinPhiRadius * Math.cos(theta);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromCylindrical(c: { radius: number; theta: number; y: number }): this {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  }\n\n  setFromCylindricalCoords(radius: number, theta: number, y: number): this {\n    this._x = radius * Math.sin(theta);\n    this._y = y;\n    this._z = radius * Math.cos(theta);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromMatrixPosition(m: { elements: number[] }): this {\n    const e = m.elements;\n\n    this._x = e[12]!;\n    this._y = e[13]!;\n    this._z = e[14]!;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromMatrixScale(m: { elements: number[] }): this {\n    const sx = this.setFromMatrixColumn(m, 0).length();\n    const sy = this.setFromMatrixColumn(m, 1).length();\n    const sz = this.setFromMatrixColumn(m, 2).length();\n\n    this._x = sx;\n    this._y = sy;\n    this._z = sz;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromMatrixColumn(m: { elements: number[] }, index: number): this {\n    return this.fromArray(m.elements, index * 4);\n  }\n\n  setFromMatrix3Column(m: { elements: number[] }, index: number): this {\n    return this.fromArray(m.elements, index * 3);\n  }\n\n  setFromEuler(e: { _x: number; _y: number; _z: number } | any): this {\n    if ('_x' in e && '_y' in e && '_z' in e) {\n      this._x = e._x;\n      this._y = e._y;\n      this._z = e._z;\n    } else if ('x' in e && 'y' in e && 'z' in e) {\n      this._x = e.x;\n      this._y = e.y;\n      this._z = e.z;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromColor(c: { r: number; g: number; b: number }): this {\n    this._x = c.r;\n    this._y = c.g;\n    this._z = c.b;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  equals(v: { x: number; y: number; z: number }): boolean {\n    return v.x === this._x && v.y === this._y && v.z === this._z;\n  }\n\n  fromArray(array: ArrayLike<number>, offset = 0): this {\n    this._x = array[offset]!;\n    this._y = array[offset + 1]!;\n    this._z = array[offset + 2]!;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  // eslint-disable-next-line no-dupe-class-members\n  toArray(): [number, number, number]\n  // eslint-disable-next-line no-dupe-class-members\n  toArray<TArray extends ArrayLike<number>>(array: TArray, offset?: number): TArray\n  toArray(array?: ArrayLike<number>, offset?: number): ArrayLike<number> | [number, number, number] {\n    if (array === undefined) {\n      return [this._x, this._y, this._z];\n    }\n\n    if (offset === undefined) {\n      offset = 0;\n    }\n\n    ;(array as any)[offset] = this._x\n    ;(array as any)[offset + 1] = this._y\n    ;(array as any)[offset + 2] = this._z;\n\n    return array;\n  }\n\n  fromBufferAttribute(attribute: BufferAttribute, index: number): this {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  random(): this {\n    this._x = Math.random();\n    this._y = Math.random();\n    this._z = Math.random();\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  randomDirection(): this {\n    // https://mathworld.wolfram.com/SpherePointPicking.html\n\n    const theta = Math.random() * Math.PI * 2;\n    const u = Math.random() * 2 - 1;\n    const c = Math.sqrt(1 - u * u);\n\n    this._x = c * Math.cos(theta);\n    this._y = u;\n    this._z = c * Math.sin(theta);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  // PhysX extension methods\n  fromPxVec3(pxVec3: any): this {\n    this._x = pxVec3.x;\n    this._y = pxVec3.y;\n    this._z = pxVec3.z;\n    this._onChangeCallback();\n    return this;\n  }\n\n  toPxVec3(pxVec3?: any): any {\n    if (!pxVec3 && typeof PHYSX !== 'undefined') {\n      pxVec3 = new PHYSX.PxVec3();\n    }\n    if (pxVec3) {\n      pxVec3.x = this._x;\n      pxVec3.y = this._y;\n      pxVec3.z = this._z;\n    }\n    return pxVec3;\n  }\n\n  toPxExtVec3(pxExtVec3?: any): any {\n    if (!pxExtVec3 && typeof PHYSX !== 'undefined') {\n      pxExtVec3 = new PHYSX.PxExtendedVec3();\n    }\n    if (pxExtVec3) {\n      pxExtVec3.x = this._x;\n      pxExtVec3.y = this._y;\n      pxExtVec3.z = this._z;\n    }\n    return pxExtVec3;\n  }\n\n  toPxTransform(pxTransform: any): void {\n    if (pxTransform && pxTransform.p) {\n      pxTransform.p.x = this._x;\n      pxTransform.p.y = this._y;\n      pxTransform.p.z = this._z;\n    }\n  }\n\n  _onChange(callback: () => void): this {\n    this._onChangeCallback = callback;\n    return this;\n  }\n\n  _onChangeCallback() {}\n\n  *[Symbol.iterator]() {\n    yield this._x;\n    yield this._y;\n    yield this._z;\n  }\n}\n\n// export { Vector3 };\n", "import type { Vector3, SpawnArea } from '../../types'\n\n/**\n * Circular spawn area implementation\n */\nexport class CircularSpawnArea implements SpawnArea {\n  type = 'circle' as const\n  avoidOverlap: boolean\n  minSpacing: number\n  maxHeight: number\n\n  constructor(\n    private center: Vector3,\n    public radius: number,\n    minSpacing: number = 1,\n    avoidOverlap: boolean = true,\n    maxHeight: number = 0\n  ) {\n    this.minSpacing = minSpacing\n    this.avoidOverlap = avoidOverlap\n    this.maxHeight = maxHeight\n  }\n\n  /**\n   * Get a random position within the circular area\n   */\n  getRandomPosition(): Vector3 {\n    const angle = Math.random() * Math.PI * 2\n    const distance = Math.sqrt(Math.random()) * this.radius\n\n    const yOffset = this.maxHeight > 0 ? (Math.random() - 0.5) * this.maxHeight * 2 : 0\n\n    return {\n      x: this.center.x + Math.cos(angle) * distance,\n      y: this.center.y + yOffset,\n      z: this.center.z + Math.sin(angle) * distance,\n    }\n  }\n\n  /**\n   * Check if position is valid within the area\n   */\n  isValidPosition(position: Vector3): boolean {\n    const distance = this.distance(position, this.center)\n    return distance <= this.radius\n  }\n\n  /**\n   * Calculate distance between two positions\n   */\n  private distance(a: Vector3, b: Vector3): number {\n    const dx = a.x - b.x\n    const dy = a.y - b.y\n    const dz = a.z - b.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n}\n", "import type { Vector3 } from '../../types'\n\n/**\n * Spatial index for efficient range queries\n */\nexport class SpatialIndex<T extends { position: Vector3 }> {\n  private grid: Map<string, Set<T>>\n  private cellSize: number\n\n  constructor(cellSize: number = 50) {\n    this.grid = new Map()\n    this.cellSize = cellSize\n  }\n\n  /**\n   * Add item to spatial index\n   */\n  add(item: T): void {\n    const key = this.getGridKey(item.position)\n    if (!this.grid.has(key)) {\n      this.grid.set(key, new Set())\n    }\n    this.grid.get(key)!.add(item)\n  }\n\n  /**\n   * Remove item from spatial index\n   */\n  remove(item: T): void {\n    const key = this.getGridKey(item.position)\n    const cell = this.grid.get(key)\n    if (cell) {\n      cell.delete(item)\n      if (cell.size === 0) {\n        this.grid.delete(key)\n      }\n    }\n  }\n\n  /**\n   * Get all items within range of position\n   */\n  getInRange(position: Vector3, range: number): T[] {\n    const results: T[] = []\n    const cellRange = Math.ceil(range / this.cellSize)\n\n    const centerCell = this.getCellCoords(position)\n\n    for (let dx = -cellRange; dx <= cellRange; dx++) {\n      for (let dz = -cellRange; dz <= cellRange; dz++) {\n        const cellKey = `${centerCell.x + dx},${centerCell.z + dz}`\n        const cell = this.grid.get(cellKey)\n\n        if (cell) {\n          for (const item of cell) {\n            const distance = this.distance(position, item.position)\n            if (distance <= range) {\n              results.push(item)\n            }\n          }\n        }\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * Clear all items\n   */\n  clear(): void {\n    this.grid.clear()\n  }\n\n  /**\n   * Get total item count\n   */\n  get size(): number {\n    let count = 0\n    for (const cell of this.grid.values()) {\n      count += cell.size\n    }\n    return count\n  }\n\n  /**\n   * Get grid key for position\n   */\n  private getGridKey(position: Vector3): string {\n    const cell = this.getCellCoords(position)\n    return `${cell.x},${cell.z}`\n  }\n\n  /**\n   * Get cell coordinates for position\n   */\n  private getCellCoords(position: Vector3): { x: number; z: number } {\n    return {\n      x: Math.floor(position.x / this.cellSize),\n      z: Math.floor(position.z / this.cellSize),\n    }\n  }\n\n  /**\n   * Calculate distance between two positions\n   */\n  private distance(a: Vector3, b: Vector3): number {\n    const dx = a.x - b.x\n    const dy = a.y - b.y\n    const dz = a.z - b.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n}\n", "import type { World } from '../../../types'\nimport type { PlayerEntity, StatsComponent } from '../../types'\n\ninterface Spawner {\n  id: string\n  position: { x: number; y: number; z: number }\n  conditions?: SpawnConditions\n  activationRange: number\n}\n\ninterface SpawnConditions {\n  // Time-based conditions\n  timeOfDay?: {\n    start: number // 0-24\n    end: number\n  }\n\n  // Player conditions\n  minPlayers?: number\n  maxPlayers?: number\n  playerLevel?: {\n    min: number\n    max: number\n  }\n\n  // Custom conditions\n  customCondition?: (spawner: Spawner, world: World) => boolean\n}\n\n/**\n * Checks spawn conditions for spawners\n */\nexport class SpawnConditionChecker {\n  /**\n   * Check if all conditions are met for spawning\n   */\n  checkConditions(spawner: Spawner, world: World): boolean {\n    const conditions = spawner.conditions\n    if (!conditions) {\n      return true\n    }\n\n    // Check time of day\n    if (conditions.timeOfDay) {\n      const currentTime = this.getTimeOfDay(world)\n      const { start, end } = conditions.timeOfDay\n\n      if (start <= end) {\n        if (currentTime < start || currentTime > end) {\n          return false\n        }\n      } else {\n        // Handles overnight periods\n        if (currentTime < start && currentTime > end) {\n          return false\n        }\n      }\n    }\n\n    // Check player count\n    if (conditions.minPlayers !== undefined || conditions.maxPlayers !== undefined) {\n      const playerCount = this.getPlayersInRange(spawner, world).length\n\n      if (conditions.minPlayers !== undefined && playerCount < conditions.minPlayers) {\n        return false\n      }\n      if (conditions.maxPlayers !== undefined && playerCount > conditions.maxPlayers) {\n        return false\n      }\n    }\n\n    // Check player level\n    if (conditions.playerLevel) {\n      const players = this.getPlayersInRange(spawner, world)\n      if (players.length === 0) {\n        return false\n      }\n\n      const avgLevel = this.getAveragePlayerLevel(players)\n      const { min, max } = conditions.playerLevel\n\n      if (min !== undefined && avgLevel < min) {\n        return false\n      }\n      if (max !== undefined && avgLevel > max) {\n        return false\n      }\n    }\n\n    // Check custom condition\n    if (conditions.customCondition) {\n      if (!conditions.customCondition(spawner, world)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Get current time of day (0-24)\n   */\n  private getTimeOfDay(world: World): number {\n    // Check if world has time system\n    const timeSystem = (world as any).timeSystem\n    if (timeSystem && typeof timeSystem.getHour === 'function') {\n      return timeSystem.getHour()\n    }\n\n    // Check if world has day/night cycle\n    const dayNightCycle = (world as any).dayNightCycle\n    if (dayNightCycle && typeof dayNightCycle.getCurrentHour === 'function') {\n      return dayNightCycle.getCurrentHour()\n    }\n\n    // Fallback to real time\n    const now = new Date()\n    return now.getHours() + now.getMinutes() / 60\n  }\n\n  /**\n   * Get players in range of spawner\n   */\n  private getPlayersInRange(spawner: Spawner, world: World): PlayerEntity[] {\n    const players: PlayerEntity[] = []\n\n    // Get all entities in range\n    const entities = (world as any).getEntitiesInRange?.(spawner.position, spawner.activationRange) || []\n\n    for (const entity of entities) {\n      // Check both entity.type and entity.data.type for compatibility\n      if (entity.type === 'player' || entity.data?.type === 'player') {\n        players.push(entity as PlayerEntity)\n      }\n    }\n\n    return players\n  }\n\n  /**\n   * Get average level of players\n   */\n  private getAveragePlayerLevel(players: PlayerEntity[]): number {\n    if (players.length === 0) {\n      return 0\n    }\n\n    let totalLevel = 0\n    for (const player of players) {\n      const stats = player.getComponent?.('stats') as StatsComponent | undefined\n      if (stats?.combatLevel) {\n        totalLevel += stats.combatLevel\n      }\n    }\n\n    return totalLevel / players.length\n  }\n}\n", "import type { EntityData } from '../../types/core';\nimport type { Component, Vector3, Quaternion, World, Entity as IEntity } from '../../types';\nimport { THREE } from '../extras/three';\n\nexport class Entity implements IEntity {\n  world: World;\n  data: EntityData;\n  id: string;\n  name: string;\n  type: string;\n  node: any; // Object3D - using any to avoid type conflicts\n  components: Map<string, Component>;\n  velocity: Vector3;\n  isPlayer: boolean;\n\n  // Physics body reference\n  private rigidBody?: any;\n\n  constructor(world: World, data: EntityData, local?: boolean) {\n    this.world = world;\n    this.data = data;\n    this.id = data.id;\n    this.name = data.name || 'entity';\n    this.type = data.type || 'generic';\n    this.isPlayer = data.type === 'player';\n\n    // Initialize components map\n    this.components = new Map();\n\n    // Create Three.js node\n    this.node = new THREE.Object3D();\n    this.node.name = this.name;\n    this.node.userData.entity = this;\n\n    // Set initial transform\n    if (data.position) {\n      this.node.position.set(data.position[0], data.position[1], data.position[2]);\n    }\n    if (data.quaternion) {\n      this.node.quaternion.set(data.quaternion[0], data.quaternion[1], data.quaternion[2], data.quaternion[3]);\n    }\n    if (data.scale) {\n      this.node.scale.set(data.scale[0], data.scale[1], data.scale[2]);\n    }\n\n    // Initialize velocity\n    this.velocity = { x: 0, y: 0, z: 0 };\n\n    // Add to world scene\n    if (this.world.stage?.scene) {\n      this.world.stage.scene.add(this.node);\n    }\n\n    // Network sync for local entities\n    if (local && (this.world as any).network) {\n      ;(this.world as any).network.send('entityAdded', this.serialize());\n    }\n  }\n\n  // Transform getters\n  get position(): Vector3 {\n    return {\n      x: this.node.position.x,\n      y: this.node.position.y,\n      z: this.node.position.z,\n    };\n  }\n\n  set position(value: Vector3) {\n    this.node.position.set(value.x, value.y, value.z);\n    this.syncPhysicsTransform();\n  }\n\n  get rotation(): Quaternion {\n    return {\n      x: this.node.quaternion.x,\n      y: this.node.quaternion.y,\n      z: this.node.quaternion.z,\n      w: this.node.quaternion.w,\n    };\n  }\n\n  set rotation(value: Quaternion) {\n    this.node.quaternion.set(value.x, value.y, value.z, value.w);\n    this.syncPhysicsTransform();\n  }\n\n  get scale(): Vector3 {\n    return {\n      x: this.node.scale.x,\n      y: this.node.scale.y,\n      z: this.node.scale.z,\n    };\n  }\n\n  set scale(value: Vector3) {\n    this.node.scale.set(value.x, value.y, value.z);\n  }\n\n  // Component management\n  addComponent(type: string, data?: any): Component {\n    // Check if component already exists\n    if (this.components.has(type)) {\n      console.warn(`Entity ${this.id} already has component ${type}`);\n      return this.components.get(type)!;\n    }\n\n    // Create component\n    const component: Component = {\n      type,\n      entity: this,\n      data: data || {},\n    };\n\n    // Store component\n    this.components.set(type, component);\n\n    // Initialize component if it has init method\n    if (component.init) {\n      component.init();\n    }\n\n    // Handle special component types\n    this.handleSpecialComponent(type, component);\n\n    // Emit event\n    this.world.events?.emit('entity:component:added', {\n      entityId: this.id,\n      componentType: type,\n      component,\n    });\n\n    return component;\n  }\n\n  removeComponent(type: string): void {\n    const component = this.components.get(type);\n    if (!component) {\n      return;\n    }\n\n    // Destroy component if it has destroy method\n    if (component.destroy) {\n      component.destroy();\n    }\n\n    // Handle special component cleanup\n    this.handleSpecialComponentRemoval(type, component);\n\n    // Remove from map\n    this.components.delete(type);\n\n    // Emit event\n    this.world.events?.emit('entity:component:removed', {\n      entityId: this.id,\n      componentType: type,\n    });\n  }\n\n  getComponent<T extends Component>(type: string): T | null {\n    const component = this.components.get(type);\n    if (!component) {\n      return null;\n    }\n\n    // For compatibility with RPG systems that expect component data directly,\n    // return the data field if it exists, otherwise return the full component\n    if (component.data && typeof component.data === 'object') {\n      return component.data as T;\n    }\n\n    return component as T;\n  }\n\n  hasComponent(type: string): boolean {\n    return this.components.has(type);\n  }\n\n  // Physics methods\n  applyForce(force: Vector3): void {\n    if (!this.rigidBody) {\n      return;\n    }\n\n    if (this.world.physics?.world) {\n      const physicsForce = new this.world.physics.world.PxVec3(force.x, force.y, force.z);\n      this.rigidBody.addForce(physicsForce);\n      physicsForce.delete();\n    }\n  }\n\n  applyImpulse(impulse: Vector3): void {\n    if (!this.rigidBody) {\n      return;\n    }\n\n    if (this.world.physics?.world) {\n      const physicsImpulse = new this.world.physics.world.PxVec3(impulse.x, impulse.y, impulse.z);\n      this.rigidBody.addImpulse(physicsImpulse);\n      physicsImpulse.delete();\n    }\n  }\n\n  setVelocity(velocity: Vector3): void {\n    this.velocity = { ...velocity };\n\n    if (this.rigidBody && this.world.physics?.world) {\n      const physicsVelocity = new this.world.physics.world.PxVec3(velocity.x, velocity.y, velocity.z);\n      this.rigidBody.setLinearVelocity(physicsVelocity);\n      physicsVelocity.delete();\n    }\n  }\n\n  getVelocity(): Vector3 {\n    if (this.rigidBody && this.world.physics?.world) {\n      const vel = this.rigidBody.getLinearVelocity();\n      this.velocity = { x: vel.x, y: vel.y, z: vel.z };\n    }\n\n    return { ...this.velocity };\n  }\n\n  // Update methods\n  fixedUpdate?(delta: number): void {\n    // Update components with fixedUpdate\n    for (const component of this.components.values()) {\n      if (component.fixedUpdate) {\n        component.fixedUpdate(delta);\n      }\n    }\n  }\n\n  update?(delta: number): void {\n    // Update components with update\n    for (const component of this.components.values()) {\n      if (component.update) {\n        component.update(delta);\n      }\n    }\n  }\n\n  lateUpdate?(delta: number): void {\n    // Update components with lateUpdate\n    for (const component of this.components.values()) {\n      if (component.lateUpdate) {\n        component.lateUpdate(delta);\n      }\n    }\n  }\n\n  // Event handling\n  on(event: string, callback: Function): void {\n    // Use world event system with entity namespace\n    this.world.events?.emit(`entity:${this.id}:${event}`, callback as any);\n  }\n\n  off(event: string, callback: Function): void {\n    // Remove from world event system\n    this.world.events?.emit(`entity:${this.id}:${event}:off`, callback as any);\n  }\n\n  emit(event: string, data?: any): void {\n    // Emit through world event system\n    this.world.events?.emit(`entity:${this.id}:${event}`, data);\n  }\n\n  // Serialization\n  serialize(): EntityData {\n    const serialized: EntityData = {\n      id: this.id,\n      name: this.name,\n      type: this.type,\n      position: [this.position.x, this.position.y, this.position.z],\n      quaternion: [this.rotation.x, this.rotation.y, this.rotation.z, this.rotation.w],\n    };\n\n    // Add scale if present in original data or not default\n    if (this.data.scale || !this.isDefaultScale()) {\n      serialized.scale = [this.scale.x, this.scale.y, this.scale.z];\n    }\n\n    // Copy any additional data fields\n    for (const key in this.data) {\n      if (\n        key !== 'id' &&\n        key !== 'name' &&\n        key !== 'type' &&\n        key !== 'position' &&\n        key !== 'quaternion' &&\n        key !== 'scale' &&\n        this.data.hasOwnProperty(key)\n      ) {\n        ;(serialized as any)[key] = this.data[key];\n      }\n    }\n\n    return serialized;\n  }\n\n  // Modification from network/data\n  modify(data: Partial<EntityData>): void {\n    // Update data\n    Object.assign(this.data, data);\n\n    // Update transform\n    if (data.position) {\n      this.node.position.set(data.position[0], data.position[1], data.position[2]);\n    }\n    if (data.quaternion) {\n      this.node.quaternion.set(data.quaternion[0], data.quaternion[1], data.quaternion[2], data.quaternion[3]);\n    }\n    if (data.scale) {\n      this.node.scale.set(data.scale[0], data.scale[1], data.scale[2]);\n    }\n  }\n\n  // Network event handling\n  onEvent(version: number, name: string, data: any, networkId: string): void {\n    // Handle entity-specific network events\n    this.world.events?.emit(`entity:${this.id}:network:${name}`, {\n      version,\n      data,\n      networkId,\n    });\n  }\n\n  // Destruction\n  destroy(local?: boolean): void {\n    // Destroy all components\n    for (const type of Array.from(this.components.keys())) {\n      this.removeComponent(type);\n    }\n\n    // Remove from scene\n    if (this.node.parent) {\n      this.node.parent.remove(this.node);\n    }\n\n    // Clean up physics\n    if (this.rigidBody && this.world.physics?.world) {\n      // Remove rigid body from physics world\n      // Implementation depends on physics engine\n    }\n\n    // Network sync\n    if (local && (this.world as any).network) {\n      ;(this.world as any).network.send('entityRemoved', this.id);\n    }\n\n    // Emit destroy event\n    this.world.events?.emit('entity:destroyed', {\n      entityId: this.id,\n    });\n  }\n\n  // Helper methods\n  private syncPhysicsTransform(): void {\n    if (!this.rigidBody || !this.world.physics?.world) {\n      return;\n    }\n\n    // Sync Three.js transform to physics body\n    const pos = this.position;\n    const rot = this.rotation;\n\n    const transform = new this.world.physics.world.PxTransform(\n      new this.world.physics.world.PxVec3(pos.x, pos.y, pos.z),\n      new this.world.physics.world.PxQuat(rot.x, rot.y, rot.z, rot.w)\n    );\n\n    this.rigidBody.setGlobalPose(transform);\n\n    transform.p.delete();\n    transform.q.delete();\n    transform.delete();\n  }\n\n  private handleSpecialComponent(type: string, component: Component): void {\n    switch (type) {\n      case 'rigidbody':\n        this.createPhysicsBody(component);\n        break;\n      case 'collider':\n        this.updateCollider(component);\n        break;\n      case 'mesh':\n        this.updateMesh(component);\n        break;\n    }\n  }\n\n  private handleSpecialComponentRemoval(type: string, component: Component): void {\n    switch (type) {\n      case 'rigidbody':\n        this.removePhysicsBody();\n        break;\n      case 'mesh':\n        this.removeMesh(component);\n        break;\n    }\n  }\n\n  private createPhysicsBody(component: Component): void {\n    // Create physics rigid body based on component data\n    // Implementation depends on physics engine integration\n  }\n\n  private removePhysicsBody(): void {\n    if (this.rigidBody) {\n      // Remove from physics world\n      this.rigidBody = undefined;\n    }\n  }\n\n  private updateCollider(component: Component): void {\n    // Update physics collider shape\n    // Implementation depends on physics engine\n  }\n\n  private updateMesh(component: Component): void {\n    // Add/update Three.js mesh from component data\n    const meshData = component.data;\n    if (meshData.geometry && meshData.material) {\n      // Create or update mesh\n    }\n  }\n\n  private removeMesh(component: Component): void {\n    // Remove mesh from node\n    // Implementation depends on mesh management\n  }\n\n  private isDefaultRotation(): boolean {\n    return this.rotation.x === 0 && this.rotation.y === 0 && this.rotation.z === 0 && this.rotation.w === 1;\n  }\n\n  private isDefaultScale(): boolean {\n    return this.scale.x === 1 && this.scale.y === 1 && this.scale.z === 1;\n  }\n}\n", "import { Entity } from '../../core/entities/Entity'\nimport type { World } from '../../types/index.js'\nimport type { Component as RPGComponent } from '../types/index.js'\nimport type { Component } from '../../types/index.js'\n\n/**\n * RPG-specific entity that extends the base Entity class\n * with additional RPG functionality\n */\nexport class RPGEntity extends Entity {\n  components: Map<string, Component>\n  visualOverride?: {\n    color?: string\n    size?: { width: number; height: number; depth: number }\n    animation?: string\n  }\n\n  // Declare inherited properties for TypeScript\n  declare world: World\n  declare data: any\n\n  constructor(world: World, type: string, data: any) {\n    // Ensure data has required fields for Entity\n    const entityData = {\n      id: data.id || `${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      name: data.name || type,\n      position: data.position ? [data.position.x, data.position.y, data.position.z] : [0, 0, 0],\n      quaternion: data.quaternion || [0, 0, 0, 1],\n      ...data,\n    }\n\n    super(world, entityData)\n    this.components = new Map()\n  }\n\n  /**\n   * Add a component to the entity\n   */\n  override addComponent(type: string, data?: any): Component {\n    // If data already has a type property, use it directly\n    const component = {\n      type,\n      entity: this,\n      data: data || {},\n      entityId: this.data.id,\n      ...data\n    } as Component\n    this.components.set(type, component)\n    return component\n  }\n\n  /**\n   * Get a component by type\n   */\n  override getComponent<T extends Component>(type: string): T | null {\n    return (this.components.get(type) as T) || null\n  }\n\n  /**\n   * Remove a component by type\n   */\n  override removeComponent(type: string): void {\n    this.components.delete(type)\n  }\n\n  /**\n   * Check if entity has a component\n   */\n  override hasComponent(type: string): boolean {\n    return this.components.has(type)\n  }\n\n  /**\n   * Get all components\n   */\n  getAllComponents(): Component[] {\n    return Array.from(this.components.values())\n  }\n\n  /**\n   * Update entity - called every frame\n   */\n  override update(_delta: number): void {\n    // Update logic can be implemented here\n  }\n\n  /**\n   * Fixed update - called at fixed intervals\n   */\n  override fixedUpdate(_delta: number): void {\n    // Fixed update logic can be implemented here\n  }\n\n  /**\n   * Late update - called after all updates\n   */\n  override lateUpdate(_delta: number): void {\n    // Late update logic can be implemented here\n  }\n\n  /**\n   * Serialize entity data\n   */\n  override serialize(): any {\n    const data = super.serialize()\n\n    // Add component data\n    const componentData: any = {}\n    this.components.forEach((component, type) => {\n      componentData[type] = component\n    })\n\n    return {\n      ...data,\n      components: componentData,\n    }\n  }\n\n  override destroy(local?: boolean): void {\n    // Clean up components\n    for (const [type, _] of this.components) {\n      this.removeComponent(type)\n    }\n\n    // Call parent destroy\n    super.destroy(local)\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type { NPCEntity, PlayerEntity, Vector3, Entity } from '../types'\nimport { SpawnArea, SpawnerType, NPCType, NPCBehavior, NPCState, AttackType } from '../types'\nimport type { Vector3 as ThreeVector3 } from 'three'\nimport { THREE } from '../../core/extras/three.js'\nimport { CircularSpawnArea } from './spawning/CircularSpawnArea'\nimport { SpatialIndex } from './spawning/SpatialIndex'\nimport { SpawnConditionChecker } from './spawning/SpawnConditionChecker'\nimport { RPGEntity } from '../entities/RPGEntity'\nimport { VisualRepresentationSystem } from './VisualRepresentationSystem'\n\n// Re-export SpawnConditions from SpawnConditionChecker to avoid duplication\ntype SpawnConditions = {\n  // Time-based conditions\n  timeOfDay?: {\n    start: number // 0-24\n    end: number\n  }\n\n  // Player conditions\n  minPlayers?: number\n  maxPlayers?: number\n  playerLevel?: {\n    min: number\n    max: number\n  }\n\n  // Custom conditions\n  customCondition?: (spawner: any, world: World) => boolean\n}\n\ninterface Spawner {\n  id: string\n  type: SpawnerType\n  position: Vector3\n\n  // Spawn configuration\n  entityDefinitions: SpawnDefinition[]\n  maxEntities: number\n  respawnTime: number\n\n  // Activation\n  activationRange: number\n  deactivationRange: number\n  requiresLineOfSight: boolean\n\n  // Current state\n  activeEntities: Set<string>\n  lastSpawnTime: number\n  isActive: boolean\n\n  // Spawn area\n  spawnArea: SpawnArea\n\n  // Special conditions\n  conditions?: SpawnConditions\n}\n\ninterface SpawnDefinition {\n  entityType: string\n  entityId?: number // For NPCs\n  weight: number // Spawn probability weight\n  minLevel?: number // For scaling NPCs\n  maxLevel?: number\n  metadata?: any // Additional spawn data\n}\n\ninterface SpawnTask {\n  spawnerId: string\n  scheduledTime: number\n  priority: number\n}\n\n// Types for spawning system\ninterface _SpawnPoint {\n  id: string\n  entityId: string\n  minLevel?: number\n  respawnTime?: number\n  metadata?: any\n}\n\nexport class SpawningSystem extends System {\n  // Core components\n  private spawners: Map<string, Spawner> = new Map()\n  private activeSpawns: Map<string, string> = new Map() // entityId -> spawnerId\n  private spawnQueue: SpawnTask[] = []\n  private spatialIndex: SpatialIndex<Spawner>\n  private conditionChecker: SpawnConditionChecker\n  private visualSystem: VisualRepresentationSystem | null = null\n\n  // Configuration\n  private readonly DEFAULT_ACTIVATION_RANGE = 50\n  private readonly DEFAULT_DEACTIVATION_RANGE = 75\n  private readonly UPDATE_INTERVAL = 1000 // 1 second\n  private lastUpdateTime = 0\n\n  constructor(world: World) {\n    super(world)\n    this.spatialIndex = new SpatialIndex<Spawner>(50)\n    this.conditionChecker = new SpawnConditionChecker()\n  }\n\n  /**\n   * Initialize the system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[SpawningSystem] Initializing...')\n\n    // Get visual representation system\n    this.visualSystem = (this.world as any).getSystem?.('visualRepresentation')\n\n    // Listen for entity death\n    this.world.events.on('entity:death', (event: any) => {\n      this.handleEntityDeath(event.entityId)\n    })\n\n    // Listen for entity despawn\n    this.world.events.on('entity:despawned', (event: any) => {\n      this.handleEntityDespawn(event.entityId)\n    })\n\n    // Register default spawners\n    this.registerDefaultSpawners() // Enabled for RPG world\n  }\n\n  /**\n   * Fixed update cycle\n   */\n  override fixedUpdate(delta: number): void {\n    const now = Date.now()\n\n    // Throttle updates\n    if (now - this.lastUpdateTime < this.UPDATE_INTERVAL) {\n      return\n    }\n    this.lastUpdateTime = now\n\n    // Process spawn queue\n    this.processSpawnQueue(now)\n\n    // Update spawners\n    for (const [_id, spawner] of this.spawners) {\n      this.updateSpawner(spawner, delta)\n    }\n\n    // Clean up destroyed entities\n    this.cleanupDestroyedEntities()\n  }\n\n  /**\n   * Register a spawner\n   */\n  registerSpawner(config: Partial<Spawner> & { position: Vector3; type: SpawnerType }): string {\n    const id = `spawner_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    const spawner: Spawner = {\n      id,\n      type: config.type,\n      position: config.position,\n      entityDefinitions: config.entityDefinitions || [],\n      maxEntities: config.maxEntities || 1,\n      respawnTime: config.respawnTime || 30000,\n      activationRange: config.activationRange || this.DEFAULT_ACTIVATION_RANGE,\n      deactivationRange: config.deactivationRange || this.DEFAULT_DEACTIVATION_RANGE,\n      requiresLineOfSight: config.requiresLineOfSight || false,\n      activeEntities: new Set(),\n      lastSpawnTime: 0,\n      isActive: false,\n      spawnArea: config.spawnArea || new CircularSpawnArea(config.position, 5, 1),\n      conditions: config.conditions,\n    }\n\n    this.spawners.set(id, spawner)\n    this.spatialIndex.add(spawner)\n\n    console.log(`[SpawningSystem] Registered spawner ${id} at ${JSON.stringify(config.position)}`)\n\n    return id\n  }\n\n  /**\n   * Unregister a spawner\n   */\n  unregisterSpawner(spawnerId: string): void {\n    const spawner = this.spawners.get(spawnerId)\n    if (!spawner) {\n      return\n    }\n\n    // Despawn all active entities\n    for (const entityId of spawner.activeEntities) {\n      this.despawnEntity(entityId)\n    }\n\n    this.spawners.delete(spawnerId)\n    this.spatialIndex.remove(spawner)\n\n    console.log(`[SpawningSystem] Unregistered spawner ${spawnerId}`)\n  }\n\n  /**\n   * Spawn entity from spawner\n   */\n  spawnEntity(spawner: Spawner): RPGEntity | null {\n    // Select entity type to spawn\n    const definition = this.selectSpawnDefinition(spawner.entityDefinitions)\n    if (!definition) {\n      return null\n    }\n\n    // Get spawn position\n    const position = this.getSpawnPosition(spawner)\n    if (!position) {\n      return null\n    }\n\n    // Create entity\n    const entity = this.createEntity(definition, position, spawner)\n    if (!entity) {\n      return null\n    }\n\n    // Register spawn\n    this.registerSpawn(spawner, entity)\n\n    // Emit spawn event\n    this.world.events.emit('entity:spawned', {\n      entityId: (entity as any).id || entity.data?.id,\n      spawnerId: spawner.id,\n      position,\n      entityType: definition.entityType,\n    })\n\n    return entity\n  }\n\n  /**\n   * Despawn entity\n   */\n  despawnEntity(entityId: string): void {\n    const spawnerId = this.activeSpawns.get(entityId)\n    if (!spawnerId) {\n      return\n    }\n\n    const spawner = this.spawners.get(spawnerId)\n    if (spawner) {\n      spawner.activeEntities.delete(entityId)\n    }\n\n    this.activeSpawns.delete(entityId)\n\n    // Remove entity from world\n    const entity = this.getEntity(entityId)\n    if (entity) {\n      ;(this.world as any).removeEntity?.(entity)\n    }\n\n    console.log(`[SpawningSystem] Despawned entity ${entityId}`)\n  }\n\n  /**\n   * Get active players in range\n   */\n  getActivePlayersInRange(position: Vector3, range: number): PlayerEntity[] {\n    const players: PlayerEntity[] = []\n\n    // Get all entities in range\n    const entities = (this.world as any).getEntitiesInRange?.(position, range) || []\n\n    for (const entity of entities) {\n      if (entity.data?.type === 'player') {\n        players.push(entity as PlayerEntity)\n      }\n    }\n\n    return players\n  }\n\n  /**\n   * Update spawner\n   */\n  private updateSpawner(spawner: Spawner, _delta: number): void {\n    // Check activation\n    const wasActive = spawner.isActive\n    spawner.isActive = this.checkActivation(spawner)\n\n    // Handle activation state change\n    if (!wasActive && spawner.isActive) {\n      this.onSpawnerActivated(spawner)\n    } else if (wasActive && !spawner.isActive) {\n      this.onSpawnerDeactivated(spawner)\n    }\n\n    // Skip inactive spawners\n    if (!spawner.isActive) {\n      return\n    }\n\n    // Check if should spawn\n    if (this.shouldSpawn(spawner)) {\n      this.spawnFromSpawner(spawner)\n    }\n  }\n\n  /**\n   * Check spawner activation\n   */\n  private checkActivation(spawner: Spawner): boolean {\n    const players = this.getActivePlayersInRange(spawner.position, spawner.activationRange)\n\n    if (players.length > 0) {\n      // Players in activation range - check line of sight if required\n      if (spawner.requiresLineOfSight) {\n        const hasLOS = players.some(player => {\n          const playerPos = player.data?.position || (player as any).position\n          const playerVector3: Vector3 = Array.isArray(playerPos)\n            ? { x: playerPos[0] || 0, y: playerPos[1] || 0, z: playerPos[2] || 0 }\n            : playerPos\n          return this.hasLineOfSight(playerVector3, spawner.position)\n        })\n\n        if (!hasLOS) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    // No players in activation range\n    // If spawner is active, check if players are still in deactivation range\n    if (spawner.isActive) {\n      const deactivationPlayers = this.getActivePlayersInRange(spawner.position, spawner.deactivationRange)\n\n      return deactivationPlayers.length > 0\n    }\n\n    return false\n  }\n\n  /**\n   * Check if should spawn\n   */\n  private shouldSpawn(spawner: Spawner): boolean {\n    // Check entity limit\n    if (spawner.activeEntities.size >= spawner.maxEntities) {\n      return false\n    }\n\n    // Check respawn timer\n    const now = Date.now()\n    if (now - spawner.lastSpawnTime < spawner.respawnTime) {\n      return false\n    }\n\n    // Check spawn conditions\n    if (!this.conditionChecker.checkConditions(spawner as any, this.world)) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Spawn from spawner\n   */\n  private spawnFromSpawner(spawner: Spawner): void {\n    const entity = this.spawnEntity(spawner)\n    if (entity) {\n      spawner.lastSpawnTime = Date.now()\n      console.log(`[SpawningSystem] Spawned ${entity.data?.type || 'entity'} from spawner ${spawner.id}`)\n    }\n  }\n\n  /**\n   * Select spawn definition based on weights\n   */\n  private selectSpawnDefinition(definitions: SpawnDefinition[]): SpawnDefinition | null {\n    if (definitions.length === 0) {\n      return null\n    }\n\n    const totalWeight = definitions.reduce((sum, def) => sum + def.weight, 0)\n    if (totalWeight === 0) {\n      return null\n    }\n\n    let roll = Math.random() * totalWeight\n\n    for (const definition of definitions) {\n      roll -= definition.weight\n      if (roll <= 0) {\n        return definition\n      }\n    }\n\n    return definitions[0] || null\n  }\n\n  /**\n   * Get spawn position\n   */\n  private getSpawnPosition(spawner: Spawner): Vector3 | null {\n    const maxAttempts = 10\n\n    for (let i = 0; i < maxAttempts; i++) {\n      const position = spawner.spawnArea.getRandomPosition()\n\n      // Check if position was generated successfully\n      if (!position) {\n        continue\n      }\n\n      // Validate position\n      if (!this.isValidSpawnPosition(position, spawner)) {\n        continue\n      }\n\n      // Check spacing from other spawns\n      if (spawner.spawnArea.avoidOverlap && position) {\n        const nearby = this.getEntitiesNear(position, spawner.spawnArea.minSpacing)\n        if (nearby.length > 0) {\n          continue\n        }\n      }\n\n      // Adjust Y position to ground level\n      position.y = this.getGroundHeight(position)\n\n      return position\n    }\n\n    return null\n  }\n\n  /**\n   * Create entity based on type\n   */\n  private createEntity(definition: SpawnDefinition, position: Vector3, spawner: Spawner): RPGEntity | null {\n    switch (spawner.type) {\n      case SpawnerType.NPC:\n        return this.createNPC(definition, position, spawner) as RPGEntity | null\n      case SpawnerType.RESOURCE:\n        return this.spawnResource(definition, position, spawner)\n      case SpawnerType.CHEST:\n        return this.spawnChest(definition, position, spawner)\n      case SpawnerType.BOSS:\n        return this.spawnBoss(definition, position, spawner)\n      default:\n        console.warn(`[SpawningSystem] Unknown spawner type: ${spawner.type}`)\n        return null\n    }\n  }\n\n  /**\n   * Create NPC\n   */\n  private createNPC(definition: SpawnDefinition, position: Vector3, spawner: Spawner): NPCEntity | null {\n    // Get NPC system\n    const npcSystem = (this.world as any).getSystem?.('npc')\n    if (!npcSystem) {\n      console.warn('[SpawningSystem] NPC system not found')\n      return null\n    }\n\n    // Create NPC\n    const npc = npcSystem.spawnNPC?.(definition.entityId || 1, position, spawner.id)\n\n    if (npc) {\n      console.log(\n        `[SpawningSystem] Successfully created NPC ${npc.id} (entityId: ${definition.entityId}) at position [${position.x}, ${position.y}, ${position.z}]`\n      )\n    } else {\n      console.warn(\n        `[SpawningSystem] Failed to create NPC with entityId ${definition.entityId}. This usually means the NPC definition is missing from the config files.`\n      )\n    }\n\n    return npc\n  }\n\n  /**\n   * Spawn resource entity (trees, rocks, items, etc.)\n   */\n  private spawnResource(definition: SpawnDefinition, position: Vector3, spawner: Spawner): RPGEntity | null {\n    // Handle sword items specifically\n    if (definition.entityType === 'sword') {\n      return this.spawnSwordItem(definition, position, spawner)\n    }\n    const resourceId = `resource_${Date.now()}_${Math.random()}`\n\n    // Create resource entity\n    const resource = new RPGEntity(this.world, 'resource', {\n      id: resourceId,\n      type: 'resource',\n      position,\n      resourceType: definition.entityType,\n      spawnPointId: spawner.id,\n      depleted: false,\n      respawnTime: spawner.respawnTime || 60000, // 1 minute default\n    })\n\n    // Add resource component\n    const resourceComponent = {\n      type: 'resource',\n      resourceType: definition.entityType,\n      skillRequired: this.getResourceSkill(definition.entityType),\n      levelRequired: definition.minLevel || 1,\n      depleted: false,\n      harvestTime: 3000, // 3 seconds\n      drops: this.getResourceDrops(definition.entityType),\n      respawnTime: spawner.respawnTime || 60000,\n    }\n    resource.components.set('resource', resourceComponent as any)\n\n    // Add visual component\n    resource.components.set('visual', {\n      type: 'visual',\n      model: this.getResourceModel(definition.entityType),\n      scale: definition.metadata?.scale || 1,\n    } as any)\n\n    // Add collision\n    resource.components.set('collider', {\n      type: 'collider',\n      shape: 'box',\n      size: { x: 1, y: 2, z: 1 },\n      blocking: true,\n    } as any)\n\n    // Add to world\n    if ((this.world as any).entities?.items) {\n      ;(this.world as any).entities.items.set(resourceId, resource)\n    } else {\n      ;(this.world as any).entities = new Map()\n      ;(this.world as any).entities.set(resourceId, resource)\n    }\n\n    // Create visual representation\n    if (this.visualSystem) {\n      this.visualSystem.createVisual(resource, definition.entityType)\n    }\n\n    return resource\n  }\n\n  /**\n   * Spawn sword item for quest\n   */\n  private spawnSwordItem(definition: SpawnDefinition, position: Vector3, spawner: Spawner): RPGEntity | null {\n    const swordId = `sword_${Date.now()}_${Math.random()}`\n\n    // Create sword entity\n    const sword = new RPGEntity(this.world, 'item', {\n      id: swordId,\n      type: 'item',\n      position,\n      itemType: 'sword',\n      spawnPointId: spawner.id,\n      collected: false,\n    })\n\n    // Add item component\n    const itemComponent = {\n      type: 'item',\n      itemId: 1001, // Bronze sword\n      itemType: 'weapon',\n      name: 'Bronze Sword',\n      stackable: false,\n      maxStack: 1,\n      value: 50,\n      collected: false,\n      interactable: true,\n    }\n    sword.components.set('item', itemComponent as any)\n\n    // Add visual component\n    sword.components.set('visual', {\n      type: 'visual',\n      model: 'models/sword_bronze.glb',\n      scale: 1,\n    } as any)\n\n    // Add interactable component\n    sword.components.set('interactable', {\n      type: 'interactable',\n      interactionType: 'pickup',\n      range: 2,\n      action: 'pick_up_sword',\n    } as any)\n\n    // Add collision\n    sword.components.set('collider', {\n      type: 'collider',\n      shape: 'box',\n      size: { x: 0.2, y: 0.1, z: 1.2 },\n      blocking: false,\n    } as any)\n\n    // Add to world\n    if ((this.world as any).entities?.items) {\n      ;(this.world as any).entities.items.set(swordId, sword)\n    } else {\n      ;(this.world as any).entities = new Map()\n      ;(this.world as any).entities.set(swordId, sword)\n    }\n\n    // Create visual representation\n    if (this.visualSystem) {\n      this.visualSystem.createVisual(sword, 'sword')\n    }\n\n    console.log(\n      `[SpawningSystem] Spawned sword item ${swordId} at position [${position.x}, ${position.y}, ${position.z}]`\n    )\n\n    return sword\n  }\n\n  /**\n   * Get resource skill requirement\n   */\n  private getResourceSkill(resourceType: string): string {\n    const skillMap: Record<string, string> = {\n      tree: 'woodcutting',\n      oak_tree: 'woodcutting',\n      willow_tree: 'woodcutting',\n      rock: 'mining',\n      iron_rock: 'mining',\n      gold_rock: 'mining',\n      fishing_spot: 'fishing',\n    }\n    return skillMap[resourceType] || 'woodcutting'\n  }\n\n  /**\n   * Get resource drops\n   */\n  private getResourceDrops(resourceType: string): any[] {\n    const dropMap: Record<string, any[]> = {\n      tree: [{ itemId: 1511, quantity: 1 }], // Logs\n      oak_tree: [{ itemId: 1521, quantity: 1 }], // Oak logs\n      rock: [{ itemId: 436, quantity: 1 }], // Copper ore\n      iron_rock: [{ itemId: 440, quantity: 1 }], // Iron ore\n    }\n    return dropMap[resourceType] || []\n  }\n\n  /**\n   * Get resource model\n   */\n  private getResourceModel(resourceType: string): string {\n    const modelMap: Record<string, string> = {\n      tree: 'models/tree_normal.glb',\n      oak_tree: 'models/tree_oak.glb',\n      rock: 'models/rock_normal.glb',\n      iron_rock: 'models/rock_iron.glb',\n    }\n    return modelMap[resourceType] || 'models/tree_normal.glb'\n  }\n\n  /**\n   * Spawn chest entity\n   */\n  private spawnChest(definition: SpawnDefinition, position: Vector3, spawner: Spawner): RPGEntity | null {\n    const chestId = `chest_${Date.now()}_${Math.random()}`\n\n    // Create chest entity\n    const chest = new RPGEntity(this.world, 'chest', {\n      id: chestId,\n      type: 'chest',\n      position,\n      chestType: definition.entityType,\n      spawnPointId: spawner.id,\n      locked: definition.metadata?.locked || false,\n      keyRequired: definition.metadata?.keyRequired || null,\n    })\n\n    // Add chest component\n    const chestComponent = {\n      type: 'chest',\n      chestType: definition.entityType,\n      lootTable: definition.metadata?.lootTable || 'chest_common',\n      locked: definition.metadata?.locked || false,\n      keyRequired: definition.metadata?.keyRequired || null,\n      opened: false,\n      respawnTime: spawner.respawnTime || 300000, // 5 minutes\n    }\n    chest.components.set('chest', chestComponent as any)\n\n    // Add visual\n    chest.components.set('visual', {\n      type: 'visual',\n      model: this.getChestModel(definition.entityType),\n      scale: definition.metadata?.scale || 1,\n    } as any)\n\n    // Add interactable\n    chest.components.set('interactable', {\n      type: 'interactable',\n      interactionType: 'open',\n      range: 2,\n    } as any)\n\n    // Add to world\n    if ((this.world as any).entities?.items) {\n      ;(this.world as any).entities.items.set(chestId, chest)\n    } else {\n      ;(this.world as any).entities = new Map()\n      ;(this.world as any).entities.set(chestId, chest)\n    }\n\n    // Create visual representation\n    if (this.visualSystem) {\n      this.visualSystem.createVisual(chest, 'chest')\n    }\n\n    return chest\n  }\n\n  /**\n   * Get chest model\n   */\n  private getChestModel(chestType: string): string {\n    const modelMap: Record<string, string> = {\n      chest_common: 'models/chest_wooden.glb',\n      chest_rare: 'models/chest_ornate.glb',\n      chest_epic: 'models/chest_golden.glb',\n    }\n    return modelMap[chestType] || 'models/chest_wooden.glb'\n  }\n\n  /**\n   * Spawn boss entity\n   */\n  private spawnBoss(definition: SpawnDefinition, position: Vector3, spawner: Spawner): RPGEntity | null {\n    const bossId = `boss_${Date.now()}_${Math.random()}`\n    const bossDef = this.getBossDefinition(definition.entityType)\n\n    if (!bossDef) {\n      return null\n    }\n\n    // Create boss entity\n    const boss = new RPGEntity(this.world, 'npc', {\n      id: bossId,\n      type: 'npc',\n      position,\n      npcId: bossDef.id,\n      spawnPointId: spawner.id,\n    })\n\n    // Add NPC component with boss stats\n    const npcComponent = {\n      type: 'npc',\n      npcId: bossDef.id,\n      name: bossDef.name,\n      examine: bossDef.examine,\n      npcType: NPCType.BOSS,\n      behavior: NPCBehavior.AGGRESSIVE,\n      faction: bossDef.faction || 'hostile',\n      state: NPCState.IDLE,\n      level: bossDef.level,\n      combatLevel: bossDef.combatLevel,\n      maxHitpoints: bossDef.maxHitpoints,\n      currentHitpoints: bossDef.maxHitpoints,\n      attackStyle: bossDef.attackStyle || AttackType.MELEE,\n      aggressionLevel: 100,\n      aggressionRange: bossDef.aggressionRange || 10,\n      attackBonus: bossDef.combat.attackBonus,\n      strengthBonus: bossDef.combat.strengthBonus,\n      defenseBonus: bossDef.combat.defenseBonus,\n      maxHit: bossDef.combat.maxHit,\n      attackSpeed: bossDef.combat.attackSpeed,\n      respawnTime: spawner.respawnTime || 600000, // 10 minutes\n      wanderRadius: 0, // Bosses don't wander\n      spawnPoint: position,\n      lootTable: bossDef.lootTable,\n      currentTarget: null,\n      lastInteraction: 0,\n    }\n    boss.components.set('npc', npcComponent as any)\n\n    // Add boss-specific component\n    boss.components.set('boss', {\n      type: 'boss',\n      phase: 1,\n      maxPhases: bossDef.phases || 1,\n      specialAttacks: bossDef.specialAttacks || [],\n      immunities: bossDef.immunities || [],\n      mechanics: bossDef.mechanics || [],\n    } as any)\n\n    // Add stats\n    boss.components.set('stats', this.createBossStats(bossDef) as any)\n\n    // Add movement\n    boss.components.set('movement', {\n      type: 'movement',\n      position: { ...position },\n      destination: null,\n      targetPosition: null,\n      path: [],\n      currentSpeed: 0,\n      moveSpeed: bossDef.moveSpeed || 3,\n      isMoving: false,\n      canMove: true,\n      runEnergy: 100,\n      isRunning: false,\n      facingDirection: 0,\n      pathfindingFlags: 0,\n      lastMoveTime: 0,\n      teleportDestination: null,\n      teleportTime: 0,\n      teleportAnimation: '',\n    } as any)\n\n    // Add visual\n    boss.components.set('visual', {\n      type: 'visual',\n      model: bossDef.model || 'models/boss_default.glb',\n      scale: bossDef.scale || 2,\n    } as any)\n\n    // Add to world\n    if ((this.world as any).entities?.items) {\n      ;(this.world as any).entities.items.set(bossId, boss)\n    } else {\n      ;(this.world as any).entities = new Map()\n      ;(this.world as any).entities.set(bossId, boss)\n    }\n\n    // Create visual representation\n    if (this.visualSystem) {\n      this.visualSystem.createVisual(boss, definition.entityType)\n    }\n\n    // Announce boss spawn\n    this.emit('boss:spawned', {\n      bossId,\n      bossName: bossDef.name,\n      position,\n    })\n\n    return boss\n  }\n\n  /**\n   * Get boss definition\n   */\n  private getBossDefinition(bossType: string): any {\n    // In real implementation, load from data files\n    const bosses: Record<string, any> = {\n      king_black_dragon: {\n        id: 239,\n        name: 'King Black Dragon',\n        examine: 'The biggest, meanest dragon around!',\n        level: 276,\n        combatLevel: 276,\n        maxHitpoints: 240,\n        attackStyle: AttackType.MAGIC,\n        aggressionRange: 15,\n        combat: {\n          attackBonus: 240,\n          strengthBonus: 240,\n          defenseBonus: 240,\n          maxHit: 25,\n          attackSpeed: 4,\n        },\n        lootTable: 'kbd_drops',\n        phases: 1,\n        specialAttacks: ['dragonfire', 'poison_breath', 'freeze_breath'],\n        model: 'models/boss_kbd.glb',\n        scale: 3,\n      },\n    }\n\n    return bosses[bossType]\n  }\n\n  /**\n   * Create boss stats\n   */\n  private createBossStats(bossDef: any): any {\n    return {\n      type: 'stats',\n      hitpoints: {\n        current: bossDef.maxHitpoints,\n        max: bossDef.maxHitpoints,\n        level: 99,\n        xp: 13034431,\n      },\n      attack: { level: 99, xp: 13034431 },\n      strength: { level: 99, xp: 13034431 },\n      defense: { level: 99, xp: 13034431 },\n      ranged: { level: 99, xp: 13034431 },\n      magic: { level: 99, xp: 13034431 },\n      prayer: {\n        level: 99,\n        xp: 13034431,\n        points: 99,\n        maxPoints: 99,\n      },\n      combatBonuses: {\n        attackStab: bossDef.combat.attackBonus,\n        attackSlash: bossDef.combat.attackBonus,\n        attackCrush: bossDef.combat.attackBonus,\n        attackMagic: bossDef.combat.attackBonus,\n        attackRanged: bossDef.combat.attackBonus,\n        defenseStab: bossDef.combat.defenseBonus,\n        defenseSlash: bossDef.combat.defenseBonus,\n        defenseCrush: bossDef.combat.defenseBonus,\n        defenseMagic: bossDef.combat.defenseBonus,\n        defenseRanged: bossDef.combat.defenseBonus,\n        meleeStrength: bossDef.combat.strengthBonus,\n        rangedStrength: bossDef.combat.strengthBonus,\n        magicDamage: bossDef.combat.strengthBonus,\n        prayerBonus: 0,\n      },\n      combatLevel: bossDef.combatLevel,\n      totalLevel: 2277,\n    }\n  }\n\n  /**\n   * Register spawn\n   */\n  private registerSpawn(spawner: Spawner, entity: RPGEntity): void {\n    const entityId = (entity as any).id || entity.data?.id\n    spawner.activeEntities.add(entityId)\n    this.activeSpawns.set(entityId, spawner.id)\n  }\n\n  /**\n   * Handle entity death\n   */\n  private handleEntityDeath(entityId: string): void {\n    const spawnerId = this.activeSpawns.get(entityId)\n    if (!spawnerId) {\n      return\n    }\n\n    const spawner = this.spawners.get(spawnerId)\n    if (!spawner) {\n      return\n    }\n\n    // Remove from active entities\n    spawner.activeEntities.delete(entityId)\n    this.activeSpawns.delete(entityId)\n\n    // Schedule respawn\n    this.scheduleRespawn(spawner)\n  }\n\n  /**\n   * Handle entity despawn\n   */\n  private handleEntityDespawn(entityId: string): void {\n    this.handleEntityDeath(entityId)\n  }\n\n  /**\n   * Schedule respawn\n   */\n  private scheduleRespawn(spawner: Spawner): void {\n    const task: SpawnTask = {\n      spawnerId: spawner.id,\n      scheduledTime: Date.now() + spawner.respawnTime,\n      priority: 1,\n    }\n\n    this.spawnQueue.push(task)\n    this.spawnQueue.sort((a, b) => a.scheduledTime - b.scheduledTime)\n  }\n\n  /**\n   * Process spawn queue\n   */\n  private processSpawnQueue(now: number): void {\n    while (this.spawnQueue.length > 0) {\n      const task = this.spawnQueue[0]\n      if (!task || task.scheduledTime > now) {\n        break\n      }\n\n      this.spawnQueue.shift()\n      this.executeSpawnTask(task)\n    }\n  }\n\n  /**\n   * Execute spawn task\n   */\n  private executeSpawnTask(task: SpawnTask): void {\n    const spawner = this.spawners.get(task.spawnerId)\n    if (!spawner) {\n      return\n    }\n\n    if (spawner.isActive && this.shouldSpawn(spawner)) {\n      this.spawnFromSpawner(spawner)\n    }\n  }\n\n  /**\n   * Clean up destroyed entities\n   */\n  private cleanupDestroyedEntities(): void {\n    const toRemove: string[] = []\n\n    for (const [entityId, _spawnerId] of this.activeSpawns) {\n      const entity = this.getEntity(entityId)\n      if (!entity) {\n        toRemove.push(entityId)\n      }\n    }\n\n    for (const entityId of toRemove) {\n      this.handleEntityDeath(entityId)\n    }\n  }\n\n  /**\n   * Get entity by ID\n   */\n  private getEntity(entityId: string): RPGEntity | undefined {\n    // Try test world first\n    if ((this.world as any).entities?.items) {\n      return (this.world as any).entities.items.get(entityId)\n    }\n\n    // Handle production environment\n    const entity = this.world.entities?.get?.(entityId)\n    if (!entity || typeof entity.getComponent !== 'function') {\n      return undefined\n    }\n    return entity as unknown as RPGEntity\n  }\n\n  /**\n   * Get entities near position\n   */\n  private getEntitiesNear(position: Vector3, range: number): RPGEntity[] {\n    // Use spatial query implementation\n    const entities = this.spatialQuery(position, range)\n\n    // Convert to RPGEntity array\n    const rpgEntities: RPGEntity[] = []\n    for (const entity of entities) {\n      // Check if it's an RPGEntity\n      if (entity && typeof entity.getComponent === 'function') {\n        rpgEntities.push(entity as RPGEntity)\n      }\n    }\n\n    return rpgEntities\n  }\n\n  /**\n   * Check if spawn position is valid\n   */\n  private isValidSpawnPosition(position: Vector3, spawner: Spawner): boolean {\n    // Use terrain/collision checks\n    if (!this.isTerrainWalkable(position)) {\n      return false\n    }\n\n    // Additional spawner-specific checks\n    if (spawner.spawnArea && !spawner.spawnArea.isValidPosition(position)) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Get ground height at position\n   */\n  private getGroundHeight(position: Vector3): number {\n    // Use terrain height query implementation\n    return this.getTerrainHeight(position)\n  }\n\n  /**\n   * Check line of sight\n   */\n  private hasLineOfSight(from: Vector3, to: Vector3): boolean {\n    // Use raycast implementation\n    const physics = (this.world as any).physics\n    if (!physics) {\n      return true\n    } // Assume LOS if no physics\n\n    const rayStart = new THREE.Vector3(from.x, from.y, from.z)\n    const rayEnd = new THREE.Vector3(to.x, to.y, to.z)\n    const rayDirection = new THREE.Vector3().subVectors(rayEnd, rayStart).normalize()\n    const maxDistance = this.getDistance(from, to)\n\n    const hit = physics.raycast(rayStart, rayDirection, maxDistance)\n\n    // If no hit, we have line of sight\n    return !hit\n  }\n\n  /**\n   * Calculate distance between two positions\n   */\n  private getDistance(from: Vector3, to: Vector3): number {\n    const dx = to.x - from.x\n    const dy = to.y - from.y\n    const dz = to.z - from.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  /**\n   * Handle spawner activation\n   */\n  private onSpawnerActivated(spawner: Spawner): void {\n    console.log(`[SpawningSystem] Spawner ${spawner.id} activated`)\n\n    // Spawn initial entities up to maxEntities\n    const entitiesToSpawn = spawner.maxEntities - spawner.activeEntities.size\n    for (let i = 0; i < entitiesToSpawn; i++) {\n      // For initial spawn, temporarily bypass respawn timer\n      const originalLastSpawnTime = spawner.lastSpawnTime\n      spawner.lastSpawnTime = 0\n\n      if (this.shouldSpawn(spawner)) {\n        this.spawnFromSpawner(spawner)\n      } else {\n        // Restore original time if spawn failed\n        spawner.lastSpawnTime = originalLastSpawnTime\n        break\n      }\n    }\n  }\n\n  /**\n   * Handle spawner deactivation\n   */\n  private onSpawnerDeactivated(spawner: Spawner): void {\n    console.log(`[SpawningSystem] Spawner ${spawner.id} deactivated`)\n\n    // Optionally despawn entities when deactivated\n    // This depends on game design choice\n  }\n\n  /**\n   * Register default spawners for testing\n   */\n  registerDefaultSpawners(): void {\n    console.log('[SpawningSystem] Registering default spawners near spawn point...')\n\n    // ============ NPC SPAWNERS ============\n\n    // Goblin spawner - close to spawn point\n    const goblinSpawnerId = this.registerSpawner({\n      type: SpawnerType.NPC,\n      position: { x: 5, y: 0, z: 5 },\n      entityDefinitions: [\n        {\n          entityType: 'npc',\n          entityId: 1, // Goblin ID\n          weight: 100,\n        },\n      ],\n      maxEntities: 2,\n      respawnTime: 8000,\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 5, y: 0, z: 5 }, 3, 1),\n    })\n\n    // Guard spawner - protective NPCs\n    const guardSpawnerId = this.registerSpawner({\n      type: SpawnerType.NPC,\n      position: { x: -5, y: 0, z: -5 },\n      entityDefinitions: [\n        {\n          entityType: 'npc',\n          entityId: 2, // Guard ID\n          weight: 100,\n        },\n      ],\n      maxEntities: 1,\n      respawnTime: 10000,\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: -5, y: 0, z: -5 }, 2, 1),\n    })\n\n    // Quest NPC spawner - gives kill goblin quest\n    const questNpcSpawnerId = this.registerSpawner({\n      type: SpawnerType.NPC,\n      position: { x: 0, y: 0, z: 5 },\n      entityDefinitions: [\n        {\n          entityType: 'npc',\n          entityId: 100, // Quest Giver ID\n          weight: 100,\n        },\n      ],\n      maxEntities: 1,\n      respawnTime: 999999, // Never respawn\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 0, y: 0, z: 5 }, 1, 0),\n    })\n\n    // ============ CHEST SPAWNERS ============\n\n    // Common chest spawner\n    const chestSpawnerId = this.registerSpawner({\n      type: SpawnerType.CHEST,\n      position: { x: 8, y: 0, z: -8 },\n      entityDefinitions: [\n        {\n          entityType: 'chest_common',\n          weight: 100,\n          metadata: {\n            lootTable: 'chest_common',\n            locked: false,\n          },\n        },\n      ],\n      maxEntities: 1,\n      respawnTime: 60000, // 1 minute\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 8, y: 0, z: -8 }, 1, 0),\n    })\n\n    // Rare chest spawner\n    const rareChestSpawnerId = this.registerSpawner({\n      type: SpawnerType.CHEST,\n      position: { x: -8, y: 0, z: 8 },\n      entityDefinitions: [\n        {\n          entityType: 'chest_rare',\n          weight: 100,\n          metadata: {\n            lootTable: 'chest_rare',\n            locked: true,\n            keyRequired: 'brass_key',\n          },\n        },\n      ],\n      maxEntities: 1,\n      respawnTime: 300000, // 5 minutes\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: -8, y: 0, z: 8 }, 1, 0),\n    })\n\n    // ============ ITEM SPAWNERS ============\n\n    // Sword spawner - quest item\n    const swordSpawnerId = this.registerSpawner({\n      type: SpawnerType.RESOURCE, // Using resource type for items\n      position: { x: 0, y: 0, z: 0 },\n      entityDefinitions: [\n        {\n          entityType: 'sword',\n          weight: 100,\n        },\n      ],\n      maxEntities: 1,\n      respawnTime: 10000, // 10 seconds\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 0, y: 0, z: 0 }, 1, 0),\n    })\n\n    // ============ RESOURCE SPAWNERS ============\n\n    // Tree spawner - woodcutting\n    const treeSpawnerId = this.registerSpawner({\n      type: SpawnerType.RESOURCE,\n      position: { x: 12, y: 0, z: 0 },\n      entityDefinitions: [\n        {\n          entityType: 'tree',\n          weight: 70,\n        },\n        {\n          entityType: 'oak_tree',\n          weight: 30,\n        },\n      ],\n      maxEntities: 3,\n      respawnTime: 30000, // 30 seconds\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 12, y: 0, z: 0 }, 5, 2),\n    })\n\n    // Rock spawner - mining\n    const rockSpawnerId = this.registerSpawner({\n      type: SpawnerType.RESOURCE,\n      position: { x: -12, y: 0, z: 0 },\n      entityDefinitions: [\n        {\n          entityType: 'rock',\n          weight: 60,\n        },\n        {\n          entityType: 'iron_rock',\n          weight: 40,\n        },\n      ],\n      maxEntities: 2,\n      respawnTime: 45000, // 45 seconds\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: -12, y: 0, z: 0 }, 4, 2),\n    })\n\n    // ============ BOSS SPAWNER ============\n\n    // Boss spawner - rare spawn\n    const bossSpawnerId = this.registerSpawner({\n      type: SpawnerType.BOSS,\n      position: { x: 0, y: 0, z: 20 },\n      entityDefinitions: [\n        {\n          entityType: 'king_black_dragon',\n          weight: 100,\n        },\n      ],\n      maxEntities: 1,\n      respawnTime: 600000, // 10 minutes\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 0, y: 0, z: 20 }, 2, 0),\n    })\n\n    // ============ MIXED MOB SPAWNER ============\n\n    // Mixed mob spawner with multiple entity types\n    const mixedMobSpawnerId = this.registerSpawner({\n      type: SpawnerType.NPC,\n      position: { x: 0, y: 0, z: -15 },\n      entityDefinitions: [\n        {\n          entityType: 'npc',\n          entityId: 1, // Goblin\n          weight: 50,\n        },\n        {\n          entityType: 'npc',\n          entityId: 2, // Guard\n          weight: 30,\n        },\n        {\n          entityType: 'npc',\n          entityId: 3, // Cow\n          weight: 20,\n        },\n      ],\n      maxEntities: 4,\n      respawnTime: 12000,\n      activationRange: 200,\n      spawnArea: new CircularSpawnArea({ x: 0, y: 0, z: -15 }, 8, 2),\n    })\n\n    // Store spawner IDs for force activation\n    const spawnerIds = [\n      goblinSpawnerId,\n      guardSpawnerId,\n      questNpcSpawnerId,\n      chestSpawnerId,\n      rareChestSpawnerId,\n      swordSpawnerId,\n      treeSpawnerId,\n      rockSpawnerId,\n      bossSpawnerId,\n      mixedMobSpawnerId,\n    ]\n\n    // Force spawn immediately for testing - override activation logic\n    setTimeout(() => {\n      console.log('[SpawningSystem] Force activating all test spawners...')\n\n      for (const spawnerId of spawnerIds) {\n        const spawner = this.spawners.get(spawnerId)\n        if (spawner) {\n          console.log(`[SpawningSystem] Force activating spawner ${spawnerId} (${spawner.type})`)\n          spawner.isActive = true\n\n          // Spawn initial entities for immediate testing\n          const entitiesToSpawn = spawner.maxEntities\n          for (let i = 0; i < entitiesToSpawn; i++) {\n            const originalLastSpawnTime = spawner.lastSpawnTime\n            spawner.lastSpawnTime = 0 // Bypass respawn timer\n\n            if (this.shouldSpawn(spawner)) {\n              this.spawnFromSpawner(spawner)\n            } else {\n              spawner.lastSpawnTime = originalLastSpawnTime\n              break\n            }\n          }\n        }\n      }\n\n      console.log('[SpawningSystem] All test spawners activated and initial entities spawned')\n    }, 2000) // Wait 2 seconds for systems to initialize\n\n    console.log(`[SpawningSystem] Registered ${spawnerIds.length} test spawners near spawn point`)\n  }\n\n  /**\n   * Check if position is available for spawning\n   */\n  private isPositionAvailable(position: Vector3, radius: number): boolean {\n    // Use spatial query to check for nearby entities\n    const nearbyEntities = this.spatialQuery(position, radius)\n\n    // Check if any blocking entities exist\n    for (const entity of nearbyEntities) {\n      const collider = entity.getComponent('collider')\n      if (collider && (collider as any).blocking) {\n        return false\n      }\n    }\n\n    // Add terrain/collision checks\n    if (!this.isTerrainWalkable(position)) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Perform spatial query to find entities within radius\n   */\n  private spatialQuery(position: Vector3, radius: number): Entity[] {\n    const results: Entity[] = []\n\n    // Check if world has spatial index\n    const spatialIndex = (this.world as any).spatialIndex\n    if (spatialIndex) {\n      // Use optimized spatial query\n      return spatialIndex.query(position, radius)\n    }\n\n    // Fallback to brute force search\n    const radiusSquared = radius * radius\n\n    for (const entity of this.world.entities.items.values()) {\n      if (!entity.position) {\n        continue\n      }\n\n      const dx = entity.position.x - position.x\n      const dy = entity.position.y - position.y\n      const dz = entity.position.z - position.z\n      const distanceSquared = dx * dx + dy * dy + dz * dz\n\n      if (distanceSquared <= radiusSquared) {\n        results.push(entity)\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * Check if terrain is walkable at position\n   */\n  private isTerrainWalkable(position: Vector3): boolean {\n    // Check collision map\n    const collisionMap = (this.world as any).collisionMap\n    if (collisionMap) {\n      const tileX = Math.floor(position.x)\n      const tileZ = Math.floor(position.z)\n\n      if (collisionMap[tileZ] && collisionMap[tileZ][tileX]) {\n        return false // Tile is blocked\n      }\n    }\n\n    // Check terrain height - ensure spawn is on ground\n    const terrainHeight = this.getTerrainHeight(position)\n    if (Math.abs(position.y - terrainHeight) > 0.5) {\n      return false // Too far from ground\n    }\n\n    return true\n  }\n\n  /**\n   * Get terrain height at position\n   */\n  private getTerrainHeight(position: Vector3): number {\n    // Use terrain system if available\n    const terrain = (this.world as any).terrain\n    if (terrain && terrain.getHeightAt) {\n      return terrain.getHeightAt(position.x, position.z)\n    }\n\n    // Use raycast to find ground\n    const rayHeight = this.raycastGround(position)\n    if (rayHeight !== null) {\n      return rayHeight\n    }\n\n    // Default to y=0\n    return 0\n  }\n\n  /**\n   * Raycast to find ground level\n   */\n  private raycastGround(position: Vector3): number | null {\n    const physics = (this.world as any).physics\n    if (!physics) {\n      return null\n    }\n\n    // Cast ray downward from high above\n    const rayStart = new THREE.Vector3(position.x, position.y + 100, position.z)\n    const rayDirection = new THREE.Vector3(0, -1, 0) // Downward direction\n\n    const hit = physics.raycast(rayStart, rayDirection, 200)\n\n    if (hit) {\n      return hit.point.y\n    }\n\n    return null\n  }\n}\n", "import { RPGEntity } from './RPGEntity'\nimport type { World } from '../../types'\nimport type { NPCDefinition, Vector3 } from '../types'\nimport type { Component } from '../../types'\n\n// Define NPCComponent locally to avoid import issues\ninterface NPCComponent extends Component {\n  type: 'npc'\n  npcId: number\n  name: string\n  behavior: string\n  faction: string\n  level: number\n  combatLevel: number\n  maxHitpoints: number\n  currentHitpoints: number\n  aggressionLevel: number\n  aggressionRange: number\n  wanderRadius: number\n  respawnTime: number\n  lastPosition: Vector3\n  homePosition: Vector3\n  spawnPoint: Vector3\n  state: string\n  isAlive: boolean\n  lastCombatTime: number\n  currentTarget: string | null\n  aggroList: string[]\n  definition: NPCDefinition\n}\n\n/**\n * NPC Entity class for all non-player characters\n */\nexport class NPCEntity extends RPGEntity {\n  // NPC-specific properties\n  npcType!: string\n  spawnerId?: string\n  lastInteraction: number = 0\n\n  // Properties required by NPCEntity interface\n  spawnPoint: Vector3\n  currentTarget: string | null = null\n  deathTime: number = 0\n  aiState: 'idle' | 'wandering' | 'chasing' | 'attacking' | 'fleeing' | 'returning' = 'idle'\n  stateTimer: number = 0\n\n  constructor(\n    world: World,\n    id: string,\n    data: {\n      position: Vector3\n      definition: NPCDefinition\n    }\n  ) {\n    super(world, 'npc', {\n      id,\n      position: data.position,\n      definition: data.definition,\n    })\n\n    this.spawnPoint = { ...data.position }\n  }\n\n  /**\n   * Get the NPC component\n   */\n  getNPCComponent(): NPCComponent | null {\n    return this.getComponent<NPCComponent>('npc')\n  }\n\n  /**\n   * Update position\n   */\n  setPosition(position: Vector3): void {\n    this.position = { ...position }\n\n    // Update movement component if exists\n    const movement = this.getComponent<any>('movement')\n    if (movement) {\n      movement.position = { ...position }\n    }\n\n    // Update world position\n    this.data.position = position\n  }\n\n  /**\n   * Check if NPC is alive\n   */\n  isAlive(): boolean {\n    const npc = this.getNPCComponent()\n    return npc ? npc.currentHitpoints > 0 : false\n  }\n\n  /**\n   * Take damage\n   */\n  takeDamage(damage: number): void {\n    const npc = this.getNPCComponent()\n    if (!npc) {\n      return\n    }\n\n    npc.currentHitpoints = Math.max(0, npc.currentHitpoints - damage)\n\n    if (npc.currentHitpoints <= 0) {\n      this.die()\n    }\n  }\n\n  /**\n   * Handle death\n   */\n  die(): void {\n    const npc = this.getNPCComponent()\n    if (!npc) {\n      return\n    }\n\n    // Update state\n    npc.state = 'dead' as any // NPCState.DEAD\n\n    // Emit death event\n    this.world.events.emit('entity:death', {\n      entityId: this.id,\n      entityType: 'npc',\n      position: this.position,\n    })\n  }\n\n  /**\n   * Respawn the NPC\n   */\n  respawn(): void {\n    const npc = this.getNPCComponent()\n    if (!npc) {\n      return\n    }\n\n    // Reset health\n    npc.currentHitpoints = npc.maxHitpoints\n    npc.state = 'idle' as any // NPCState.IDLE\n\n    // Reset position to spawn point\n    if (npc.spawnPoint) {\n      this.setPosition(npc.spawnPoint)\n    }\n\n    // Clear target\n    npc.currentTarget = null\n  }\n\n  /**\n   * Check if player is in interaction range\n   */\n  isInInteractionRange(playerPosition: Vector3, range: number = 3): boolean {\n    const dx = this.position.x - playerPosition.x\n    const dy = this.position.y - playerPosition.y\n    const dz = this.position.z - playerPosition.z\n    const distance = Math.sqrt(dx * dx + dy * dy + dz * dz)\n    return distance <= range\n  }\n}\n", "import type { World } from '../../../types'\nimport type {\n  NPCEntity,\n  NPCComponent,\n  Vector3,\n  MovementComponent,\n  CombatComponent,\n  PlayerEntity,\n  Entity,\n} from '../../types'\nimport { NPCBehavior, NPCState } from '../../types'\n\nexport class NPCBehaviorManager {\n  private world: World\n  private movementSystem: any = null\n\n  // Behavior update intervals\n  private readonly BEHAVIOR_UPDATE_INTERVAL = 500 // 500ms\n  private lastBehaviorUpdate: Map<string, number> = new Map()\n\n  constructor(world: World) {\n    this.world = world\n    // Note: Don't access systems during construction - they may not be initialized yet\n  }\n\n  /**\n   * Initialize the behavior manager - called after all systems are ready\n   */\n  init(): void {\n    // Now safely get the movement system\n    this.movementSystem = (this.world as any).movement || {\n      moveEntity: (id: string, pos: Vector3) => {\n        // Fallback implementation\n        const entity = this.world.entities.get?.(id)\n        if (entity) {\n          entity.position = pos\n        }\n      },\n    }\n  }\n\n  /**\n   * Update NPC behavior\n   */\n  updateBehavior(npc: NPCEntity, _delta: number): void {\n    // Ensure we're initialized\n    if (!this.movementSystem) {\n      this.init()\n    }\n\n    const npcComponent = npc.getComponent('npc') as any\n    if (!npcComponent) {\n      return\n    }\n\n    // Check if we should update behavior this frame\n    const lastUpdate = this.lastBehaviorUpdate.get(npc.id) || 0\n    const now = Date.now()\n\n    if (now - lastUpdate < this.BEHAVIOR_UPDATE_INTERVAL) {\n      return\n    }\n\n    this.lastBehaviorUpdate.set(npc.id, now)\n\n    // Update based on behavior type\n    switch (npcComponent.behavior) {\n      case NPCBehavior.AGGRESSIVE:\n        this.updateAggressiveBehavior(npc, npcComponent)\n        break\n      case NPCBehavior.DEFENSIVE:\n        this.updateDefensiveBehavior(npc, npcComponent)\n        break\n      case NPCBehavior.PASSIVE:\n        this.updatePassiveBehavior(npc, npcComponent)\n        break\n      case NPCBehavior.FRIENDLY:\n        this.updateFriendlyBehavior(npc, npcComponent)\n        break\n      case NPCBehavior.PATROL:\n        this.updatePatrolBehavior(npc, npcComponent)\n        break\n      case NPCBehavior.WANDER:\n        this.updateWanderBehavior(npc, npcComponent)\n        break\n    }\n\n    // Update movement if needed\n    this.updateMovement(npc, npcComponent)\n  }\n\n  /**\n   * Aggressive behavior - attacks players on sight\n   */\n  private updateAggressiveBehavior(npc: NPCEntity, npcComponent: NPCComponent): void {\n    // Check current state\n    if (npcComponent.state === NPCState.COMBAT) {\n      // Already in combat, check if target is still valid\n      if (!this.isValidTarget(npc, npcComponent.currentTarget)) {\n        this.findNewTarget(npc, npcComponent)\n      }\n      return\n    }\n\n    // Look for players in aggression range\n    const npcPos = this.getEntityPosition(npc)\n    if (!npcPos) {\n      return\n    }\n\n    const nearbyPlayers = this.getPlayersInRange(npcPos, npcComponent.aggressionRange)\n\n    for (const player of nearbyPlayers) {\n      // Check if we can attack this player\n      if (this.canAttackPlayer(npc, player)) {\n        const playerId = player.id\n        this.startCombat(npc, npcComponent, playerId)\n        break\n      }\n    }\n\n    // If no targets, wander\n    if (npcComponent.state === NPCState.IDLE) {\n      this.startWandering(npc, npcComponent)\n    }\n  }\n\n  /**\n   * Defensive behavior - only attacks when attacked\n   */\n  private updateDefensiveBehavior(npc: NPCEntity, npcComponent: NPCComponent): void {\n    // Check if in combat\n    if (npcComponent.state === NPCState.COMBAT) {\n      // Validate target\n      if (!this.isValidTarget(npc, npcComponent.currentTarget)) {\n        // Return to idle\n        npcComponent.state = NPCState.IDLE\n        npcComponent.currentTarget = null\n      }\n      return\n    }\n\n    // Return to spawn point if too far\n    const npcPos = this.getEntityPosition(npc)\n    if (npcPos && this.getDistance(npcPos, npcComponent.spawnPoint) > npcComponent.wanderRadius * 2) {\n      this.moveToPosition(npc, npcComponent.spawnPoint)\n    }\n  }\n\n  /**\n   * Passive behavior - never attacks\n   */\n  private updatePassiveBehavior(npc: NPCEntity, npcComponent: NPCComponent): void {\n    // If being attacked, flee\n    const combat = npc.getComponent('combat') as any as any\n    if (combat?.inCombat) {\n      this.flee(npc, npcComponent)\n      return\n    }\n\n    // Wander peacefully\n    if (npcComponent.state === NPCState.IDLE) {\n      this.startWandering(npc, npcComponent)\n    }\n  }\n\n  /**\n   * Friendly behavior - interactable NPCs\n   */\n  private updateFriendlyBehavior(npc: NPCEntity, _npcComponent: NPCComponent): void {\n    // Face nearby players\n    const npcPos = this.getEntityPosition(npc)\n    if (!npcPos) {\n      return\n    }\n\n    const nearbyPlayers = this.getPlayersInRange(npcPos, 5)\n    if (nearbyPlayers.length > 0) {\n      // Face the closest player\n      const closest = this.getClosestPlayer(npcPos, nearbyPlayers)\n      if (closest) {\n        const closestPos = this.getEntityPosition(closest)\n        if (closestPos) {\n          this.faceEntity(npc, { position: closestPos })\n        }\n      }\n    }\n  }\n\n  /**\n   * Patrol behavior - follows waypoints\n   */\n  private updatePatrolBehavior(npc: NPCEntity, npcComponent: NPCComponent): void {\n    this.executePatrol(npc, npcComponent)\n  }\n\n  /**\n   * Wander behavior - random movement\n   */\n  private updateWanderBehavior(npc: NPCEntity, npcComponent: NPCComponent): void {\n    const movement = npc.getComponent('movement') as any\n    if (!movement) {\n      return\n    }\n\n    // Check if we need a new destination\n    if (!movement.destination || this.hasReachedDestination(npc, movement)) {\n      // Pick random point within wander radius\n      const angle = Math.random() * Math.PI * 2\n      const distance = Math.random() * npcComponent.wanderRadius\n\n      const newDestination: Vector3 = {\n        x: npcComponent.spawnPoint.x + Math.cos(angle) * distance,\n        y: npcComponent.spawnPoint.y,\n        z: npcComponent.spawnPoint.z + Math.sin(angle) * distance,\n      }\n\n      movement.destination = newDestination\n      npcComponent.state = NPCState.WANDERING\n    }\n  }\n\n  /**\n   * Update movement towards destination\n   */\n  private updateMovement(npc: NPCEntity, npcComponent: NPCComponent): void {\n    const movement = npc.getComponent('movement') as any\n    if (!movement || !movement.destination) {\n      return\n    }\n\n    const npcPos = this.getEntityPosition(npc)\n    if (!npcPos) {\n      return\n    }\n\n    // Calculate direction\n    const dx = movement.destination.x - npcPos.x\n    const dz = movement.destination.z - npcPos.z\n    const distance = Math.sqrt(dx * dx + dz * dz)\n\n    // Check if reached destination\n    if (distance < 0.5) {\n      movement.destination = null\n      movement.isMoving = false\n\n      if (npcComponent.state === NPCState.WANDERING) {\n        npcComponent.state = NPCState.IDLE\n      }\n      return\n    }\n\n    // Move towards destination using movement system if available\n    if (this.movementSystem && typeof this.movementSystem.moveEntity === 'function') {\n      this.movementSystem.moveEntity(npc.id, movement.destination)\n    } else {\n      // Fallback direct movement\n      const speed = movement.moveSpeed * 0.016 // Convert to per-frame\n      const moveX = (dx / distance) * speed\n      const moveZ = (dz / distance) * speed\n\n      const newPosition = {\n        x: npcPos.x + moveX,\n        y: npcPos.y,\n        z: npcPos.z + moveZ,\n      }\n\n      // Update position\n      npc.position = newPosition\n      movement.position = newPosition\n    }\n\n    movement.isMoving = true\n  }\n\n  /**\n   * Start combat with a target\n   */\n  private startCombat(npc: NPCEntity, npcComponent: NPCComponent, targetId: string): void {\n    npcComponent.currentTarget = targetId\n    npcComponent.state = NPCState.COMBAT\n\n    // Emit combat start event\n    this.world.events.emit('combat:start', {\n      attackerId: npc.id,\n      targetId,\n    })\n  }\n\n  /**\n   * Find a new target\n   */\n  private findNewTarget(npc: NPCEntity, npcComponent: NPCComponent): void {\n    const npcPos = this.getEntityPosition(npc)\n    if (!npcPos) {\n      return\n    }\n\n    const nearbyPlayers = this.getPlayersInRange(npcPos, npcComponent.aggressionRange)\n\n    for (const player of nearbyPlayers) {\n      if (this.canAttackPlayer(npc, player)) {\n        npcComponent.currentTarget = player.id\n        return\n      }\n    }\n\n    // No valid targets\n    npcComponent.currentTarget = null\n    npcComponent.state = NPCState.IDLE\n  }\n\n  /**\n   * Make NPC flee from danger\n   */\n  private flee(npc: NPCEntity, npcComponent: NPCComponent): void {\n    const combat = npc.getComponent('combat') as any as any\n    if (!combat || !combat.target) {\n      return\n    }\n\n    const attacker = this.getEntity(combat.target)\n    if (!attacker) {\n      return\n    }\n\n    const npcPos = this.getEntityPosition(npc)\n    const attackerPos = this.getEntityPosition(attacker)\n    if (!npcPos || !attackerPos) {\n      return\n    }\n\n    // Calculate flee direction (opposite of attacker)\n    const dx = npcPos.x - attackerPos.x\n    const dz = npcPos.z - attackerPos.z\n    const distance = Math.sqrt(dx * dx + dz * dz)\n\n    if (distance === 0) {\n      return\n    }\n\n    // Flee to a point away from attacker\n    const fleeDistance = 10\n    const fleePoint: Vector3 = {\n      x: npcPos.x + (dx / distance) * fleeDistance,\n      y: npcPos.y,\n      z: npcPos.z + (dz / distance) * fleeDistance,\n    }\n\n    this.moveToPosition(npc, fleePoint)\n    npcComponent.state = NPCState.FLEEING\n  }\n\n  /**\n   * Move to a specific position\n   */\n  private moveToPosition(npc: NPCEntity, position: Vector3): void {\n    const movement = npc.getComponent('movement') as any\n    if (!movement) {\n      return\n    }\n\n    movement.destination = { ...position }\n    movement.isMoving = true\n  }\n\n  /**\n   * Make NPC face another entity\n   */\n  private faceEntity(npc: NPCEntity, target: { position: Vector3 }): void {\n    const npcPos = this.getEntityPosition(npc)\n    if (!npcPos) {\n      return\n    }\n\n    // Calculate direction to target\n    const dx = target.position.x - npcPos.x\n    const dz = target.position.z - npcPos.z\n\n    // Calculate rotation and apply it\n    const angle = Math.atan2(dz, dx)\n\n    // Apply rotation to NPC\n    const movement = npc.getComponent('movement') as any\n    if (movement) {\n      movement.facingDirection = angle\n    }\n  }\n\n  /**\n   * Start wandering behavior\n   */\n  private startWandering(npc: NPCEntity, npcComponent: NPCComponent): void {\n    // Small chance to start wandering\n    if (Math.random() < 0.1) {\n      npcComponent.state = NPCState.WANDERING\n      this.updateWanderBehavior(npc, npcComponent)\n    }\n  }\n\n  /**\n   * Check if target is valid\n   */\n  private isValidTarget(npc: NPCEntity, targetId: string | null): boolean {\n    if (!targetId) {\n      return false\n    }\n\n    const target = this.getEntity(targetId)\n    if (!target) {\n      return false\n    }\n\n    // Check if target is alive\n    const stats = target.getComponent('stats') as any\n    if (stats && (stats as any).hitpoints?.current <= 0) {\n      return false\n    }\n\n    // Check distance\n    const npcPos = this.getEntityPosition(npc)\n    const targetPos = this.getEntityPosition(target)\n    if (!npcPos || !targetPos) {\n      return false\n    }\n\n    const distance = this.getDistance(npcPos, targetPos)\n    if (distance > 20) {\n      return false\n    } // Max chase distance\n\n    return true\n  }\n\n  /**\n   * Check if NPC can attack player\n   */\n  private canAttackPlayer(npc: NPCEntity, player: PlayerEntity): boolean {\n    // Check if player is alive\n    const stats = player.getComponent('stats') as any\n    if (stats && (stats as any).hitpoints?.current <= 0) {\n      return false\n    }\n\n    // Check combat level difference for aggression\n    const npcComponent = npc.getComponent('npc') as any\n    if (!npcComponent) {\n      return false\n    }\n\n    const playerLevel = (stats as any)?.combatLevel || 1\n    const levelDiff = playerLevel - npcComponent.combatLevel\n\n    // Don't attack players too high level\n    if (levelDiff > npcComponent.aggressionLevel * 10) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Check if reached destination\n   */\n  private hasReachedDestination(npc: NPCEntity, movement: MovementComponent): boolean {\n    if (!movement.destination) {\n      return true\n    }\n\n    const npcPos = this.getEntityPosition(npc)\n    if (!npcPos) {\n      return true\n    }\n\n    const distance = this.getDistance(npcPos, movement.destination)\n    return distance < 0.5\n  }\n\n  /**\n   * Get players in range\n   */\n  private getPlayersInRange(position: Vector3, range: number): PlayerEntity[] {\n    // Use spatial query for efficiency when available\n    const nearbyEntities = this.spatialQuery(position, range)\n    const players: PlayerEntity[] = []\n\n    for (const entity of nearbyEntities) {\n      if (this.isPlayer(entity)) {\n        players.push(entity as unknown as PlayerEntity)\n      }\n    }\n\n    return players\n  }\n\n  /**\n   * Get closest player from list\n   */\n  private getClosestPlayer(position: Vector3, players: PlayerEntity[]): PlayerEntity | null {\n    let closest: PlayerEntity | null = null\n    let minDistance = Infinity\n\n    for (const player of players) {\n      const playerPos = this.getEntityPosition(player)\n      if (playerPos) {\n        const distance = this.getDistance(position, playerPos)\n        if (distance < minDistance) {\n          minDistance = distance\n          closest = player\n        }\n      }\n    }\n\n    return closest\n  }\n\n  /**\n   * Get entity position\n   */\n  private getEntityPosition(entity: any): Vector3 | null {\n    // Try different ways to get position\n    if (entity.position && typeof entity.position === 'object') {\n      return entity.position\n    }\n\n    if (entity.data?.position) {\n      // If position is an array, convert to Vector3\n      if (Array.isArray(entity.data.position)) {\n        return {\n          x: entity.data.position[0] || 0,\n          y: entity.data.position[1] || 0,\n          z: entity.data.position[2] || 0,\n        }\n      }\n      return entity.data.position\n    }\n\n    return null\n  }\n\n  /**\n   * Get entity from world\n   */\n  private getEntity(entityId: string): any {\n    if (this.world.entities.items instanceof Map) {\n      return this.world.entities.items.get(entityId)\n    }\n    return this.world.entities.get?.(entityId)\n  }\n\n  /**\n   * Check if entity is a player\n   */\n  private isPlayer(entity: any): boolean {\n    return entity.type === 'player' || entity.data?.type === 'player'\n  }\n\n  /**\n   * Calculate distance between positions\n   */\n  private getDistance(pos1: Vector3, pos2: Vector3): number {\n    const dx = pos1.x - pos2.x\n    const dy = pos1.y - pos2.y\n    const dz = pos1.z - pos2.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  /**\n   * Execute patrol behavior\n   */\n  private executePatrol(npc: NPCEntity, component: NPCComponent): void {\n    // Simple patrol implementation\n    const movement = npc.getComponent('movement') as any\n    if (!movement) {\n      return\n    }\n\n    if (!movement.destination || this.hasReachedDestination(npc, movement)) {\n      // Generate simple patrol points around spawn\n      const waypoints = this.generateDefaultWaypoints(component.spawnPoint)\n      const nextWaypoint = waypoints[Math.floor(Math.random() * waypoints.length)]\n      this.moveToPosition(npc, nextWaypoint)\n    }\n  }\n\n  /**\n   * Generate default waypoints for patrol\n   */\n  private generateDefaultWaypoints(spawnPoint: Vector3): Vector3[] {\n    const waypoints: Vector3[] = []\n    const radius = 10\n\n    // Create 4 waypoints in a square pattern\n    waypoints.push({ x: spawnPoint.x + radius, y: spawnPoint.y, z: spawnPoint.z })\n    waypoints.push({ x: spawnPoint.x, y: spawnPoint.y, z: spawnPoint.z + radius })\n    waypoints.push({ x: spawnPoint.x - radius, y: spawnPoint.y, z: spawnPoint.z })\n    waypoints.push({ x: spawnPoint.x, y: spawnPoint.y, z: spawnPoint.z - radius })\n\n    return waypoints\n  }\n\n  /**\n   * Spatial query for nearby entities\n   */\n  private spatialQuery(position: Vector3, radius: number): Entity[] {\n    // Try to use spatial index if available\n    const spatialIndex = (this.world as any).spatialIndex\n    if (spatialIndex && typeof spatialIndex.query === 'function') {\n      return spatialIndex.query({\n        position: { x: position.x, y: position.y, z: position.z },\n        radius,\n      })\n    }\n\n    // Fallback: iterate through all entities\n    const entities: Entity[] = []\n    const entityMap = this.world.entities.items || new Map()\n\n    for (const entity of entityMap.values()) {\n      if (!entity) {\n        continue\n      }\n\n      const entityPos = this.getEntityPosition(entity)\n      if (entityPos && this.getDistance(position, entityPos) <= radius) {\n        entities.push(entity as unknown as Entity)\n      }\n    }\n\n    return entities\n  }\n}\n", "import type { World } from '../../../types'\nimport type { NPCEntity, NPCComponent } from '../../types'\n\ninterface DialogueSession {\n  playerId: string\n  npcId: string\n  currentNode: string\n  startTime: number\n  variables: Map<string, any>\n}\n\ninterface DialogueNode {\n  id: string\n  text: string\n  options?: DialogueOption[]\n  action?: () => void\n  condition?: () => boolean\n}\n\ninterface DialogueOption {\n  text: string\n  nextNode: string\n  condition?: () => boolean\n  action?: () => void\n}\n\nexport class NPCDialogueManager {\n  private world: World\n  private sessions: Map<string, DialogueSession> = new Map()\n  private dialogues: Map<string, Map<string, DialogueNode>> = new Map()\n\n  constructor(world: World) {\n    this.world = world\n    this.registerDefaultDialogues()\n  }\n\n  /**\n   * Update dialogue sessions\n   */\n  update(_delta: number): void {\n    // Clean up old sessions\n    const now = Date.now()\n    for (const [_sessionId, session] of this.sessions) {\n      if (now - session.startTime > 300000) {\n        // 5 minute timeout\n        this.endDialogue(session.playerId)\n      }\n    }\n  }\n\n  /**\n   * Start dialogue between player and NPC\n   */\n  startDialogue(playerId: string, npcId: string): void {\n    // Check if player already in dialogue\n    if (this.sessions.has(playerId)) {\n      this.endDialogue(playerId)\n    }\n\n    // Get NPC component\n    const npc = this.getNPC(npcId)\n    if (!npc) {\n      return\n    }\n\n    const npcComponent = npc.getComponent<NPCComponent>('npc')\n    if (!npcComponent || !npcComponent.dialogue) {\n      return\n    }\n\n    // Create session\n    const session: DialogueSession = {\n      playerId,\n      npcId,\n      currentNode: 'start',\n      startTime: Date.now(),\n      variables: new Map(),\n    }\n\n    this.sessions.set(playerId, session)\n\n    // Send first dialogue\n    this.sendDialogueNode(playerId, session)\n\n    // Emit event\n    this.world.events.emit('dialogue:start', {\n      playerId,\n      npcId,\n    })\n  }\n\n  /**\n   * Handle player dialogue choice\n   */\n  handleChoice(playerId: string, optionIndex: number): void {\n    const session = this.sessions.get(playerId)\n    if (!session) {\n      return\n    }\n\n    const dialogue = this.getDialogue(session.npcId, session.currentNode)\n    if (!dialogue || !dialogue.options || optionIndex >= dialogue.options.length) {\n      this.endDialogue(playerId)\n      return\n    }\n\n    const option = dialogue.options[optionIndex]\n    if (!option) {\n      this.endDialogue(playerId)\n      return\n    }\n\n    // Check condition\n    if (option.condition && !option.condition()) {\n      this.sendMessage(playerId, \"You can't do that right now.\")\n      return\n    }\n\n    // Execute action\n    if (option.action) {\n      option.action()\n    }\n\n    // Move to next node\n    if (option.nextNode === 'end') {\n      this.endDialogue(playerId)\n    } else {\n      session.currentNode = option.nextNode\n      this.sendDialogueNode(playerId, session)\n    }\n  }\n\n  /**\n   * End dialogue session\n   */\n  endDialogue(playerId: string): void {\n    const session = this.sessions.get(playerId)\n    if (!session) {\n      return\n    }\n\n    this.sessions.delete(playerId)\n\n    // Emit event\n    this.world.events.emit('dialogue:end', {\n      playerId,\n      npcId: session.npcId,\n    })\n  }\n\n  /**\n   * Send dialogue node to player\n   */\n  private sendDialogueNode(playerId: string, session: DialogueSession): void {\n    const dialogue = this.getDialogue(session.npcId, session.currentNode)\n    if (!dialogue) {\n      this.endDialogue(playerId)\n      return\n    }\n\n    // Check condition\n    if (dialogue.condition && !dialogue.condition()) {\n      this.endDialogue(playerId)\n      return\n    }\n\n    // Execute action\n    if (dialogue.action) {\n      dialogue.action()\n    }\n\n    // Format options\n    const options = dialogue.options?.filter(opt => !opt.condition || opt.condition()).map(opt => opt.text) || []\n\n    // Send to player\n    this.world.events.emit('dialogue:node', {\n      playerId,\n      npcId: session.npcId,\n      text: dialogue.text,\n      options,\n    })\n  }\n\n  /**\n   * Register dialogue for an NPC\n   */\n  registerDialogue(npcId: string, dialogues: Map<string, DialogueNode>): void {\n    this.dialogues.set(npcId, dialogues)\n  }\n\n  /**\n   * Get dialogue node\n   */\n  private getDialogue(npcId: string, nodeId: string): DialogueNode | undefined {\n    const npcDialogues = this.dialogues.get(npcId)\n    return npcDialogues?.get(nodeId)\n  }\n\n  /**\n   * Get NPC entity\n   */\n  private getNPC(npcId: string): NPCEntity | undefined {\n    if (this.world.entities.items instanceof Map) {\n      const entity = this.world.entities.items.get(npcId)\n      if (entity && typeof entity.getComponent === 'function') {\n        return entity as unknown as NPCEntity\n      }\n    }\n\n    const entity = this.world.entities.get?.(npcId)\n    if (entity && typeof entity.getComponent === 'function') {\n      return entity as unknown as NPCEntity\n    }\n\n    return undefined\n  }\n\n  /**\n   * Send message to player\n   */\n  private sendMessage(playerId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      targetId: playerId,\n      message,\n    })\n  }\n\n  /**\n   * Register default dialogues\n   */\n  private registerDefaultDialogues(): void {\n    // Shopkeeper dialogue\n    const shopkeeperDialogue = new Map<string, DialogueNode>()\n    shopkeeperDialogue.set('start', {\n      id: 'start',\n      text: 'Welcome to my shop! Would you like to see my wares?',\n      options: [\n        {\n          text: 'Yes, show me what you have.',\n          nextNode: 'shop',\n          action: () => {\n            // Open shop interface\n            this.world.events.emit('shop:open', {\n              npcId: '100', // Bob's shop\n            })\n          },\n        },\n        {\n          text: 'No thanks.',\n          nextNode: 'end',\n        },\n      ],\n    })\n\n    shopkeeperDialogue.set('shop', {\n      id: 'shop',\n      text: 'Take your time browsing!',\n      options: [\n        {\n          text: 'Thanks!',\n          nextNode: 'end',\n        },\n      ],\n    })\n\n    this.registerDialogue('100', shopkeeperDialogue)\n\n    // Quest giver dialogue\n    const questGiverDialogue = new Map<string, DialogueNode>()\n    questGiverDialogue.set('start', {\n      id: 'start',\n      text: 'Greetings, adventurer. Our village faces many threats.',\n      options: [\n        {\n          text: 'What kind of threats?',\n          nextNode: 'threats',\n        },\n        {\n          text: 'Do you have any quests for me?',\n          nextNode: 'quests',\n        },\n        {\n          text: 'Goodbye.',\n          nextNode: 'end',\n        },\n      ],\n    })\n\n    questGiverDialogue.set('threats', {\n      id: 'threats',\n      text: 'Goblins have been raiding our farms, and strange creatures lurk in the nearby caves.',\n      options: [\n        {\n          text: 'I can help with the goblins.',\n          nextNode: 'goblin_quest',\n        },\n        {\n          text: 'Tell me about the caves.',\n          nextNode: 'cave_info',\n        },\n        {\n          text: 'I see.',\n          nextNode: 'start',\n        },\n      ],\n    })\n\n    questGiverDialogue.set('quests', {\n      id: 'quests',\n      text: 'I have several tasks that need doing. Which interests you?',\n      options: [\n        {\n          text: 'The goblin problem.',\n          nextNode: 'goblin_quest',\n        },\n        {\n          text: 'Exploring the caves.',\n          nextNode: 'cave_quest',\n        },\n        {\n          text: 'Maybe later.',\n          nextNode: 'end',\n        },\n      ],\n    })\n\n    questGiverDialogue.set('goblin_quest', {\n      id: 'goblin_quest',\n      text: 'Excellent! Please eliminate 10 goblins from the area. They can be found east of here.',\n      action: () => {\n        // Start goblin quest\n        this.world.events.emit('quest:start', {\n          questId: 'goblin_menace',\n          npcId: '200',\n        })\n      },\n      options: [\n        {\n          text: \"I'll get right on it!\",\n          nextNode: 'end',\n        },\n      ],\n    })\n\n    this.registerDialogue('200', questGiverDialogue)\n  }\n}\n", "import type { World } from '../../../types'\nimport type { NPCSystem } from '../NPCSystem'\nimport type { Vector3 } from '../../types'\n\ninterface SpawnPoint {\n  id: string\n  position: Vector3\n  npcId: number\n  maxCount: number\n  respawnTime: number\n  radius: number\n  active: boolean\n  currentCount: number\n  lastSpawnTime: number\n}\n\ninterface RespawnTask {\n  spawnerId: string\n  npcId: number\n  respawnTime: number\n  scheduledTime: number\n}\n\nexport class NPCSpawnManager {\n  private world: World\n  private npcSystem: NPCSystem\n  private spawnPoints: Map<string, SpawnPoint> = new Map()\n  private respawnQueue: RespawnTask[] = []\n  \n  // Persistence\n  private pendingSaves: boolean = false\n  private saveTimer?: NodeJS.Timeout\n  private lastSaveTime: number = 0\n\n  constructor(world: World, npcSystem: NPCSystem) {\n    this.world = world\n    this.npcSystem = npcSystem\n    this.setupEventListeners()\n    this.startAutoSave()\n    this.loadSpawnData()\n    this.registerDefaultSpawnPoints()\n  }\n\n  /**\n   * Setup event listeners\n   */\n  private setupEventListeners(): void {\n    // Save on server shutdown\n    this.world.events.on('world:shutdown', this.handleShutdown.bind(this))\n  }\n\n  /**\n   * Start auto-save timer\n   */\n  private startAutoSave(): void {\n    // Save spawn data every 30 seconds\n    this.saveTimer = setInterval(() => {\n      if (this.pendingSaves) {\n        this.saveSpawnData()\n      }\n    }, 30000)\n  }\n\n  /**\n   * Handle world shutdown\n   */\n  private async handleShutdown(): Promise<void> {\n    // Save immediately on shutdown\n    await this.saveSpawnData()\n    if (this.saveTimer) {\n      clearInterval(this.saveTimer)\n    }\n  }\n\n  /**\n   * Load spawn data from persistence\n   */\n  private async loadSpawnData(): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      const entities = await persistence.loadWorldEntities()\n      \n      // Restore spawn point states\n      for (const entity of entities) {\n        if (entity.entityType === 'spawn_point') {\n          const metadata = entity.metadata || {}\n          const spawnPoint = this.spawnPoints.get(entity.entityId)\n          if (spawnPoint) {\n            spawnPoint.currentCount = metadata.currentCount || 0\n            spawnPoint.lastSpawnTime = metadata.lastSpawnTime ? new Date(metadata.lastSpawnTime).getTime() : 0\n            spawnPoint.active = metadata.active !== false\n          }\n        } else if (entity.entityType === 'respawn_task') {\n          const metadata = entity.metadata || {}\n          const task: RespawnTask = {\n            spawnerId: metadata.spawnerId,\n            npcId: metadata.npcId,\n            respawnTime: metadata.respawnTime,\n            scheduledTime: new Date(metadata.scheduledTime).getTime()\n          }\n          // Only add if still in future\n          if (task.scheduledTime > Date.now()) {\n            this.respawnQueue.push(task)\n          }\n        }\n      }\n\n      console.log(`[NPCSpawnManager] Loaded ${this.respawnQueue.length} pending respawns`)\n    } catch (error) {\n      console.error(`[NPCSpawnManager] Failed to load spawn data:`, error)\n    }\n  }\n\n  /**\n   * Save spawn data to persistence\n   */\n  private async saveSpawnData(): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const now = Date.now()\n    // Throttle saves to once per minute max\n    if (now - this.lastSaveTime < 60000) return\n\n    try {\n      const entities: any[] = []\n      \n      // Save spawn point states\n      for (const [id, spawnPoint] of this.spawnPoints) {\n        entities.push({\n          entityId: id,\n          worldId: (this.world as any).id || 'default',\n          entityType: 'spawn_point',\n          position: JSON.stringify(spawnPoint.position),\n          metadata: {\n            currentCount: spawnPoint.currentCount,\n            lastSpawnTime: new Date(spawnPoint.lastSpawnTime).toISOString(),\n            active: spawnPoint.active\n          }\n        })\n      }\n\n      // Save respawn queue\n      for (let i = 0; i < this.respawnQueue.length; i++) {\n        const task = this.respawnQueue[i]\n        entities.push({\n          entityId: `respawn_task_${i}`,\n          worldId: (this.world as any).id || 'default',\n          entityType: 'respawn_task',\n          position: JSON.stringify({ x: 0, y: 0, z: 0 }),\n          metadata: {\n            spawnerId: task.spawnerId,\n            npcId: task.npcId,\n            respawnTime: task.respawnTime,\n            scheduledTime: new Date(task.scheduledTime).toISOString()\n          }\n        })\n      }\n\n      await persistence.saveWorldEntities(entities)\n      this.pendingSaves = false\n      this.lastSaveTime = now\n      console.log(`[NPCSpawnManager] Saved spawn data`)\n    } catch (error) {\n      console.error(`[NPCSpawnManager] Failed to save spawn data:`, error)\n    }\n  }\n\n  /**\n   * Mark for save\n   */\n  private markForSave(): void {\n    this.pendingSaves = true\n  }\n\n  /**\n   * Update spawn points and respawn queue\n   */\n  update(_delta: number): void {\n    const now = Date.now()\n\n    // Process respawn queue\n    const tasksToProcess = this.respawnQueue.filter(task => now >= task.scheduledTime)\n    for (const task of tasksToProcess) {\n      this.processRespawn(task)\n    }\n\n    // Remove processed tasks\n    const oldQueueLength = this.respawnQueue.length\n    this.respawnQueue = this.respawnQueue.filter(task => now < task.scheduledTime)\n    if (this.respawnQueue.length !== oldQueueLength) {\n      this.markForSave()\n    }\n\n    // Check spawn points\n    for (const [_id, spawnPoint] of this.spawnPoints) {\n      if (!spawnPoint.active) {\n        continue\n      }\n\n      // Check if we need to spawn more NPCs\n      if (spawnPoint.currentCount < spawnPoint.maxCount) {\n        // Check if enough time has passed\n        if (now - spawnPoint.lastSpawnTime >= spawnPoint.respawnTime) {\n          this.spawnAtPoint(spawnPoint)\n        }\n      }\n    }\n  }\n\n  /**\n   * Register a spawn point\n   */\n  registerSpawnPoint(config: {\n    id: string\n    position: Vector3\n    npcId: number\n    maxCount?: number\n    respawnTime?: number\n    radius?: number\n  }): void {\n    const spawnPoint: SpawnPoint = {\n      id: config.id,\n      position: config.position,\n      npcId: config.npcId,\n      maxCount: config.maxCount || 1,\n      respawnTime: config.respawnTime || 60000, // 1 minute default\n      radius: config.radius || 5,\n      active: true,\n      currentCount: 0,\n      lastSpawnTime: 0,\n    }\n\n    this.spawnPoints.set(config.id, spawnPoint)\n\n    // Initial spawn\n    for (let i = 0; i < spawnPoint.maxCount; i++) {\n      this.spawnAtPoint(spawnPoint)\n    }\n  }\n\n  /**\n   * Schedule a respawn\n   */\n  scheduleRespawn(spawnerId: string, npcId: number, respawnTime: number): void {\n    const task: RespawnTask = {\n      spawnerId,\n      npcId,\n      respawnTime,\n      scheduledTime: Date.now() + respawnTime,\n    }\n\n    this.respawnQueue.push(task)\n    this.markForSave()\n\n    // Update spawn point count\n    const spawnPoint = this.spawnPoints.get(spawnerId)\n    if (spawnPoint) {\n      spawnPoint.currentCount = Math.max(0, spawnPoint.currentCount - 1)\n      this.markForSave()\n    }\n  }\n\n  /**\n   * Activate/deactivate spawn point\n   */\n  setSpawnPointActive(spawnerId: string, active: boolean): void {\n    const spawnPoint = this.spawnPoints.get(spawnerId)\n    if (spawnPoint) {\n      spawnPoint.active = active\n      this.markForSave()\n    }\n  }\n\n  /**\n   * Get all spawn points\n   */\n  getSpawnPoints(): SpawnPoint[] {\n    return Array.from(this.spawnPoints.values())\n  }\n\n  /**\n   * Spawn NPC at spawn point\n   */\n  private spawnAtPoint(spawnPoint: SpawnPoint): void {\n    // Calculate random position within radius\n    const angle = Math.random() * Math.PI * 2\n    const distance = Math.random() * spawnPoint.radius\n\n    const position: Vector3 = {\n      x: spawnPoint.position.x + Math.cos(angle) * distance,\n      y: spawnPoint.position.y,\n      z: spawnPoint.position.z + Math.sin(angle) * distance,\n    }\n\n    // Spawn NPC\n    const npc = this.npcSystem.spawnNPC(spawnPoint.npcId, position, spawnPoint.id)\n\n    if (npc) {\n      spawnPoint.currentCount++\n      spawnPoint.lastSpawnTime = Date.now()\n      this.markForSave()\n\n      // Emit spawn event\n      this.world.events.emit('spawn:npc', {\n        spawnerId: spawnPoint.id,\n        npcId: (npc as any).id || npc.data?.id,\n        position,\n      })\n    }\n  }\n\n  /**\n   * Process respawn task\n   */\n  private processRespawn(task: RespawnTask): void {\n    const spawnPoint = this.spawnPoints.get(task.spawnerId)\n    if (!spawnPoint || !spawnPoint.active) {\n      return\n    }\n\n    // Spawn the NPC\n    this.spawnAtPoint(spawnPoint)\n  }\n\n  /**\n   * Register default spawn points\n   */\n  private registerDefaultSpawnPoints(): void {\n    // Goblin spawns\n    this.registerSpawnPoint({\n      id: 'goblin_spawn_1',\n      position: { x: 100, y: 0, z: 100 },\n      npcId: 1, // Goblin\n      maxCount: 3,\n      respawnTime: 30000, // 30 seconds\n      radius: 10,\n    })\n\n    this.registerSpawnPoint({\n      id: 'goblin_spawn_2',\n      position: { x: 150, y: 0, z: 120 },\n      npcId: 1, // Goblin\n      maxCount: 2,\n      respawnTime: 30000,\n      radius: 8,\n    })\n\n    // Guard posts\n    this.registerSpawnPoint({\n      id: 'guard_post_1',\n      position: { x: 0, y: 0, z: 50 },\n      npcId: 2, // Guard\n      maxCount: 2,\n      respawnTime: 60000, // 1 minute\n      radius: 2,\n    })\n\n    this.registerSpawnPoint({\n      id: 'guard_post_2',\n      position: { x: 0, y: 0, z: -50 },\n      npcId: 2, // Guard\n      maxCount: 2,\n      respawnTime: 60000,\n      radius: 2,\n    })\n\n    // Shopkeeper spawn (doesn't respawn)\n    this.registerSpawnPoint({\n      id: 'shop_spawn',\n      position: { x: -20, y: 0, z: 0 },\n      npcId: 100, // Bob the shopkeeper\n      maxCount: 1,\n      respawnTime: 300000, // 5 minutes\n      radius: 0,\n    })\n\n    // Quest giver spawn\n    this.registerSpawnPoint({\n      id: 'quest_giver_spawn',\n      position: { x: 10, y: 0, z: 10 },\n      npcId: 200, // Elder Grimwald\n      maxCount: 1,\n      respawnTime: 300000,\n      radius: 0,\n    })\n  }\n}\n", "/**\n * Unified environment variable access\n * Works in both browser and Node.js environments\n */\n\n// Check if we're in a Node.js environment\nconst isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\n\n// Helper to safely access environment variables\nfunction getEnvVar(key: string, defaultValue?: string): string | undefined {\n  // In Vite/browser environment, use import.meta.env\n  if (typeof import.meta?.env !== 'undefined') {\n    const value = import.meta.env[key];\n    if (value !== undefined) {\n      return value;\n    }\n  }\n\n  // In Node.js environment, fall back to process.env\n  if (isNode && typeof process.env !== 'undefined') {\n    const value = process.env[key];\n    if (value !== undefined) {\n      return value;\n    }\n  }\n\n  return defaultValue;\n}\n\n// Environment detection\nexport const ENV = {\n  // Environment mode\n  MODE: getEnvVar('MODE', 'development')!,\n  NODE_ENV: getEnvVar('NODE_ENV', 'development')!,\n  PROD: getEnvVar('PROD') === 'true' || getEnvVar('NODE_ENV') === 'production',\n  DEV: getEnvVar('DEV') === 'true' || getEnvVar('NODE_ENV') === 'development',\n  TEST: getEnvVar('TEST') === 'true' || getEnvVar('NODE_ENV') === 'test' || getEnvVar('VITEST') === 'true',\n\n  // Server configuration\n  PORT: getEnvVar('PORT', '3000')!,\n  WS_PORT: getEnvVar('WS_PORT', '4445')!,\n  WORLD: getEnvVar('WORLD', 'world')!,\n  SAVE_INTERVAL: getEnvVar('SAVE_INTERVAL', '60')!,\n  ENABLE_RPG: getEnvVar('ENABLE_RPG', 'true')!,\n  RPG_SYSTEMS: getEnvVar('RPG_SYSTEMS'),\n  RPG_WORLD_TYPE: getEnvVar('RPG_WORLD_TYPE', 'runescape')!,\n\n  // LiveKit configuration (client-safe)\n  LIVEKIT_URL: getEnvVar('LIVEKIT_URL') || getEnvVar('LIVEKIT_WS_URL'),\n  LIVEKIT_API_KEY: getEnvVar('LIVEKIT_API_KEY'),\n\n  // Note: Sensitive variables like JWT_SECRET, ADMIN_CODE, and LIVEKIT_API_SECRET\n  // are now in env-server.ts and should only be imported on the server side\n\n  // Public environment variables (exposed to client)\n  PUBLIC_API_URL: getEnvVar('PUBLIC_API_URL'),\n  PUBLIC_ASSETS_URL: getEnvVar('PUBLIC_ASSETS_URL', '/assets/')!,\n  PUBLIC_MAX_UPLOAD_SIZE: getEnvVar('PUBLIC_MAX_UPLOAD_SIZE'),\n\n  // Hyperfy configuration\n  HYPERFY_ASSETS_URL: getEnvVar('HYPERFY_ASSETS_URL'),\n  HYPERFY_ASSETS_DIR: getEnvVar('HYPERFY_ASSETS_DIR'),\n  HYPERFY_NETWORK_RATE: getEnvVar('HYPERFY_NETWORK_RATE', '8')!,\n  HYPERFY_MAX_DELTA_TIME: getEnvVar('HYPERFY_MAX_DELTA_TIME', String(1 / 30))!,\n  HYPERFY_FIXED_DELTA_TIME: getEnvVar('HYPERFY_FIXED_DELTA_TIME', String(1 / 60))!,\n  HYPERFY_LOG_LEVEL: getEnvVar('HYPERFY_LOG_LEVEL'),\n  HYPERFY_PHYSICS_ENABLED: getEnvVar('HYPERFY_PHYSICS_ENABLED', 'true')!,\n  HYPERFY_GRAVITY_X: getEnvVar('HYPERFY_GRAVITY_X', '0')!,\n  HYPERFY_GRAVITY_Y: getEnvVar('HYPERFY_GRAVITY_Y', '-9.81')!,\n  HYPERFY_GRAVITY_Z: getEnvVar('HYPERFY_GRAVITY_Z', '0')!,\n\n  // Build configuration\n  CLIENT_BUILD_DIR: getEnvVar('CLIENT_BUILD_DIR'),\n  NO_CLIENT_SERVE: getEnvVar('NO_CLIENT_SERVE'),\n\n  // Git information\n  COMMIT_HASH: getEnvVar('COMMIT_HASH'),\n\n  // Helper function to get any environment variable\n  get: getEnvVar,\n\n  // Helper to check if a variable exists\n  has: (key: string): boolean => getEnvVar(key) !== undefined,\n\n  // Get all public environment variables\n  getPublicVars: (): Record<string, string> => {\n    const publicVars: Record<string, string> = {};\n    const envVars = isNode ? process.env : import.meta.env;\n\n    if (envVars) {\n      for (const [key, value] of Object.entries(envVars)) {\n        if (key.startsWith('PUBLIC_') && typeof value === 'string') {\n          publicVars[key] = value;\n        }\n      }\n    }\n\n    return publicVars;\n  },\n};\n\n// Export type for TypeScript\nexport type EnvironmentVariables = typeof ENV\n", "// Conditional imports for browser/server compatibility\n// Only import fs and path on server side\nconst isServer = typeof window === 'undefined' && typeof process !== 'undefined'\n\nlet fs: any = null\nlet path: any = null\n\nif (isServer) {\n  // Server-side\n  try {\n    fs = require('fs/promises')\n    path = require('path')\n  } catch (error) {\n    console.warn('[ConfigLoader] Failed to import fs/path modules:', error)\n  }\n}\nimport type { NPCDefinition, ItemDefinition } from '../types'\nimport { ENV } from '../../core/env'\n\n// Shop type from NPC definition - define explicitly to avoid type resolution issues\ntype Shop = {\n  name: string\n  stock: Array<{ itemId: number; stock: number }>\n  currency: string\n  buyModifier: number\n  sellModifier: number\n  restock: boolean\n  restockTime: number\n}\n\n// Quest type for now (can be expanded later)\ninterface Quest {\n  id: string\n  name: string\n  description: string\n  requirements?: any\n  rewards?: any\n  steps?: any[]\n}\n\ninterface _ConfigData {\n  npcs: Map<number, NPCDefinition>\n  items: Map<number, ItemDefinition>\n  lootTables: Map<string, LootTable>\n  shops: Map<string, Shop>\n  quests: Map<string, Quest>\n  skills: Map<string, any>\n}\n\ninterface ItemConfig {\n  id: number\n  name: string\n  type: string\n  value?: number\n  stackable?: boolean\n  equipable?: boolean\n  slot?: string\n  stats?: any\n}\n\ninterface NPCConfig {\n  id: number\n  name: string\n  type?: string\n  level?: number\n  combatLevel?: number\n  behavior?: string\n  aggressionRange?: number\n  wanderRadius?: number\n  aggressionLevel?: number\n  dropTable?: string\n  dialogue?: string\n  faction?: string\n  attackSpeed?: number\n  combatStyle?: string\n  stats?: {\n    hitpoints?: number\n    attack?: number\n    strength?: number\n    defence?: number\n    speed?: number\n  }\n}\n\ninterface LootTable {\n  id: string\n  name: string\n  drops: Array<{\n    itemId: number\n    chance: number\n    minQuantity?: number\n    maxQuantity?: number\n  }>\n}\n\ninterface SkillConfig {\n  name: string\n  baseExperience: number\n  experienceTable: number[]\n}\n\ninterface QuestConfig {\n  id: number\n  name: string\n  description: string\n  requirements?: any\n  rewards?: any\n  steps?: any[]\n}\n\nexport class ConfigLoader {\n  private static instance: ConfigLoader\n  private configLoaded = false\n\n  // Configuration data\n  private npcs: { [key: number]: NPCConfig } = {}\n  private items: { [key: number]: ItemConfig } = {}\n  private lootTables: { [key: string]: LootTable } = {}\n  private skills: { [key: string]: SkillConfig } = {}\n  private quests: { [key: number]: QuestConfig } = {}\n\n  private constructor() {\n    // Empty constructor - no path needed for test mode\n  }\n\n  static getInstance(): ConfigLoader {\n    if (!ConfigLoader.instance) {\n      ConfigLoader.instance = new ConfigLoader()\n    }\n    return ConfigLoader.instance\n  }\n\n  /**\n   * Enable test mode with hardcoded data\n   */\n  enableTestMode(): void {\n    this.loadTestData()\n    this.configLoaded = true\n  }\n\n  /**\n   * Load all configurations\n   */\n  async loadAllConfigurations(): Promise<void> {\n    if (this.configLoaded) {\n      return\n    }\n\n    // Only use test data if explicitly in test mode\n    if (ENV.TEST) {\n      this.enableTestMode()\n      return\n    }\n\n    // In production/development, config files are required\n    try {\n      await this.loadFromFiles()\n      this.configLoaded = true\n    } catch (error) {\n      throw new Error(\n        `Failed to load configuration files: ${error}. Configuration files are required in non-test environments.`\n      )\n    }\n  }\n\n  /**\n   * Load configurations from files\n   */\n  private async loadFromFiles(): Promise<void> {\n    if (!isServer || !fs || !path) {\n      console.log('[ConfigLoader] Not running on server or fs/path not available - using default configurations')\n      return\n    }\n\n    const configDir = path.join(process.cwd(), 'src/rpg/config')\n\n    try {\n      // Load NPCs\n      const npcFiles = ['monsters.json', 'guards.json', 'quest_givers.json', 'shops.json']\n      for (const file of npcFiles) {\n        try {\n          const filePath = path.join(configDir, 'npcs', file)\n          const data = await fs.readFile(filePath, 'utf-8')\n          const npcs = JSON.parse(data)\n          // Convert array to object with ID as key\n          if (Array.isArray(npcs)) {\n            npcs.forEach(npc => {\n              this.npcs[npc.id] = npc\n            })\n          } else {\n            Object.assign(this.npcs, npcs)\n          }\n        } catch (error) {\n          console.warn(`Failed to load NPC file ${file}:`, error)\n        }\n      }\n\n      // Load Items\n      const itemFiles = ['basic_items.json', 'food_items.json', 'bones.json']\n      for (const file of itemFiles) {\n        try {\n          const filePath = path.join(configDir, 'items', file)\n          const data = await fs.readFile(filePath, 'utf-8')\n          const items = JSON.parse(data)\n          Object.assign(this.items, items)\n        } catch (error) {\n          console.warn(`Failed to load item file ${file}:`, error)\n        }\n      }\n\n      // Load Loot Tables\n      const lootFiles = [\n        'goblin_drops.json',\n        'skeleton_drops.json',\n        'hill_giant_drops.json',\n        'common_drops.json',\n        'cow_drops.json',\n      ]\n      for (const file of lootFiles) {\n        try {\n          const filePath = path.join(configDir, 'loot', file)\n          const data = await fs.readFile(filePath, 'utf-8')\n          const lootTable = JSON.parse(data)\n          this.lootTables[lootTable.id] = lootTable\n        } catch (error) {\n          console.warn(`Failed to load loot file ${file}:`, error)\n        }\n      }\n\n      // Load Skills\n      const skillFiles = ['combat.json', 'gathering.json']\n      for (const file of skillFiles) {\n        try {\n          const filePath = path.join(configDir, 'skills', file)\n          const data = await fs.readFile(filePath, 'utf-8')\n          const skills = JSON.parse(data)\n          Object.assign(this.skills, skills)\n        } catch (error) {\n          console.warn(`Failed to load skill file ${file}:`, error)\n        }\n      }\n\n      // Load Quests\n      const questFiles = ['tutorial_quest.json', 'goblin_menace.json']\n      for (const file of questFiles) {\n        try {\n          const filePath = path.join(configDir, 'quests', file)\n          const data = await fs.readFile(filePath, 'utf-8')\n          const quest = JSON.parse(data)\n          this.quests[quest.id] = quest\n        } catch (error) {\n          console.warn(`Failed to load quest file ${file}:`, error)\n        }\n      }\n    } catch (error) {\n      throw new Error(`Failed to load configurations: ${error}`)\n    }\n  }\n\n  /**\n   * Load test data for development and testing\n   */\n  private loadTestData(): void {\n    // Test NPCs\n    this.npcs = {\n      1: {\n        id: 1,\n        name: 'Goblin',\n        type: 'monster',\n        level: 2,\n        combatLevel: 2,\n        behavior: 'aggressive',\n        aggressionRange: 10,\n        wanderRadius: 5,\n        aggressionLevel: 1,\n        dropTable: 'goblin_drops',\n        attackSpeed: 3000,\n        combatStyle: 'melee',\n        stats: {\n          hitpoints: 25,\n          attack: 5,\n          strength: 5,\n          defence: 1,\n          speed: 4,\n        },\n      },\n      2: {\n        id: 2,\n        name: 'Guard',\n        type: 'guard',\n        level: 10,\n        combatLevel: 15,\n        behavior: 'defensive',\n        aggressionRange: 5,\n        wanderRadius: 3,\n        aggressionLevel: 0,\n        stats: {\n          hitpoints: 100,\n          attack: 20,\n          strength: 20,\n          defence: 25,\n          speed: 6,\n        },\n      },\n      100: {\n        id: 100,\n        name: 'Test Boss',\n        type: 'boss',\n        level: 50,\n        combatLevel: 50,\n        behavior: 'aggressive',\n        aggressionRange: 15,\n        wanderRadius: 10,\n        aggressionLevel: 2,\n        dropTable: 'goblin_drops',\n        attackSpeed: 2000,\n        combatStyle: 'melee',\n        stats: {\n          hitpoints: 500,\n          attack: 50,\n          strength: 50,\n          defence: 50,\n          speed: 8,\n        },\n      },\n      3: {\n        id: 3,\n        name: 'Cow',\n        type: 'animal',\n        level: 2,\n        combatLevel: 2,\n        behavior: 'passive',\n        aggressionRange: 0,\n        wanderRadius: 10,\n        aggressionLevel: 0,\n        dropTable: 'cow_drops',\n        attackSpeed: 4000,\n        combatStyle: 'melee',\n        stats: {\n          hitpoints: 8,\n          attack: 0,\n          strength: 0,\n          defence: 0,\n          speed: 2,\n        },\n      },\n      200: {\n        id: 200,\n        name: 'Test NPC',\n        type: 'citizen',\n        level: 1,\n        combatLevel: 1,\n        behavior: 'passive',\n        aggressionRange: 0,\n        wanderRadius: 5,\n        aggressionLevel: 0,\n        stats: {\n          hitpoints: 10,\n          attack: 1,\n          strength: 1,\n          defence: 1,\n          speed: 3,\n        },\n      },\n    }\n\n    // Test Items\n    this.items = {\n      1: {\n        id: 1,\n        name: 'Bronze Sword',\n        type: 'weapon',\n        value: 10,\n        stackable: false,\n        equipable: true,\n        slot: 'weapon',\n        stats: { attack: 5 },\n      },\n      2: {\n        id: 2,\n        name: 'Bread',\n        type: 'food',\n        value: 5,\n        stackable: true,\n        equipable: false,\n      },\n      3: {\n        id: 3,\n        name: 'Bones',\n        type: 'material',\n        value: 1,\n        stackable: true,\n        equipable: false,\n      },\n    }\n\n    // Test Loot Tables\n    this.lootTables = {\n      goblin_drops: {\n        id: 'goblin_drops',\n        name: 'Goblin Drops',\n        drops: [\n          { itemId: 3, chance: 1.0, minQuantity: 1, maxQuantity: 1 }, // Always drop bones\n          { itemId: 2, chance: 0.3, minQuantity: 1, maxQuantity: 2 }, // 30% chance for bread\n          { itemId: 1, chance: 0.05, minQuantity: 1, maxQuantity: 1 }, // 5% chance for bronze sword\n        ],\n      },\n      common_drops: {\n        id: 'common_drops',\n        name: 'Common Drops',\n        drops: [{ itemId: 2, chance: 0.5, minQuantity: 1, maxQuantity: 1 }],\n      },\n      cow_drops: {\n        id: 'cow_drops',\n        name: 'Cow Drops',\n        drops: [\n          { itemId: 3, chance: 1.0, minQuantity: 1, maxQuantity: 1 }, // Always drop bones\n          { itemId: 2132, chance: 1.0, minQuantity: 1, maxQuantity: 1 }, // Raw beef (if available)\n          { itemId: 1739, chance: 1.0, minQuantity: 1, maxQuantity: 1 }, // Cowhide (if available)\n        ],\n      },\n    }\n\n    // Test Skills\n    this.skills = {\n      attack: {\n        name: 'Attack',\n        baseExperience: 83,\n        experienceTable: [0, 83, 174, 276, 388, 512, 650, 801, 969, 1154, 1358],\n      },\n      strength: {\n        name: 'Strength',\n        baseExperience: 83,\n        experienceTable: [0, 83, 174, 276, 388, 512, 650, 801, 969, 1154, 1358],\n      },\n      defence: {\n        name: 'Defence',\n        baseExperience: 83,\n        experienceTable: [0, 83, 174, 276, 388, 512, 650, 801, 969, 1154, 1358],\n      },\n      hitpoints: {\n        name: 'Hitpoints',\n        baseExperience: 83,\n        experienceTable: [0, 83, 174, 276, 388, 512, 650, 801, 969, 1154, 1358],\n      },\n    }\n\n    // Test Quests\n    this.quests = {\n      1: {\n        id: 1,\n        name: 'Tutorial Quest',\n        description: 'Learn the basics of the game',\n        requirements: {},\n        rewards: { experience: { attack: 100 }, items: [{ id: 1, quantity: 1 }] },\n        steps: [],\n      },\n      2: {\n        id: 2,\n        name: 'Goblin Menace',\n        description: 'Defeat 5 goblins',\n        requirements: { level: 2 },\n        rewards: { experience: { attack: 500 }, items: [{ id: 2, quantity: 5 }] },\n        steps: [],\n      },\n    }\n  }\n\n  /**\n   * Get NPC configuration by ID\n   */\n  getNPC(id: number): NPCConfig | null {\n    return this.npcs[id] || null\n  }\n\n  /**\n   * Get all NPCs\n   */\n  getAllNPCs(): { [key: number]: NPCConfig } {\n    return this.npcs\n  }\n\n  /**\n   * Get item configuration by ID\n   */\n  getItem(id: number): ItemConfig | null {\n    return this.items[id] || null\n  }\n\n  /**\n   * Get all items\n   */\n  getAllItems(): { [key: number]: ItemConfig } {\n    return this.items\n  }\n\n  /**\n   * Get loot table by ID\n   */\n  getLootTable(id: string): LootTable | null {\n    return this.lootTables[id] || null\n  }\n\n  /**\n   * Get all loot tables\n   */\n  getAllLootTables(): { [key: string]: LootTable } {\n    return this.lootTables\n  }\n\n  /**\n   * Get skill configuration by name\n   */\n  getSkill(name: string): SkillConfig | null {\n    return this.skills[name] || null\n  }\n\n  /**\n   * Get all skills\n   */\n  getAllSkills(): { [key: string]: SkillConfig } {\n    return this.skills\n  }\n\n  /**\n   * Get quest configuration by ID\n   */\n  getQuest(id: number): QuestConfig | null {\n    return this.quests[id] || null\n  }\n\n  /**\n   * Get all quests\n   */\n  getAllQuests(): { [key: number]: QuestConfig } {\n    return this.quests\n  }\n\n  /**\n   * Check if configuration is loaded\n   */\n  isConfigLoaded(): boolean {\n    return this.configLoaded\n  }\n\n  /**\n   * Reload all configurations\n   */\n  async reload(): Promise<void> {\n    this.configLoaded = false\n    this.npcs = {}\n    this.items = {}\n    this.lootTables = {}\n    this.skills = {}\n    this.quests = {}\n\n    await this.loadAllConfigurations()\n  }\n}\n", "/**\n * Configuration system for Hyperfy\n * Handles environment-based settings and removes hardcoded values\n */\n\nimport { ENV } from './env';\n\nexport interface HyperfyConfig {\n  assetsUrl: string\n  assetsDir: string | null\n  isProduction: boolean\n  isDevelopment: boolean\n  isTest: boolean\n  networkRate: number\n  maxDeltaTime: number\n  fixedDeltaTime: number\n  logLevel: 'debug' | 'info' | 'warn' | 'error'\n  physics: {\n    enabled: boolean\n    gravity: { x: number; y: number; z: number }\n  }\n}\n\nclass ConfigurationManager {\n  private static instance: ConfigurationManager;\n  private config: HyperfyConfig;\n\n  private constructor() {\n    this.config = this.loadConfiguration();\n  }\n\n  static getInstance(): ConfigurationManager {\n    if (!ConfigurationManager.instance) {\n      ConfigurationManager.instance = new ConfigurationManager();\n    }\n    return ConfigurationManager.instance;\n  }\n\n  private loadConfiguration(): HyperfyConfig {\n    const isProduction = ENV.PROD;\n    const isDevelopment = ENV.DEV;\n    const isTest = ENV.TEST;\n\n    return {\n      // Asset configuration - no more hardcoded localhost!\n      assetsUrl:\n        ENV.HYPERFY_ASSETS_URL || (isProduction ? 'https://assets.hyperfy.io/' : 'https://test-assets.hyperfy.io/'),\n      assetsDir: ENV.HYPERFY_ASSETS_DIR || (isTest ? './world/assets' : null),\n\n      // Environment flags\n      isProduction,\n      isDevelopment,\n      isTest,\n\n      // Network configuration\n      networkRate: parseFloat(ENV.HYPERFY_NETWORK_RATE || '8'),\n      maxDeltaTime: parseFloat(ENV.HYPERFY_MAX_DELTA_TIME || String(1 / 30)),\n      fixedDeltaTime: parseFloat(ENV.HYPERFY_FIXED_DELTA_TIME || String(1 / 60)),\n\n      // Logging configuration\n      logLevel: (ENV.HYPERFY_LOG_LEVEL || (isProduction ? 'warn' : 'info')) as any,\n\n      // Physics configuration\n      physics: {\n        enabled: ENV.HYPERFY_PHYSICS_ENABLED === 'true',\n        gravity: {\n          x: parseFloat(ENV.HYPERFY_GRAVITY_X || '0'),\n          y: parseFloat(ENV.HYPERFY_GRAVITY_Y || '-9.81'),\n          z: parseFloat(ENV.HYPERFY_GRAVITY_Z || '0'),\n        },\n      },\n    };\n  }\n\n  get(): HyperfyConfig {\n    return this.config;\n  }\n\n  /**\n   * Get a specific configuration value\n   */\n  getValue<K extends keyof HyperfyConfig>(key: K): HyperfyConfig[K] {\n    return this.config[key];\n  }\n\n  /**\n   * Update configuration (mainly for testing)\n   */\n  update(updates: Partial<HyperfyConfig>): void {\n    this.config = { ...this.config, ...updates };\n  }\n\n  /**\n   * Reset to default configuration\n   */\n  reset(): void {\n    this.config = this.loadConfiguration();\n  }\n}\n\n// Export singleton instance\nexport const Config = ConfigurationManager.getInstance();\n", "/**\n * Logging system for Hyperfy\n * Replaces console.log statements with configurable logging\n */\n\nimport { Config } from './config';\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\nexport interface LoggerOptions {\n  prefix?: string\n  logLevel?: keyof typeof LogLevel\n}\n\nclass Logger {\n  private prefix: string;\n  private logLevel: LogLevel;\n  private static globalLogLevel: LogLevel | null = null;\n\n  constructor(options: LoggerOptions = {}) {\n    this.prefix = options.prefix || '';\n\n    // Use global log level if set, otherwise use config\n    if (Logger.globalLogLevel !== null) {\n      this.logLevel = Logger.globalLogLevel;\n    } else {\n      const configLevel = options.logLevel || Config.getValue('logLevel').toUpperCase();\n      this.logLevel = LogLevel[configLevel as keyof typeof LogLevel] || LogLevel.INFO;\n    }\n  }\n\n  /**\n   * Set global log level for all loggers\n   */\n  static setGlobalLogLevel(level: keyof typeof LogLevel): void {\n    Logger.globalLogLevel = LogLevel[level];\n  }\n\n  /**\n   * Create a child logger with a prefix\n   */\n  child(prefix: string): Logger {\n    return new Logger({\n      prefix: this.prefix ? `${this.prefix}:${prefix}` : prefix,\n      logLevel: LogLevel[this.logLevel] as keyof typeof LogLevel,\n    });\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.logLevel && !Config.getValue('isProduction');\n  }\n\n  private formatMessage(message: string): string {\n    return this.prefix ? `[${this.prefix}] ${message}` : message;\n  }\n\n  debug(message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.debug(this.formatMessage(message), ...args);\n    }\n  }\n\n  info(message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      console.info(this.formatMessage(message), ...args);\n    }\n  }\n\n  warn(message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      console.warn(this.formatMessage(message), ...args);\n    }\n  }\n\n  error(message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      console.error(this.formatMessage(message), ...args);\n    }\n  }\n\n  /**\n   * Log performance timing\n   */\n  time(label: string): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.time(this.formatMessage(label));\n    }\n  }\n\n  timeEnd(label: string): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.timeEnd(this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Create a scoped timer\n   */\n  timer(label: string): () => void {\n    const start = performance.now();\n    return () => {\n      if (this.shouldLog(LogLevel.DEBUG)) {\n        const duration = performance.now() - start;\n        this.debug(`${label} took ${duration.toFixed(2)}ms`);\n      }\n    };\n  }\n}\n\n// Create default logger instance\nexport const logger = new Logger();\n\n// Export factory function for creating named loggers\nexport function createLogger(prefix: string, options?: Omit<LoggerOptions, 'prefix'>): Logger {\n  return new Logger({ ...options, prefix });\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport { NPCEntity } from '../entities/NPCEntity'\nimport {\n  AttackType,\n  CombatComponent,\n  CombatStyle,\n  MovementComponent,\n  NPCBehavior,\n  NPCComponent,\n  NPCDefinition,\n  NPCState,\n  NPCType,\n  PlayerEntity,\n  RPGEntity,\n  StatsComponent,\n  Vector3,\n} from '../types/index'\nimport { NPCBehaviorManager } from './npc/NPCBehaviorManager'\nimport { NPCDialogueManager } from './npc/NPCDialogueManager'\nimport { NPCSpawnManager } from './npc/NPCSpawnManager'\nimport { ConfigLoader } from '../config/ConfigLoader'\nimport { createLogger } from '../../core/logger'\nimport { VisualRepresentationSystem } from './VisualRepresentationSystem'\n\nexport class NPCSystem extends System {\n  // Core management\n  private npcs: Map<string, NPCEntity> = new Map()\n  private npcDefinitions: Map<number, NPCDefinition> = new Map()\n\n  // Sub-managers\n  private behaviorManager: NPCBehaviorManager\n  private dialogueManager: NPCDialogueManager\n  private spawnManager: NPCSpawnManager\n  private visualSystem: VisualRepresentationSystem | null = null\n\n  // Configuration\n  private readonly INTERACTION_RANGE = 3\n\n  // Add counter for unique IDs\n  private npcIdCounter = 0\n\n  // Logger\n  private logger = createLogger('NPCSystem')\n\n  constructor(world: World) {\n    super(world)\n    this.behaviorManager = new NPCBehaviorManager(world)\n    this.dialogueManager = new NPCDialogueManager(world)\n    this.spawnManager = new NPCSpawnManager(world, this)\n  }\n\n  /**\n   * Initialize the system\n   */\n  override async init(_options: any): Promise<void> {\n    this.logger.info('Initializing...')\n\n    // Get visual representation system\n    this.visualSystem = (this.world as any).getSystem?.('visualRepresentation')\n\n    // Initialize sub-managers\n    this.behaviorManager.init()\n\n    // Load NPC definitions from config\n    const configLoader = ConfigLoader.getInstance()\n    if (!configLoader.isConfigLoaded()) {\n      await configLoader.loadAllConfigurations()\n    }\n\n    // Register all NPCs from config\n    const npcConfigs = configLoader.getAllNPCs()\n    this.logger.debug(`Found ${Object.keys(npcConfigs).length} NPC configs`)\n    for (const config of Object.values(npcConfigs)) {\n      const definition = this.convertConfigToDefinition(config)\n      this.registerNPCDefinition(definition)\n      this.logger.debug(`Registered NPC: ${definition.name} (ID: ${definition.id})`)\n    }\n    this.logger.info(`Loaded ${this.npcDefinitions.size} NPC definitions from config`)\n\n    // Listen for entity events\n    this.world.events.on('entity:created', (event: any) => {\n      const entity = this.getEntity(event.entityId)\n      if (entity && this.isNPCEntity(entity)) {\n        this.onNPCCreated(entity as NPCEntity)\n      }\n    })\n\n    this.world.events.on('entity:destroyed', (event: any) => {\n      this.npcs.delete(event.entityId)\n    })\n\n    // Listen for combat events\n    this.world.events.on('entity:death', (event: any) => {\n      const npc = this.npcs.get(event.entityId)\n      if (npc) {\n        this.onNPCDeath(npc, event.killerId)\n      }\n    })\n  }\n\n  /**\n   * Fixed update for AI and behavior\n   */\n  override fixedUpdate(_delta: number): void {\n    // Update NPC behaviors\n    for (const [_npcId, npc] of this.npcs) {\n      this.behaviorManager.updateBehavior(npc as any, _delta)\n    }\n\n    // Update spawn points\n    this.spawnManager.update(_delta)\n  }\n\n  /**\n   * Regular update for animations and visuals\n   */\n  override update(_delta: number): void {\n    // Update dialogue sessions\n    this.dialogueManager.update(_delta)\n  }\n\n  /**\n   * Convert NPCConfig to NPCDefinition\n   */\n  private convertConfigToDefinition(config: any): NPCDefinition {\n    // Map type string to NPCType enum\n    const npcTypeMap: { [key: string]: NPCType } = {\n      monster: NPCType.MONSTER,\n      guard: NPCType.GUARD,\n      quest_giver: NPCType.QUEST_GIVER,\n      shop: NPCType.SHOPKEEPER,\n      shopkeeper: NPCType.SHOPKEEPER,\n      banker: NPCType.BANKER,\n      boss: NPCType.BOSS,\n      animal: NPCType.ANIMAL,\n      citizen: NPCType.CITIZEN,\n    }\n\n    // Map behavior string to NPCBehavior enum\n    const behaviorMap: { [key: string]: NPCBehavior } = {\n      aggressive: NPCBehavior.AGGRESSIVE,\n      passive: NPCBehavior.PASSIVE,\n      defensive: NPCBehavior.DEFENSIVE,\n      friendly: NPCBehavior.FRIENDLY,\n      shop: NPCBehavior.SHOP,\n      quest: NPCBehavior.QUEST,\n      banker: NPCBehavior.BANKER,\n      wander: NPCBehavior.WANDER,\n      patrol: NPCBehavior.PATROL,\n      follow: NPCBehavior.FOLLOW,\n    }\n\n    return {\n      id: config.id,\n      name: config.name,\n      examine: config.examine || `A ${config.name}.`,\n      npcType: npcTypeMap[config.type?.toLowerCase()] || NPCType.CITIZEN,\n      behavior: behaviorMap[config.behavior?.toLowerCase()] || NPCBehavior.PASSIVE,\n      faction: config.faction || 'neutral',\n      level: config.level,\n      combatLevel: config.combatLevel,\n      maxHitpoints: config.stats?.hitpoints,\n      attackStyle: AttackType.MELEE, // Default to melee\n      aggressionLevel: config.aggressionLevel,\n      aggressionRange: config.aggressionRange,\n      combat: config.stats\n        ? {\n            attackBonus: config.stats.attack || 0,\n            strengthBonus: config.stats.strength || 0,\n            defenseBonus: config.stats.defence || 0,\n            maxHit: Math.floor((config.stats.strength || 0) / 4) + 1,\n            attackSpeed: config.attackSpeed || 4000,\n          }\n        : undefined,\n      lootTable: config.dropTable,\n      respawnTime: 60000, // Default 1 minute\n      wanderRadius: config.wanderRadius,\n      moveSpeed: config.stats?.speed || 1,\n      dialogue: config.dialogue ? { text: config.dialogue } : undefined,\n    }\n  }\n\n  /**\n   * Register an NPC definition\n   */\n  registerNPCDefinition(definition: NPCDefinition): void {\n    this.logger.debug(`Registering NPC definition: ${definition.id} - ${definition.name}`)\n    this.npcDefinitions.set(definition.id, definition)\n  }\n\n  /**\n   * Spawn an NPC at a position\n   */\n  spawnNPC(definitionId: number, position: Vector3, spawnerId?: string): NPCEntity | null {\n    // Check if the system is properly initialized\n    if (this.npcDefinitions.size === 0) {\n      // Try to initialize the config loader if not already done\n      const configLoader = ConfigLoader.getInstance()\n      try {\n        if (!configLoader.isConfigLoaded()) {\n          configLoader.enableTestMode() // For tests\n        }\n        const npcConfigs = configLoader.getAllNPCs()\n        for (const config of Object.values(npcConfigs)) {\n          const definition = this.convertConfigToDefinition(config)\n          this.registerNPCDefinition(definition)\n        }\n        this.logger.debug(`Loaded ${this.npcDefinitions.size} NPC definitions on-demand`)\n      } catch (error) {\n        this.logger.error(`Failed to load NPC definitions: ${error}`)\n        return null\n      }\n    }\n\n    const definition = this.npcDefinitions.get(definitionId)\n    if (!definition) {\n      this.logger.warn(\n        `[NPCSystem] Unknown NPC definition: ${definitionId}. Available definitions: ${Array.from(this.npcDefinitions.keys()).join(', ')}`\n      )\n\n      // Additional debugging information\n      this.logger.debug(`[NPCSystem] Total loaded definitions: ${this.npcDefinitions.size}`)\n      this.logger.debug(\n        `[NPCSystem] Config loader status: ${ConfigLoader.getInstance().isConfigLoaded() ? 'loaded' : 'not loaded'}`\n      )\n\n      return null\n    }\n\n    // Create NPC entity\n    const npc = this.createNPCEntity(definition, position)\n\n    // Set spawner reference\n    if (spawnerId) {\n      npc.spawnerId = spawnerId\n    }\n\n    // Add to world\n    this.addNPCToWorld(npc)\n\n    return npc\n  }\n\n  /**\n   * Despawn an NPC\n   */\n  despawnNPC(npcId: string): void {\n    const npc = this.npcs.get(npcId)\n    if (!npc) {\n      return\n    }\n\n    // Clean up\n    this.npcs.delete(npcId)\n\n    // Emit event\n    this.world.events.emit('npc:despawned', {\n      npcId,\n      position: npc.position,\n    })\n\n    // Remove from world\n    this.world.entities.destroyEntity(npcId)\n  }\n\n  /**\n   * Handle player interaction with NPC\n   */\n  interactWithNPC(playerId: string, npcId: string): void {\n    const player = this.getEntity(playerId) as PlayerEntity\n    const npc = this.npcs.get(npcId)\n\n    if (!player || !npc) {\n      return\n    }\n\n    // Check distance\n    const playerPos = this.getEntityPosition(player)\n    const npcPos = this.getEntityPosition(npc)\n    if (!playerPos || !npcPos) {\n      return\n    }\n\n    const distance = this.getDistance(playerPos as any, npcPos as any)\n    if (distance > this.INTERACTION_RANGE) {\n      this.sendMessage(playerId, \"You're too far away.\")\n      return\n    }\n\n    // Check if NPC is in combat\n    const npcCombat = npc.getComponent('combat') as any\n    if (npcCombat?.inCombat && npc.npcType !== NPCType.BOSS) {\n      this.sendMessage(playerId, 'The NPC is busy fighting!')\n      return\n    }\n\n    // Handle based on NPC type\n    switch (npc.npcType) {\n      case NPCType.QUEST_GIVER:\n        this.handleQuestGiverInteraction(playerId, npc)\n        break\n      case NPCType.SHOPKEEPER:\n        this.handleShopInteraction(playerId, npc)\n        break\n      case NPCType.BANKER:\n        this.handleBankerInteraction(playerId, npc)\n        break\n      case NPCType.SKILL_MASTER:\n        this.handleSkillMasterInteraction(playerId, npc)\n        break\n      default:\n        this.handleGenericInteraction(playerId, npc)\n    }\n\n    // Update last interaction time\n    npc.lastInteraction = Date.now()\n  }\n\n  /**\n   * Get NPC by ID\n   */\n  getNPC(npcId: string): NPCEntity | undefined {\n    return this.npcs.get(npcId)\n  }\n\n  /**\n   * Get all NPCs\n   */\n  getAllNPCs(): NPCEntity[] {\n    return Array.from(this.npcs.values())\n  }\n\n  /**\n   * Get NPCs in range of a position\n   */\n  getNPCsInRange(position: Vector3, range: number): NPCEntity[] {\n    const npcsInRange: NPCEntity[] = []\n\n    for (const npc of this.npcs.values()) {\n      const distance = this.getDistance(position as any, npc.position as any)\n      if (distance <= range) {\n        npcsInRange.push(npc)\n      }\n    }\n\n    return npcsInRange\n  }\n\n  /**\n   * Create NPC entity from definition\n   */\n  private createNPCEntity(definition: NPCDefinition, position: Vector3): NPCEntity {\n    const npc = new NPCEntity(this.world, `npc_${definition.id}_${Date.now()}_${this.npcIdCounter++}`, {\n      position,\n      definition,\n    })\n\n    // Add NPC component\n    const npcComponent: NPCComponent = {\n      type: 'npc',\n      entity: npc as any, // Will be set by addComponent\n      data: {}, // Will be set by addComponent\n      npcId: definition.id,\n      name: definition.name,\n      examine: definition.examine,\n      npcType: definition.npcType,\n      behavior: definition.behavior,\n      faction: definition.faction || 'neutral',\n      state: NPCState.IDLE,\n      level: definition.level || 1,\n\n      // Combat stats\n      combatLevel: definition.combatLevel || 1,\n      maxHitpoints: definition.maxHitpoints || 10,\n      currentHitpoints: definition.maxHitpoints || 10,\n      attackStyle: definition.attackStyle || AttackType.MELEE,\n      aggressionLevel: definition.aggressionLevel || 0,\n      aggressionRange: definition.aggressionRange || 5,\n\n      // Combat abilities\n      attackBonus: definition.combat?.attackBonus || 0,\n      strengthBonus: definition.combat?.strengthBonus || 0,\n      defenseBonus: definition.combat?.defenseBonus || 0,\n      maxHit: definition.combat?.maxHit || 1,\n      attackSpeed: definition.combat?.attackSpeed || 4,\n\n      // Spawning\n      respawnTime: definition.respawnTime || 60000,\n      wanderRadius: definition.wanderRadius || 5,\n      spawnPoint: { ...position },\n\n      // Interaction\n      lootTable: definition.lootTable,\n      dialogue: definition.dialogue,\n      shop: definition.shop,\n      questGiver: definition.questGiver ? true : false,\n\n      // State\n      currentTarget: null,\n      lastInteraction: 0,\n    }\n\n    npc.addComponent('npc', npcComponent)\n\n    // Add stats component if combat NPC\n    if (this.isCombatNPC(definition)) {\n      const stats: StatsComponent = {\n        type: 'stats',\n        entity: npc as any, // Will be set by addComponent\n        data: {}, // Will be set by addComponent\n        hitpoints: {\n          current: definition.maxHitpoints || 10,\n          max: definition.maxHitpoints || 10,\n          level: definition.combatLevel || 1,\n          xp: 0,\n        },\n        attack: { level: definition.combatLevel || 1, xp: 0, bonus: 0 },\n        strength: { level: definition.combatLevel || 1, xp: 0, bonus: 0 },\n        defense: { level: definition.combatLevel || 1, xp: 0, bonus: 0 },\n        ranged: { level: 1, xp: 0, bonus: 0 },\n        magic: { level: 1, xp: 0, bonus: 0 },\n        prayer: { level: 1, xp: 0, points: 0, maxPoints: 0 },\n        combatBonuses: {\n          attackStab: 0,\n          attackSlash: 0,\n          attackCrush: 0,\n          attackMagic: 0,\n          attackRanged: 0,\n          defenseStab: 0,\n          defenseSlash: 0,\n          defenseCrush: 0,\n          defenseMagic: 0,\n          defenseRanged: 0,\n          meleeStrength: definition.combat?.strengthBonus || 0,\n          rangedStrength: 0,\n          magicDamage: 0,\n          prayerBonus: 0,\n        },\n        combatLevel: definition.combatLevel || 1,\n        totalLevel: definition.combatLevel || 1,\n      }\n      npc.addComponent('stats', stats)\n\n      // Add combat component for combat NPCs\n      const combat: CombatComponent = {\n        type: 'combat',\n        entity: npc as any, // Will be set by addComponent\n        data: {}, // Will be set by addComponent\n        inCombat: false,\n        target: null,\n        lastAttackTime: 0,\n        attackSpeed: definition.combat?.attackSpeed || 4,\n        combatStyle: CombatStyle.ACCURATE,\n        autoRetaliate: definition.behavior === NPCBehavior.AGGRESSIVE || definition.behavior === NPCBehavior.DEFENSIVE,\n        hitSplatQueue: [],\n        animationQueue: [],\n        specialAttackEnergy: 100,\n        specialAttackActive: false,\n        protectionPrayers: {\n          melee: false,\n          ranged: false,\n          magic: false,\n        },\n      }\n      npc.addComponent('combat', combat)\n    }\n\n    // Add movement component\n    const movement: MovementComponent = {\n      type: 'movement',\n      entity: npc as any, // Will be set by addComponent\n      data: {}, // Will be set by addComponent\n      position: { ...position },\n      destination: null,\n      targetPosition: null,\n      path: [],\n      moveSpeed: definition.moveSpeed || 1,\n      isMoving: false,\n      canMove: true,\n      runEnergy: 100,\n      isRunning: false,\n      currentSpeed: 0,\n      facingDirection: 0,\n      pathfindingFlags: 0,\n      lastMoveTime: 0,\n      teleportDestination: null,\n      teleportTime: 0,\n      teleportAnimation: '',\n    }\n    npc.addComponent('movement', movement)\n\n    return npc\n  }\n\n  /**\n   * Add NPC to world\n   */\n  private addNPCToWorld(npc: NPCEntity): void {\n    this.npcs.set(npc.id, npc)\n\n    // Add to world entities\n    ;(this.world.entities as any).items.set(npc.id, npc)\n\n    // Create visual representation\n    if (this.visualSystem) {\n      const npcComponent = npc.getComponent('npc') as any\n      if (npcComponent) {\n        // Use the NPC name to determine visual type\n        this.visualSystem.createVisual(npc, npcComponent.name.toLowerCase())\n      }\n    }\n\n    // Emit event\n    this.world.events.emit('npc:spawned', {\n      npcId: npc.id,\n      definitionId: (npc.getComponent('npc') as any)?.npcId,\n      position: npc.position,\n    })\n  }\n\n  /**\n   * Handle NPC creation\n   */\n  private onNPCCreated(npc: NPCEntity): void {\n    this.npcs.set(npc.id, npc)\n  }\n\n  /**\n   * Handle NPC death\n   */\n  private onNPCDeath(npc: NPCEntity, killerId?: string): void {\n    const npcComponent = npc.getComponent('npc') as any\n    if (!npcComponent) {\n      return\n    }\n\n    // Drop loot\n    if (npcComponent.lootTable && killerId) {\n      this.world.events.emit('npc:death:loot', {\n        npcId: npc.id,\n        killerId,\n        lootTable: npcComponent.lootTable,\n        position: npc.position,\n      })\n    }\n\n    // Schedule respawn\n    if (npcComponent.respawnTime > 0 && npc.spawnerId) {\n      this.spawnManager.scheduleRespawn(npc.spawnerId, npcComponent.npcId, npcComponent.respawnTime)\n    }\n\n    // Remove from active NPCs\n    this.npcs.delete(npc.id)\n  }\n\n  /**\n   * Handle quest giver interaction\n   */\n  private handleQuestGiverInteraction(playerId: string, npc: NPCEntity): void {\n    this.dialogueManager.startDialogue(playerId, npc.id)\n\n    this.world.events.emit('quest:interact', {\n      playerId,\n      npcId: npc.id,\n    })\n  }\n\n  /**\n   * Handle shop interaction\n   */\n  private handleShopInteraction(playerId: string, npc: NPCEntity): void {\n    const npcComponent = npc.getComponent('npc') as any\n    if (!npcComponent?.shop) {\n      return\n    }\n\n    this.world.events.emit('shop:open', {\n      playerId,\n      npcId: npc.id,\n      shop: npcComponent.shop,\n    })\n  }\n\n  /**\n   * Handle banker interaction\n   */\n  private handleBankerInteraction(playerId: string, npc: NPCEntity): void {\n    this.world.events.emit('bank:open', {\n      playerId,\n      npcId: npc.id,\n    })\n  }\n\n  /**\n   * Handle skill master interaction\n   */\n  private handleSkillMasterInteraction(playerId: string, npc: NPCEntity): void {\n    this.dialogueManager.startDialogue(playerId, npc.id)\n  }\n\n  /**\n   * Handle generic interaction\n   */\n  private handleGenericInteraction(playerId: string, npc: NPCEntity): void {\n    const npcComponent = npc.getComponent('npc') as any\n    if (!npcComponent) {\n      return\n    }\n\n    // Show examine text or start dialogue\n    if (npcComponent.dialogue) {\n      this.dialogueManager.startDialogue(playerId, npc.id)\n    } else {\n      this.sendMessage(playerId, npcComponent.examine)\n    }\n  }\n\n  /**\n   * Check if entity is an NPC\n   */\n  private isNPCEntity(entity: any): boolean {\n    return entity.hasComponent?.('npc') || entity.getComponent?.('npc') !== null\n  }\n\n  /**\n   * Check if NPC is combat-capable\n   */\n  private isCombatNPC(definition: NPCDefinition): boolean {\n    return (\n      definition.npcType === NPCType.MONSTER ||\n      definition.npcType === NPCType.BOSS ||\n      definition.npcType === NPCType.GUARD\n    )\n  }\n\n  /**\n   * Get entity from world\n   */\n  private getEntity(entityId: string): RPGEntity | undefined {\n    if (this.world.entities.items instanceof Map) {\n      const entity = this.world.entities.items.get(entityId)\n      if (!entity || typeof entity.getComponent !== 'function') {\n        return undefined\n      }\n      return entity as unknown as RPGEntity\n    }\n\n    const entity = this.world.entities.get?.(entityId)\n    if (!entity || typeof entity.getComponent !== 'function') {\n      return undefined\n    }\n    return entity as unknown as RPGEntity\n  }\n\n  /**\n   * Calculate distance between two positions\n   */\n  private getDistance(pos1: Vector3, pos2: Vector3): number {\n    const dx = pos1.x - pos2.x\n    const dy = pos1.y - pos2.y\n    const dz = pos1.z - pos2.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  /**\n   * Send message to player\n   */\n  private sendMessage(playerId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      targetId: playerId,\n      message,\n    })\n  }\n\n  /**\n   * Get entity position\n   */\n  private getEntityPosition(entity: any): Vector3 | null {\n    // Try different ways to get position\n    if (entity.position && typeof entity.position === 'object') {\n      return entity.position\n    }\n\n    if (entity.data?.position) {\n      // If position is an array, convert to Vector3\n      if (Array.isArray(entity.data.position)) {\n        return {\n          x: entity.data.position[0] || 0,\n          y: entity.data.position[1] || 0,\n          z: entity.data.position[2] || 0,\n        }\n      }\n      return entity.data.position\n    }\n\n    return null\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type { StatsComponent, SkillData, CombatBonuses } from '../types/index'\n\nexport class StatsSystem extends System {\n  name = 'StatsSystem'\n  enabled = true\n\n  // Player stats storage\n  private playerStats: Map<string, StatsComponent> = new Map()\n\n  constructor(world: World) {\n    super(world)\n  }\n\n  /**\n   * Get XP required for a specific level (public interface for tests)\n   */\n  getXPForLevel(level: number): number {\n    return this.levelToXp(level)\n  }\n\n  /**\n   * Get level for a specific XP amount (public interface for tests) \n   */\n  getLevelForXP(xp: number): number {\n    return this.xpToLevel(xp)\n  }\n\n  /**\n   * Grant XP to a player and handle level ups\n   */\n  grantXP(playerId: string, skill: string, amount: number, source: string): void {\n    let stats = this.getPlayerStats(playerId)\n\n    if (!stats) {\n      // Create initial stats for new player\n      stats = this.createInitialStats()\n      this.setPlayerStats(playerId, stats)\n    }\n\n    // Handle defence vs defense naming inconsistency\n    // The tests expect 'defence' to be the canonical skill name\n    const normalizedSkill = skill === 'defense' ? 'defence' : skill\n\n    const skillData = (stats as any)[normalizedSkill]\n    if (!skillData) {\n      console.warn(`Unknown skill: ${skill}`)\n      return\n    }\n\n    const oldLevel = skillData.level\n    const oldXp = skillData.xp\n\n    // Add XP\n    skillData.xp += amount\n    skillData.experience = skillData.xp\n\n    // Calculate new level\n    const newLevel = this.xpToLevel(skillData.xp)\n    skillData.level = newLevel\n\n    // Special handling for hitpoints - update max and current HP\n    if (normalizedSkill === 'hitpoints') {\n      const oldMax = stats.hitpoints.max\n      stats.hitpoints.max = newLevel * 10  // 10 HP per level\n\n      // Heal player when leveling hitpoints (RuneScape mechanic - full heal on level up)\n      if (newLevel > oldLevel) {\n        stats.hitpoints.current = stats.hitpoints.max  // Full heal on HP level up\n      }\n      // For hitpoints, current represents current HP, not level\n      skillData.current = stats.hitpoints.current\n    } else {\n      // For other skills, current represents current level\n      skillData.current = newLevel\n    }\n\n    // Update combat level\n    stats.combatLevel = this.calculateCombatLevel({\n      attack: stats.attack,\n      strength: stats.strength,\n      defense: stats.defense,  // Use 'defence' as the canonical skill\n      ranged: stats.ranged,\n      magic: stats.magic,\n      hitpoints: stats.hitpoints,\n      prayer: stats.prayer,\n    })\n\n    // Calculate total level\n    stats.totalLevel = this.calculateTotalLevel(stats)\n\n    // Save updated stats\n    this.setPlayerStats(playerId, stats)\n\n    // Emit XP gain event\n    this.world.events.emit('rpg:xp_gained', {\n      playerId,\n      skill: normalizedSkill,\n      amount,\n      source,\n      oldXp,\n      newXp: skillData.xp,\n    })\n\n    // Check for level up\n    if (newLevel > oldLevel) {\n      this.world.events.emit('rpg:level_up', {\n        playerId,\n        skill: normalizedSkill,\n        oldLevel,\n        newLevel,\n      })\n    }\n  }\n\n  /**\n   * Get player stats from storage\n   */\n  getPlayerStats(playerId: string): StatsComponent | null {\n    const stats = this.playerStats.get(playerId)\n    if (stats) {\n      return stats\n    }\n\n    // Try to get from world entity\n    const entity = this.world.entities.players?.get(playerId)\n    if (entity && entity.data) {\n      const statsComponent = entity.data.stats\n      if (statsComponent) {\n        this.playerStats.set(playerId, statsComponent)\n        return statsComponent\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Set player stats in storage\n   */\n  setPlayerStats(playerId: string, stats: StatsComponent): void {\n    this.playerStats.set(playerId, stats)\n\n    // Also update in world entity if it exists\n    const entity = this.world.entities.players?.get(playerId)\n    if (entity && entity.data) {\n      entity.data.stats = stats\n    }\n  }\n\n  /**\n   * Check if player meets skill requirements\n   */\n  meetsRequirements(playerId: string, requirements: Record<string, number>): boolean {\n    const stats = this.getPlayerStats(playerId)\n    if (!stats) {\n      return false\n    }\n\n    for (const [skill, requiredLevel] of Object.entries(requirements)) {\n      const normalizedSkill = skill === 'defense' ? 'defence' : skill\n      const skillData = (stats as any)[normalizedSkill]\n\n      if (!skillData || skillData.level < requiredLevel) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Calculate total level from all skills\n   */\n  private calculateTotalLevel(stats: StatsComponent): number {\n    const skills = [\n      'attack', 'strength', 'defence', 'hitpoints', 'ranged', 'prayer', 'magic',\n      'cooking', 'crafting', 'fletching', 'herblore', 'runecrafting', 'smithing',\n      'mining', 'fishing', 'woodcutting', 'agility', 'construction', 'firemaking',\n      'slayer', 'thieving', 'farming', 'hunter'\n    ]\n\n    return skills.reduce((total, skill) => {\n      const skillData = (stats as any)[skill]\n      return total + (skillData?.level || 1)\n    }, 0)\n  }\n\n  /**\n   * Handle combat XP distribution (private method for combat system integration)\n   */\n  private handleCombatXP(event: any): void {\n    const { attackerId, damage, weaponType } = event\n\n    if (!attackerId || !damage) {\n      return\n    }\n\n    const baseXp = damage * 4\n    const hpXp = damage * 1.33\n\n    switch (weaponType) {\n      case 'melee':\n        this.grantXP(attackerId, 'attack', baseXp, 'combat')\n        this.grantXP(attackerId, 'strength', baseXp, 'combat')\n        this.grantXP(attackerId, 'defence', baseXp, 'combat')\n        this.grantXP(attackerId, 'hitpoints', hpXp, 'combat')\n        break\n\n      case 'ranged':\n        this.grantXP(attackerId, 'ranged', baseXp, 'combat')\n        this.grantXP(attackerId, 'defence', baseXp, 'combat')\n        this.grantXP(attackerId, 'hitpoints', hpXp, 'combat')\n        break\n\n      case 'magic':\n        this.grantXP(attackerId, 'magic', damage * 2, 'combat')\n        this.grantXP(attackerId, 'hitpoints', hpXp, 'combat')\n        break\n    }\n  }\n\n  /**\n   * Initialize the stats system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[StatsSystem] Initializing...')\n\n    // Register event listeners for XP gains\n    this.world.events.on('rpg:xp_gain', this.handleXpGain.bind(this))\n    this.world.events.on('rpg:level_up', this.handleLevelUp.bind(this))\n    this.world.events.on('rpg:combat_xp', this.handleCombatXP.bind(this))\n  }\n\n  /**\n   * Create initial stats for a new player\n   */\n  createInitialStats(): StatsComponent {\n    const initialCombatBonuses: CombatBonuses = {\n      attackStab: 0,\n      attackSlash: 0,\n      attackCrush: 0,\n      attackMagic: 0,\n      attackRanged: 0,\n      defenseStab: 0,\n      defenseSlash: 0,\n      defenseCrush: 0,\n      defenseMagic: 0,\n      defenseRanged: 0,\n      meleeStrength: 0,\n      rangedStrength: 0,\n      magicDamage: 0,\n      prayerBonus: 0,\n    }\n\n    const createSkill = (level: number): SkillData => ({\n      level,\n      xp: this.levelToXp(level),\n      current: level,\n      experience: this.levelToXp(level),\n    })\n\n    const stats: StatsComponent = {\n      type: 'stats',\n      data: {},\n      entityId: undefined,\n\n      // Combat skills\n      hitpoints: {\n        current: 100,\n        max: 100,\n        level: 10,\n        xp: this.levelToXp(10),\n        experience: this.levelToXp(10),\n      },\n      attack: createSkill(1),\n      strength: createSkill(1),\n      defense: createSkill(1),\n      ranged: createSkill(1),\n      magic: createSkill(1),\n      prayer: {\n        level: 1,\n        xp: 0,\n        points: 1,\n        maxPoints: 1,\n        current: 1,\n        experience: 0,\n      },\n\n      // Non-combat skills (all 23 skills from RuneScape)\n      mining: createSkill(1),\n      fishing: createSkill(1),\n      woodcutting: createSkill(1),\n      firemaking: createSkill(1),\n      smithing: createSkill(1),\n      cooking: createSkill(1),\n      crafting: createSkill(1),\n      fletching: createSkill(1),\n      construction: createSkill(1),\n      herblore: createSkill(1),\n      agility: createSkill(1),\n      thieving: createSkill(1),\n      slayer: createSkill(1),\n      farming: createSkill(1),\n      runecrafting: createSkill(1),\n      hunter: createSkill(1),\n\n      // Combat bonuses\n      combatBonuses: initialCombatBonuses,\n\n      // Computed values (temporarily set to 0, will be calculated below)\n      combatLevel: 0,\n      totalLevel: 32, // 22 skills at level 1 + hitpoints at level 10 = 32\n    }\n\n    // Calculate combat level using the actual stats object\n    stats.combatLevel = this.calculateCombatLevel({\n      attack: stats.attack,\n      strength: stats.strength,\n      defense: stats.defense,  // Use the actual defence skill we created\n      ranged: stats.ranged,\n      magic: stats.magic,\n      hitpoints: stats.hitpoints,\n      prayer: stats.prayer,\n    })\n\n    return stats\n  }\n\n  /**\n   * Handle XP gain events\n   */\n  private handleXpGain(event: any): void {\n    const { playerId, skill, amount, source } = event\n\n    // This would typically update the player's stats\n    // For now, just log the event\n    console.log(`[StatsSystem] XP Gain: ${playerId} gained ${amount} ${skill} XP from ${source}`)\n  }\n\n  /**\n   * Handle level up events\n   */\n  private handleLevelUp(event: any): void {\n    const { playerId, skill, newLevel } = event\n\n    console.log(`[StatsSystem] Level Up: ${playerId} reached level ${newLevel} in ${skill}`)\n\n    // Emit celebration event\n    this.world.events.emit('rpg:level_up_celebration', {\n      playerId,\n      skill,\n      level: newLevel,\n    })\n  }\n\n  /**\n   * Calculate combat level from stats\n   */\n  calculateCombatLevel(stats: {\n    attack: { level: number }\n    strength: { level: number }\n    defence?: { level: number }\n    defense?: { level: number }\n    ranged: { level: number }\n    magic: { level: number }\n    hitpoints: { level: number }\n    prayer: { level: number }\n  }): number {\n    const { attack, strength, defence, defense, ranged, magic, hitpoints, prayer } = stats\n\n    // Use defence if available, otherwise use defense for backward compatibility\n    const defenseLevel = defence?.level ?? defense?.level ?? 1\n\n    // RuneScape combat level formula\n    const base = (defenseLevel + hitpoints.level + Math.floor(prayer.level / 2)) * 0.25\n\n    const melee = (attack.level + strength.level) * 0.325\n    const rangedLevel = Math.floor(ranged.level * 1.5) * 0.325\n    const magicLevel = Math.floor(magic.level * 1.5) * 0.325\n\n    const highest = Math.max(melee, rangedLevel, magicLevel)\n\n    return Math.floor(base + highest)\n  }\n\n  /**\n   * Convert level to XP using RuneScape formula\n   */\n  levelToXp(level: number): number {\n    if (level <= 1) return 0\n\n    let xp = 0\n    for (let i = 1; i < level; i++) {\n      xp += Math.floor(i + 300 * Math.pow(2, i / 7)) / 4\n    }\n    return Math.floor(xp)\n  }\n\n  /**\n   * Convert XP to level\n   */\n  xpToLevel(xp: number): number {\n    for (let level = 1; level <= 99; level++) {\n      if (this.levelToXp(level + 1) > xp) {\n        return level\n      }\n    }\n    return 99\n  }\n\n  /**\n   * Add XP to a skill\n   */\n  addXp(stats: StatsComponent, skill: string, amount: number): { leveledUp: boolean; newLevel: number } {\n    const skillData = (stats as any)[skill] as SkillData\n    if (!skillData) {\n      return { leveledUp: false, newLevel: 0 }\n    }\n\n    const oldLevel = skillData.level\n    skillData.xp += amount\n    skillData.experience = skillData.xp\n\n    const newLevel = this.xpToLevel(skillData.xp)\n    skillData.level = newLevel\n    skillData.current = newLevel\n\n    // Update combat level\n    stats.combatLevel = this.calculateCombatLevel({\n      attack: stats.attack,\n      strength: stats.strength,\n      defense: stats.defense,  // Use 'defence' as the canonical skill\n      ranged: stats.ranged,\n      magic: stats.magic,\n      hitpoints: stats.hitpoints,\n      prayer: stats.prayer,\n    })\n\n    return {\n      leveledUp: newLevel > oldLevel,\n      newLevel,\n    }\n  }\n\n  /**\n   * Update hitpoints\n   */\n  updateHitpoints(stats: StatsComponent, current: number): void {\n    stats.hitpoints.current = Math.max(0, Math.min(current, stats.hitpoints.max))\n  }\n\n  /**\n   * Heal hitpoints\n   */\n  heal(stats: StatsComponent, amount: number): number {\n    const oldHp = stats.hitpoints.current\n    const newHp = Math.min(stats.hitpoints.max, oldHp + amount)\n    stats.hitpoints.current = newHp\n    return newHp - oldHp\n  }\n\n  /**\n   * Take damage\n   */\n  takeDamage(stats: StatsComponent, damage: number): { newHp: number; isDead: boolean } {\n    const newHp = Math.max(0, stats.hitpoints.current - damage)\n    stats.hitpoints.current = newHp\n\n    return {\n      newHp,\n      isDead: newHp <= 0,\n    }\n  }\n}", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type { Vector3, MovementComponent, Entity } from '../types'\nimport type { SpatialIndex } from '../../core/systems/SpatialIndex'\nimport type { Vector3 as ThreeVector3 } from 'three'\nimport { THREE } from '../../core/extras/three.js'\n\ninterface PathNode {\n  position: Vector3\n  g: number // Cost from start\n  h: number // Heuristic cost to end\n  f: number // Total cost\n  parent?: PathNode\n}\n\nexport class MovementSystem extends System {\n  private static readonly WALK_SPEED = 4.0 // Units per second\n  private static readonly RUN_SPEED = 8.0 // Units per second\n  private static readonly RUN_ENERGY_DRAIN = 1 // Per second\n  private static readonly RUN_ENERGY_RESTORE = 0.5 // Per second when walking\n  private static readonly PATHFINDING_GRID_SIZE = 0.5\n  private static readonly MAX_PATH_LENGTH = 100\n  private static readonly COLLISION_CHECK_RADIUS = 0.5\n\n  private movingEntities: Map<\n    string,\n    {\n      path: Vector3[]\n      currentIndex: number\n      targetPosition: Vector3\n      isRunning: boolean\n    }\n  > = new Map()\n\n  private spatialIndex: SpatialIndex | null = null\n\n  constructor(world: World) {\n    super(world)\n    this.setupEventListeners()\n  }\n\n  override async init(_options: any): Promise<void> {\n    // Get spatial index system\n    this.spatialIndex = (this.world as any).spatialIndex\n    if (!this.spatialIndex) {\n      // Only warn if not in test environment\n      if (process.env.NODE_ENV !== 'test' && !process.env.BUN_ENV?.includes('test')) {\n        console.warn('[MovementSystem] No spatial index available - using fallback collision detection')\n      }\n    }\n  }\n\n  private setupEventListeners(): void {\n    this.world.events.on('player:move', this.handlePlayerMove.bind(this))\n    this.world.events.on('player:toggleRun', this.handleToggleRun.bind(this))\n    this.world.events.on('player:stop', this.handlePlayerStop.bind(this))\n    \n    // Add direct movement support\n    this.world.events.on('player:directMove', this.handleDirectMove.bind(this))\n    \n    // Listen for UI keybinding events\n    this.world.events.on('ui:keybinding', this.handleKeybinding.bind(this))\n  }\n\n  update(deltaTime: number): void {\n    // Update all moving entities\n    for (const [entityId, moveData] of this.movingEntities) {\n      const entity = this.world.entities.get(entityId)\n      if (!entity) {\n        this.movingEntities.delete(entityId)\n        continue\n      }\n\n      const movement = entity.getComponent('movement') as any\n      if (!movement) {\n        continue\n      }\n\n      // Update run energy\n      if (moveData.isRunning && movement.runEnergy > 0) {\n        movement.runEnergy = Math.max(0, movement.runEnergy - MovementSystem.RUN_ENERGY_DRAIN * deltaTime)\n        if (movement.runEnergy === 0) {\n          moveData.isRunning = false\n          movement.isRunning = false\n        }\n      } else if (!moveData.isRunning && movement.runEnergy < 100) {\n        movement.runEnergy = Math.min(100, movement.runEnergy + MovementSystem.RUN_ENERGY_RESTORE * deltaTime)\n      }\n\n      // Move entity along path\n      this.moveAlongPath(entity, moveData, deltaTime)\n    }\n  }\n\n  private handlePlayerMove(data: { playerId: string; targetPosition: Vector3 }): void {\n    const { playerId, targetPosition } = data\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return\n    }\n\n    const movement = player.getComponent('movement') as any\n    if (!movement || !movement.canMove) {\n      return\n    }\n\n    // Calculate path using optimized pathfinding\n    const path = this.findPathOptimized(player.position, targetPosition)\n    if (path.length === 0) {\n      this.world.events.emit('player:moveBlocked', { playerId, reason: 'No path found' })\n      return\n    }\n\n    // Store movement data\n    this.movingEntities.set(playerId, {\n      path,\n      currentIndex: 0,\n      targetPosition,\n      isRunning: movement.isRunning && movement.runEnergy > 0,\n    })\n\n    // Update movement component\n    movement.isMoving = true\n    movement.targetPosition = targetPosition\n\n    // Emit movement started event\n    this.world.events.emit('player:moveStarted', {\n      playerId,\n      targetPosition,\n      path,\n      isRunning: movement.isRunning,\n    })\n  }\n\n  private handleToggleRun(data: { playerId: string }): void {\n    const { playerId } = data\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return\n    }\n\n    const movement = player.getComponent('movement') as any\n    if (!movement) {\n      return\n    }\n\n    movement.isRunning = !movement.isRunning\n\n    // Update current movement if active\n    const moveData = this.movingEntities.get(playerId)\n    if (moveData && movement.runEnergy > 0) {\n      moveData.isRunning = movement.isRunning\n    }\n\n    this.world.events.emit('player:runToggled', {\n      playerId,\n      isRunning: movement.isRunning,\n    })\n  }\n\n  private handlePlayerStop(data: { playerId: string }): void {\n    const { playerId } = data\n    this.stopMovement(playerId)\n  }\n\n  private moveAlongPath(entity: Entity, moveData: any, deltaTime: number): void {\n    const movement = entity.getComponent('movement') as any\n    if (!movement) {\n      return\n    }\n\n    const speed = moveData.isRunning ? MovementSystem.RUN_SPEED : MovementSystem.WALK_SPEED\n    const moveDistance = speed * deltaTime\n\n    let remainingDistance = moveDistance\n    const oldPosition = { ...entity.position }\n\n    while (remainingDistance > 0 && moveData.currentIndex < moveData.path.length) {\n      const targetNode = moveData.path[moveData.currentIndex]\n      const direction = this.getDirection(entity.position, targetNode)\n      const distanceToNode = this.getDistance(entity.position, targetNode)\n\n      if (distanceToNode <= remainingDistance) {\n        // Reach current node\n        entity.position = { ...targetNode }\n        moveData.currentIndex++\n        remainingDistance -= distanceToNode\n\n        // Check if reached final destination\n        if (moveData.currentIndex >= moveData.path.length) {\n          this.onReachedDestination(entity.id)\n          break\n        }\n      } else {\n        // Move towards current node\n        const newPosition = {\n          x: entity.position.x + direction.x * remainingDistance,\n          y: entity.position.y + direction.y * remainingDistance,\n          z: entity.position.z + direction.z * remainingDistance,\n        }\n\n        // Check collision at new position using spatial index\n        if (this.checkCollisionOptimized(newPosition, entity.id)) {\n          // Collision detected, stop movement and recalculate path\n          this.recalculatePath(entity.id)\n          break\n        }\n\n        entity.position = newPosition\n        remainingDistance = 0\n      }\n\n      // Update facing direction\n      if (Math.abs(direction.x) > 0.01 || Math.abs(direction.z) > 0.01) {\n        movement.facingDirection = Math.atan2(direction.x, direction.z)\n      }\n    }\n\n    // Update spatial index if position changed\n    if (\n      this.spatialIndex &&\n      (Math.abs(entity.position.x - oldPosition.x) > 0.1 || Math.abs(entity.position.z - oldPosition.z) > 0.1)\n    ) {\n      this.spatialIndex.markDirty(entity as any)\n    }\n\n    // Update movement component\n    movement.currentSpeed = speed\n    movement.position = entity.position\n\n    // Emit position update for network sync\n    this.world.events.emit('entity:positionUpdate', {\n      entityId: entity.id,\n      position: entity.position,\n      facingDirection: movement.facingDirection,\n      isRunning: moveData.isRunning,\n    })\n  }\n\n  // Optimized pathfinding using spatial index for collision detection\n  private findPathOptimized(start: Vector3, end: Vector3): Vector3[] {\n    // Quick line-of-sight check using spatial index\n    if (this.hasLineOfSightOptimized(start, end)) {\n      return [end]\n    }\n\n    // Fallback to A* pathfinding\n    return this.findPath(start, end)\n  }\n\n  // Optimized collision detection using spatial index\n  private checkCollisionOptimized(position: Vector3, excludeEntityId?: string): boolean {\n    if (!this.spatialIndex) {\n      return this.checkCollision(position)\n    }\n\n    // Use spatial index to efficiently find nearby entities\n    const nearbyEntities = this.spatialIndex.query({\n      position: new THREE.Vector3(position.x, position.y, position.z),\n      radius: MovementSystem.COLLISION_CHECK_RADIUS,\n      filter: entity => {\n        // Exclude self and non-blocking entities\n        if (entity.id === excludeEntityId) {\n          return false\n        }\n\n        const collider = entity.getComponent('collider')\n        return collider && (collider as any).blocking\n      },\n    })\n\n    // Check collision with nearby entities\n    for (const entity of nearbyEntities) {\n      const entityPos = entity.position || { x: 0, y: 0, z: 0 }\n      const distance = this.getDistance(position, entityPos)\n\n      if (distance < MovementSystem.COLLISION_CHECK_RADIUS) {\n        return true\n      }\n    }\n\n    // Check terrain collision\n    const terrain = (this.world as any).terrain\n    if (terrain && !terrain.isWalkable(position.x, position.z)) {\n      return true\n    }\n\n    // Check world bounds\n    return !this.isInBounds(position)\n  }\n\n  // Optimized line-of-sight check using spatial index\n  private hasLineOfSightOptimized(start: Vector3, end: Vector3): boolean {\n    if (!this.spatialIndex) {\n      return this.hasLineOfSight(start, end)\n    }\n\n    const _direction = this.getDirection(start, end)\n    const distance = this.getDistance(start, end)\n    const steps = Math.ceil(distance / MovementSystem.PATHFINDING_GRID_SIZE)\n\n    for (let i = 0; i <= steps; i++) {\n      const t = i / steps\n      const point = {\n        x: start.x + (end.x - start.x) * t,\n        y: start.y + (end.y - start.y) * t,\n        z: start.z + (end.z - start.z) * t,\n      }\n\n      if (this.checkCollisionOptimized(point)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  // Original pathfinding for fallback\n  private findPath(start: Vector3, end: Vector3): Vector3[] {\n    // A* pathfinding implementation (existing code)\n    const openSet: PathNode[] = []\n    const closedSet: Set<string> = new Set()\n\n    const startNode: PathNode = {\n      position: this.snapToGrid(start),\n      g: 0,\n      h: this.getDistance(start, end),\n      f: 0,\n    }\n    startNode.f = startNode.g + startNode.h\n\n    openSet.push(startNode)\n\n    while (openSet.length > 0) {\n      // Get node with lowest f score\n      openSet.sort((a, b) => a.f - b.f)\n      const current = openSet.shift()!\n\n      const nodeKey = this.getNodeKey(current.position)\n      closedSet.add(nodeKey)\n\n      // Check if reached destination\n      if (this.getDistance(current.position, end) < MovementSystem.PATHFINDING_GRID_SIZE) {\n        return this.reconstructPath(current)\n      }\n\n      // Check path length limit\n      if (current.g > MovementSystem.MAX_PATH_LENGTH) {\n        continue\n      }\n\n      // Check neighbors\n      const neighbors = this.getNeighbors(current.position)\n      for (const neighborPos of neighbors) {\n        const neighborKey = this.getNodeKey(neighborPos)\n        if (closedSet.has(neighborKey)) {\n          continue\n        }\n\n        // Check if walkable using optimized collision detection\n        if (this.checkCollisionOptimized(neighborPos)) {\n          continue\n        }\n\n        const g = current.g + this.getDistance(current.position, neighborPos)\n        const h = this.getDistance(neighborPos, end)\n        const f = g + h\n\n        // Check if neighbor is in open set\n        const existingNode = openSet.find(n => this.getNodeKey(n.position) === neighborKey)\n\n        if (!existingNode || g < existingNode.g) {\n          const neighbor: PathNode = {\n            position: neighborPos,\n            g,\n            h,\n            f,\n            parent: current,\n          }\n\n          if (existingNode) {\n            // Update existing node\n            const index = openSet.indexOf(existingNode)\n            openSet[index] = neighbor\n          } else {\n            openSet.push(neighbor)\n          }\n        }\n      }\n    }\n\n    // No path found, return direct path\n    return [end]\n  }\n\n  // Performance monitoring\n  getPerformanceMetrics(): {\n    activeMovements: number\n    spatialIndexAvailable: boolean\n    averagePathLength: number\n  } {\n    let totalPathLength = 0\n    for (const moveData of this.movingEntities.values()) {\n      totalPathLength += moveData.path.length\n    }\n\n    return {\n      activeMovements: this.movingEntities.size,\n      spatialIndexAvailable: this.spatialIndex !== null,\n      averagePathLength: this.movingEntities.size > 0 ? totalPathLength / this.movingEntities.size : 0,\n    }\n  }\n\n  private getNeighbors(position: Vector3): Vector3[] {\n    const neighbors: Vector3[] = []\n    const gridSize = MovementSystem.PATHFINDING_GRID_SIZE\n\n    // 8-directional movement\n    const offsets = [\n      { x: -gridSize, z: 0 },\n      { x: gridSize, z: 0 },\n      { x: 0, z: -gridSize },\n      { x: 0, z: gridSize },\n      { x: -gridSize, z: -gridSize },\n      { x: -gridSize, z: gridSize },\n      { x: gridSize, z: -gridSize },\n      { x: gridSize, z: gridSize },\n    ]\n\n    for (const offset of offsets) {\n      neighbors.push({\n        x: position.x + offset.x,\n        y: position.y,\n        z: position.z + offset.z,\n      })\n    }\n\n    return neighbors\n  }\n\n  private isWalkable(position: Vector3): boolean {\n    return !this.checkCollisionOptimized(position)\n  }\n\n  private checkCollision(position: Vector3): boolean {\n    // Original collision detection (fallback)\n    const physics = (this.world as any).physics\n    if (physics) {\n      const rayStart = new THREE.Vector3(position.x, position.y + 1, position.z)\n      const rayEnd = new THREE.Vector3(position.x, position.y - 0.1, position.z)\n      const rayDirection = new THREE.Vector3().subVectors(rayEnd, rayStart).normalize()\n\n      const hit = physics.raycast(rayStart, rayDirection, 1.1)\n\n      if (hit) {\n        const hitEntity = (this.world as any).entities?.get(hit.entityId)\n        if (hitEntity) {\n          const blocker = hitEntity.getComponent('blocker')\n          if (blocker && (blocker as any).active) {\n            return true\n          }\n        }\n      }\n    }\n\n    const tileX = Math.floor(position.x)\n    const tileZ = Math.floor(position.z)\n    const collisionMap = (this.world as any).collisionMap\n\n    if (collisionMap && collisionMap[tileZ] && collisionMap[tileZ][tileX]) {\n      return true\n    }\n\n    return false\n  }\n\n  private isInBounds(position: Vector3): boolean {\n    const worldSettings = (this.world as any).settings\n    const bounds = worldSettings?.worldBounds || {\n      min: { x: -1000, y: -100, z: -1000 },\n      max: { x: 1000, y: 1000, z: 1000 },\n    }\n\n    return (\n      position.x >= bounds.min.x &&\n      position.x <= bounds.max.x &&\n      position.y >= bounds.min.y &&\n      position.y <= bounds.max.y &&\n      position.z >= bounds.min.z &&\n      position.z <= bounds.max.z\n    )\n  }\n\n  private reconstructPath(endNode: PathNode): Vector3[] {\n    const path: Vector3[] = []\n    let current: PathNode | undefined = endNode\n\n    while (current) {\n      path.unshift(current.position)\n      current = current.parent\n    }\n\n    return this.smoothPath(path)\n  }\n\n  private smoothPath(path: Vector3[]): Vector3[] {\n    if (path.length <= 2) {\n      return path\n    }\n\n    const smoothed: Vector3[] = [path[0]]\n    let current = 0\n\n    while (current < path.length - 1) {\n      let farthest = current + 1\n\n      for (let i = current + 2; i < path.length; i++) {\n        if (this.hasLineOfSightOptimized(path[current], path[i])) {\n          farthest = i\n        } else {\n          break\n        }\n      }\n\n      smoothed.push(path[farthest])\n      current = farthest\n    }\n\n    return smoothed\n  }\n\n  private hasLineOfSight(start: Vector3, end: Vector3): boolean {\n    const steps = Math.max(\n      Math.abs(end.x - start.x) / MovementSystem.PATHFINDING_GRID_SIZE,\n      Math.abs(end.z - start.z) / MovementSystem.PATHFINDING_GRID_SIZE\n    )\n\n    for (let i = 0; i <= steps; i++) {\n      const t = i / steps\n      const point = {\n        x: start.x + (end.x - start.x) * t,\n        y: start.y + (end.y - start.y) * t,\n        z: start.z + (end.z - start.z) * t,\n      }\n\n      if (!this.isWalkable(point)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  private onReachedDestination(entityId: string): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const movement = entity.getComponent('movement') as any\n    if (movement) {\n      movement.isMoving = false\n      movement.currentSpeed = 0\n    }\n\n    this.movingEntities.delete(entityId)\n\n    this.world.events.emit('entity:reachedDestination', {\n      entityId,\n      position: entity.position,\n    })\n  }\n\n  private stopMovement(entityId: string): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const movement = entity.getComponent('movement') as any\n    if (movement) {\n      movement.isMoving = false\n      movement.currentSpeed = 0\n      movement.targetPosition = null\n    }\n\n    this.movingEntities.delete(entityId)\n\n    this.world.events.emit('entity:movementStopped', {\n      entityId,\n      position: entity.position,\n    })\n  }\n\n  private recalculatePath(entityId: string): void {\n    const moveData = this.movingEntities.get(entityId)\n    if (!moveData) {\n      return\n    }\n\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const newPath = this.findPathOptimized(entity.position, moveData.targetPosition)\n    if (newPath.length > 0) {\n      moveData.path = newPath\n      moveData.currentIndex = 0\n    } else {\n      this.stopMovement(entityId)\n      this.world.events.emit('player:moveBlocked', {\n        playerId: entityId,\n        reason: 'Path blocked',\n      })\n    }\n  }\n\n  private getDistance(a: Vector3, b: Vector3): number {\n    const dx = b.x - a.x\n    const dy = b.y - a.y\n    const dz = b.z - a.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  private getDirection(from: Vector3, to: Vector3): Vector3 {\n    const dx = to.x - from.x\n    const dy = to.y - from.y\n    const dz = to.z - from.z\n    const distance = this.getDistance(from, to)\n\n    if (distance === 0) {\n      return { x: 0, y: 0, z: 0 }\n    }\n\n    return {\n      x: dx / distance,\n      y: dy / distance,\n      z: dz / distance,\n    }\n  }\n\n  private snapToGrid(position: Vector3): Vector3 {\n    const gridSize = MovementSystem.PATHFINDING_GRID_SIZE\n    return {\n      x: Math.round(position.x / gridSize) * gridSize,\n      y: position.y,\n      z: Math.round(position.z / gridSize) * gridSize,\n    }\n  }\n\n  private getNodeKey(position: Vector3): string {\n    return `${position.x.toFixed(1)},${position.z.toFixed(1)}`\n  }\n\n  // Public API methods\n  public moveEntity(entityId: string, targetPosition: Vector3): void {\n    this.handlePlayerMove({ playerId: entityId, targetPosition })\n  }\n\n  public stopEntity(entityId: string): void {\n    this.stopMovement(entityId)\n  }\n\n  public setRunning(entityId: string, isRunning: boolean): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const movement = entity.getComponent('movement') as any\n    if (!movement) {\n      return\n    }\n\n    movement.isRunning = isRunning\n\n    const moveData = this.movingEntities.get(entityId)\n    if (moveData && movement.runEnergy > 0) {\n      moveData.isRunning = isRunning\n    }\n  }\n\n  public teleportEntity(entityId: string, position: Vector3): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const oldPosition = { ...entity.position }\n    entity.position = { ...position }\n\n    // Update spatial index\n    if (this.spatialIndex) {\n      this.spatialIndex.updateEntity(entity as any)\n    }\n\n    // Stop any current movement\n    this.stopMovement(entityId)\n\n    this.world.events.emit('entity:teleported', {\n      entityId,\n      fromPosition: oldPosition,\n      toPosition: position,\n    })\n  }\n\n  /**\n   * Handle direct movement from keyboard input (WASD)\n   */\n  private handleDirectMove(data: { playerId: string; direction: Vector3; speed: number }): void {\n    const { playerId, direction, speed } = data\n    const player = this.world.entities.get(playerId)\n    if (!player) return\n    \n    const movement = player.getComponent('movement') as any\n    if (!movement || !movement.canMove) return\n    \n    // Calculate new position\n    const newPosition = {\n      x: player.position.x + direction.x * speed,\n      y: player.position.y,\n      z: player.position.z + direction.z * speed\n    }\n    \n    // Check collision\n    if (!this.checkCollisionOptimized(newPosition, playerId)) {\n      // Update position\n      const oldPosition = { ...player.position }\n      player.position = newPosition\n      \n      // Update facing direction\n      if (Math.abs(direction.x) > 0.01 || Math.abs(direction.z) > 0.01) {\n        movement.facingDirection = Math.atan2(direction.x, direction.z)\n      }\n      \n      // Update movement component\n      movement.isMoving = true\n      movement.currentSpeed = speed\n      movement.position = player.position\n      \n      // Update spatial index if position changed significantly\n      if (this.spatialIndex && \n          (Math.abs(player.position.x - oldPosition.x) > 0.1 || \n           Math.abs(player.position.z - oldPosition.z) > 0.1)) {\n        this.spatialIndex.markDirty(player as any)\n      }\n      \n      // Emit position update\n      this.world.events.emit('entity:positionUpdate', {\n        entityId: player.id,\n        position: player.position,\n        facingDirection: movement.facingDirection,\n        isRunning: speed > MovementSystem.WALK_SPEED\n      })\n    }\n  }\n  \n  /**\n   * Handle keybinding events for movement\n   */\n  private handleKeybinding(data: { action: string; pressed: boolean }): void {\n    // This will be called from UISystem for movement keys\n    // The actual movement logic is handled by the UISystem\n    // This is here for any additional movement-related keybindings\n    \n    switch (data.action) {\n      case 'toggle_run':\n        // Find local player and toggle run\n        // For now, just emit an event - the actual player ID should come from the client\n        this.world.events.emit('toggle:run:requested', { pressed: data.pressed })\n        break\n    }\n  }\n\n  /**\n   * Move entity directly without pathfinding (for keyboard movement)\n   */\n  public moveEntityDirect(entity: Entity, direction: Vector3, deltaTime: number): void {\n    const movement = entity.getComponent('movement') as any\n    if (!movement || !movement.canMove) return\n    \n    // Determine speed\n    const baseSpeed = movement.isRunning && movement.runEnergy > 0 ? \n                     MovementSystem.RUN_SPEED : \n                     MovementSystem.WALK_SPEED\n    const speed = baseSpeed * deltaTime\n    \n    // Calculate new position\n    const newPosition = {\n      x: entity.position.x + direction.x * speed,\n      y: entity.position.y,\n      z: entity.position.z + direction.z * speed\n    }\n    \n    // Check collision\n    if (!this.checkCollisionOptimized(newPosition, entity.id)) {\n      // Store old position for spatial index update\n      const oldPosition = { ...entity.position }\n      \n      // Update position\n      entity.position = newPosition\n      \n      // Update facing direction\n      if (Math.abs(direction.x) > 0.01 || Math.abs(direction.z) > 0.01) {\n        movement.facingDirection = Math.atan2(direction.x, direction.z)\n      }\n      \n      // Update movement component\n      movement.isMoving = true\n      movement.currentSpeed = baseSpeed\n      movement.position = entity.position\n      \n      // Update run energy if running\n      if (movement.isRunning && movement.runEnergy > 0) {\n        movement.runEnergy = Math.max(0, movement.runEnergy - MovementSystem.RUN_ENERGY_DRAIN * deltaTime)\n        if (movement.runEnergy === 0) {\n          movement.isRunning = false\n        }\n      } else if (!movement.isRunning && movement.runEnergy < 100) {\n        movement.runEnergy = Math.min(100, movement.runEnergy + MovementSystem.RUN_ENERGY_RESTORE * deltaTime)\n      }\n      \n      // Update spatial index\n      if (this.spatialIndex && \n          (Math.abs(entity.position.x - oldPosition.x) > 0.1 || \n           Math.abs(entity.position.z - oldPosition.z) > 0.1)) {\n        this.spatialIndex.markDirty(entity as any)\n      }\n      \n      // Emit position update\n      this.world.events.emit('entity:positionUpdate', {\n        entityId: entity.id,\n        position: entity.position,\n        facingDirection: movement.facingDirection,\n        isRunning: movement.isRunning\n      })\n    } else {\n      // Collision detected, stop movement\n      movement.isMoving = false\n      movement.currentSpeed = 0\n    }\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  RPGEntity,\n  StatsComponent,\n  InventoryComponent,\n  ItemStack,\n  CombatComponent,\n  MovementComponent,\n  DeathComponent,\n  Vector3,\n  GravestoneTier,\n  PlayerEntity,\n} from '../types/index'\n\ninterface Gravestone {\n  id: string\n  ownerId: string\n  position: Vector3\n  items: ItemStack[]\n  createdAt: number\n  expiresAt: number\n  tier: GravestoneTier\n  model?: string\n  isBlessed: boolean\n}\n\ninterface RespawnPoint {\n  id: string\n  name: string\n  position: Vector3\n  isDefault?: boolean\n  requirements?: {\n    questId?: string\n    skillLevel?: { skill: string; level: number }\n  }\n}\n\ninterface SafeZone {\n  id: string\n  name: string\n  bounds: {\n    min: Vector3\n    max: Vector3\n  }\n  allowPvP: boolean\n}\n\ninterface DeathConfig {\n  // Respawn locations\n  defaultRespawnPoint: Vector3\n  respawnPoints: Map<string, RespawnPoint>\n\n  // Item protection\n  itemsKeptOnDeath: number // Default: 3\n  protectItemPrayer: boolean\n  skullItemsKept: number // Default: 0\n\n  // Gravestone settings\n  gravestoneEnabled: boolean\n  gravestoneBaseDuration: number // milliseconds\n  gravestoneTierMultipliers: Map<GravestoneTier, number>\n\n  // Safe zones\n  safeZones: SafeZone[]\n\n  // Death costs\n  freeReclaimThreshold: number // GP value\n  reclaimFeePercentage: number // Percentage of item value\n}\n\nexport class DeathRespawnSystem extends System {\n  private gravestones: Map<string, Gravestone> = new Map()\n  private deathTimers: Map<string, NodeJS.Timeout> = new Map()\n  private gravestoneEntities: Map<string, RPGEntity> = new Map()\n  private config: DeathConfig\n\n  constructor(world: World) {\n    super(world)\n\n    // Initialize configuration\n    this.config = {\n      defaultRespawnPoint: { x: 3200, y: 0, z: 3200 }, // Lumbridge\n      respawnPoints: new Map([\n        [\n          'lumbridge',\n          {\n            id: 'lumbridge',\n            name: 'Lumbridge',\n            position: { x: 3200, y: 0, z: 3200 },\n            isDefault: true,\n          },\n        ],\n        [\n          'edgeville',\n          {\n            id: 'edgeville',\n            name: 'Edgeville',\n            position: { x: 3090, y: 0, z: 3490 },\n            requirements: { questId: 'death_to_the_dorgeshuun' },\n          },\n        ],\n        [\n          'falador',\n          {\n            id: 'falador',\n            name: 'Falador',\n            position: { x: 2960, y: 0, z: 3380 },\n          },\n        ],\n        [\n          'varrock',\n          {\n            id: 'varrock',\n            name: 'Varrock',\n            position: { x: 3210, y: 0, z: 3424 },\n          },\n        ],\n        [\n          'camelot',\n          {\n            id: 'camelot',\n            name: 'Camelot',\n            position: { x: 2757, y: 0, z: 3477 },\n            requirements: { questId: 'king_arthurs_realm' },\n          },\n        ],\n      ]),\n      itemsKeptOnDeath: 3,\n      protectItemPrayer: true,\n      skullItemsKept: 0,\n      gravestoneEnabled: true,\n      gravestoneBaseDuration: 5 * 60 * 1000, // 5 minutes\n      gravestoneTierMultipliers: new Map([\n        [GravestoneTier.WOODEN, 1],\n        [GravestoneTier.STONE, 2],\n        [GravestoneTier.ORNATE, 3],\n        [GravestoneTier.ANGEL, 4],\n        [GravestoneTier.MYSTIC, 6],\n      ]),\n      safeZones: [\n        {\n          id: 'lumbridge',\n          name: 'Lumbridge',\n          bounds: {\n            min: { x: 3150, y: 0, z: 3150 },\n            max: { x: 3250, y: 100, z: 3250 },\n          },\n          allowPvP: false,\n        },\n        {\n          id: 'edgeville_bank',\n          name: 'Edgeville Bank',\n          bounds: {\n            min: { x: 3090, y: 0, z: 3488 },\n            max: { x: 3098, y: 10, z: 3499 },\n          },\n          allowPvP: false,\n        },\n      ],\n      freeReclaimThreshold: 100000, // 100k GP\n      reclaimFeePercentage: 5, // 5% of item value\n    }\n  }\n\n  /**\n   * Initialize the system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[DeathRespawnSystem] Initializing...')\n\n    // Listen for death events\n    this.world.events.on('entity:death', this.handleDeath.bind(this))\n\n    // Listen for respawn requests\n    this.world.events.on('player:respawn', this.handleRespawnRequest.bind(this))\n\n    // Listen for gravestone interactions\n    this.world.events.on('gravestone:interact', this.handleGravestoneInteraction.bind(this))\n\n    // Listen for gravestone blessing\n    this.world.events.on('gravestone:bless', this.handleGravestoneBless.bind(this))\n  }\n\n  /**\n   * Handle entity death\n   */\n  private handleDeath(event: { entityId: string; killerId?: string }): void {\n    const entity = this.world.entities.get(event.entityId)\n    if (!entity) {\n      return\n    }\n\n    // Handle based on entity type\n    if (entity.type === 'player') {\n      this.handlePlayerDeath(entity as PlayerEntity, event.killerId)\n    } else if (entity.type === 'npc') {\n      this.handleNPCDeath(entity as any, event.killerId)\n    }\n  }\n\n  /**\n   * Handle player death\n   */\n  private handlePlayerDeath(player: PlayerEntity, killerId?: string): void {\n    const inventory = player.getComponent('inventory') as any\n    const movement = player.getComponent('movement') as any\n    const combat = player.getComponent('combat') as any\n    const stats = player.getComponent('stats') as any\n\n    if (!inventory || !movement || !stats) {\n      return\n    }\n\n    // Access position from the component's data structure\n    const position = (movement as any).data?.position\n    if (!position) {\n      return\n    }\n\n    // Create or update death component\n    let death = player.getComponent('death')\n    if (!death) {\n      // The component system will wrap this in a data property automatically\n      death = {\n        type: 'death',\n        isDead: true,\n        deathTime: Date.now(),\n        deathLocation: { ...position },\n        killer: killerId || null,\n        gravestoneId: null,\n        gravestoneTimer: 0,\n        respawnPoint: null,\n        respawnTimer: 5000, // 5 seconds\n        itemsKeptOnDeath: [],\n        itemsLostOnDeath: [],\n        deathCount: 1,\n        lastDeathTime: Date.now(),\n      } as any\n      player.addComponent('death', death)\n    } else {\n      // Access the data that was wrapped by the component system\n      const deathData = (death as any).data\n      if (deathData) {\n        deathData.isDead = true\n      }\n    }\n\n    // Get the death component again to access wrapped data\n    const currentDeath = player.getComponent('death')\n    let deathData = (currentDeath as any).data\n    if (!deathData) {\n      deathData = currentDeath as any\n    }\n\n    deathData.deathTime = Date.now()\n    deathData.deathLocation = { ...position }\n    deathData.killer = killerId || null\n    deathData.deathCount = (deathData.deathCount || 0) + 1\n    deathData.lastDeathTime = Date.now()\n\n    // Check if in safe zone\n    if (this.isInSafeZone(position)) {\n      // Safe death - keep all items\n      const items = (inventory as any).data?.items || (inventory as any).items || []\n      deathData.itemsKeptOnDeath = [...items.filter((item: any) => item !== null)] as ItemStack[]\n      deathData.itemsLostOnDeath = []\n    } else {\n      // Calculate kept and lost items\n      const isSkull = (player as any).skullTimer && (player as any).skullTimer > 0\n      const protectItem = false // TODO: Add protect item prayer\n\n      let itemsToKeep = isSkull ? this.config.skullItemsKept : this.config.itemsKeptOnDeath\n      if (protectItem && this.config.protectItemPrayer) {\n        itemsToKeep += 1\n      }\n\n      const { kept, lost } = this.calculateItemsKeptOnDeath(inventory, itemsToKeep)\n      deathData.itemsKeptOnDeath = kept\n      deathData.itemsLostOnDeath = lost\n\n      // Create gravestone if items were lost\n      if (lost.length > 0 && this.config.gravestoneEnabled) {\n        const gravestone = this.createGravestone(player, lost, position)\n        deathData.gravestoneId = gravestone.id\n      }\n    }\n\n    // Clear inventory except kept items\n    const inventoryItems = (inventory as any).data?.items || (inventory as any).items\n    if (inventoryItems) {\n      inventoryItems.fill(null)\n      deathData.itemsKeptOnDeath.forEach((item: ItemStack, index: number) => {\n        if (index < inventoryItems.length) {\n          inventoryItems[index] = item\n        }\n      })\n    }\n\n    // Clear equipment\n    const equipment = (inventory as any).data?.equipment || (inventory as any).equipment\n    if (equipment) {\n      Object.keys(equipment).forEach(slot => {\n        equipment[slot] = null\n      })\n    }\n\n    // Reset combat\n    if (combat) {\n      const combatData = (combat as any).data || combat\n      combatData.inCombat = false\n      combatData.target = null\n    }\n\n    // Reset skull timer on player\n    if ((player as any).skullTimer) {\n      ;(player as any).skullTimer = 0\n    }\n\n    // Emit death event\n    this.world.events.emit('player:died', {\n      playerId: player.id,\n      killerId,\n      position,\n      keptItems: deathData.itemsKeptOnDeath,\n      lostItems: deathData.itemsLostOnDeath,\n      gravestoneId: deathData.gravestoneId,\n    })\n\n    // Schedule auto-respawn (disabled for testing)\n    // Uncomment the below code to enable auto-respawn:\n\n    // Uncomment this for auto-respawn:\n    // const timerId = setTimeout(() => {\n    //   this.respawn(player);\n    // }, (death as any).data.respawnTimer);\n    // this.deathTimers.set(player.id, timerId);\n  }\n\n  /**\n   * Handle NPC death\n   */\n  private handleNPCDeath(npc: RPGEntity, killerId?: string): void {\n    // NPCs don't have gravestones, just emit event for loot system\n    this.world.events.emit('npc:died', {\n      npcId: npc.id,\n      killerId,\n      position: npc.position,\n    })\n  }\n\n  /**\n   * Calculate items kept on death\n   */\n  private calculateItemsKeptOnDeath(\n    inventory: InventoryComponent,\n    itemsToKeep: number\n  ): {\n    kept: ItemStack[]\n    lost: ItemStack[]\n  } {\n    const allItems: ItemStack[] = []\n\n    // Collect all items from inventory and equipment - handle component data structure\n    const items = (inventory as any).data?.items || (inventory as any).items || []\n    for (const item of items) {\n      if (item) {\n        allItems.push({ ...item })\n      }\n    }\n\n    const equipment = (inventory as any).data?.equipment || (inventory as any).equipment\n    if (equipment) {\n      for (const slot of Object.values(equipment)) {\n        if (slot) {\n          allItems.push({ itemId: (slot as any).id, quantity: 1 })\n        }\n      }\n    }\n\n    // Sort by value (descending)\n    const sortedItems = allItems.sort((a, b) => {\n      const valueA = this.getItemValue(a.itemId) * a.quantity\n      const valueB = this.getItemValue(b.itemId) * b.quantity\n      return valueB - valueA\n    })\n\n    const kept: ItemStack[] = []\n    const lost: ItemStack[] = []\n    let keptStacks = 0\n\n    for (const item of sortedItems) {\n      if (keptStacks < itemsToKeep) {\n        // Keep the entire stack (this represents one \"item slot\")\n        kept.push({ ...item })\n        keptStacks += 1\n      } else {\n        // Lose the entire stack\n        lost.push({ ...item })\n      }\n    }\n\n    return { kept, lost }\n  }\n\n  /**\n   * Create gravestone\n   */\n  private createGravestone(player: PlayerEntity, items: ItemStack[], position: Vector3): Gravestone {\n    const tier = this.getPlayerGravestoneTier(player)\n    const multiplier = this.config.gravestoneTierMultipliers.get(tier) || 1\n    const duration = this.config.gravestoneBaseDuration * multiplier\n\n    const gravestone: Gravestone = {\n      id: `gravestone_${player.id}_${Date.now()}`,\n      ownerId: player.id,\n      position: { ...position },\n      items,\n      createdAt: Date.now(),\n      expiresAt: Date.now() + duration,\n      tier,\n      model: this.getGravestoneModel(tier),\n      isBlessed: false,\n    }\n\n    this.gravestones.set(gravestone.id, gravestone)\n\n    // Create gravestone entity in world\n    const gravestoneEntity = {\n      id: gravestone.id,\n      type: 'gravestone',\n      position: { ...position },\n      components: new Map(),\n      getComponent(type: string) {\n        return this.components.get(type) || null\n      },\n      hasComponent(type: string) {\n        return this.components.has(type)\n      },\n      addComponent(type: string, component: any) {\n        this.components.set(type, component)\n      },\n    } as RPGEntity\n\n    // Add visual component\n    gravestoneEntity.addComponent('visual', {\n      type: 'visual',\n      model: gravestone.model || 'gravestone_wooden',\n      scale: 1,\n    })\n\n    // Add interaction component\n    gravestoneEntity.addComponent('interaction', {\n      type: 'interaction',\n      interactType: 'gravestone',\n      ownerId: player.id,\n      data: gravestone,\n    })\n\n    // Add to world\n    if ((this.world as any).entities?.items) {\n      ;(this.world as any).entities.items.set(gravestone.id, gravestoneEntity)\n    } else {\n      ;(this.world as any).entities = new Map()\n      ;(this.world as any).entities.set(gravestone.id, gravestoneEntity)\n    }\n\n    this.gravestoneEntities.set(gravestone.id, gravestoneEntity)\n\n    // Schedule expiration\n    setTimeout(() => {\n      this.expireGravestone(gravestone.id)\n    }, duration)\n\n    return gravestone\n  }\n\n  /**\n   * Respawn player\n   */\n  private respawn(player: PlayerEntity, respawnPoint?: string): void {\n    const death = player.getComponent('death')\n    const stats = player.getComponent('stats') as any\n    const movement = player.getComponent('movement') as any\n\n    if (!death || !stats || !movement) {\n      return\n    }\n\n    // Clear death timer\n    const timerId = this.deathTimers.get(player.id)\n    if (timerId) {\n      clearTimeout(timerId)\n      this.deathTimers.delete(player.id)\n    }\n\n    // Get respawn location\n    const location = this.getRespawnLocation(player, respawnPoint)\n\n    // Restore health and prayer - handle stats component structure\n    const statsData = (stats as any).data || stats\n    if (statsData.hitpoints) {\n      statsData.hitpoints.current = statsData.hitpoints.max\n    }\n    if (statsData.prayer) {\n      statsData.prayer.points = Math.floor(statsData.prayer.maxPoints * 0.5) // 50% prayer\n    }\n\n    // Reset death state\n    const deathData = (death as any).data\n    deathData.isDead = false\n    deathData.respawnTimer = 5000\n\n    // Teleport to respawn\n    ;(movement as any).data.position = { ...location }\n    ;(movement as any).data.teleportDestination = { ...location }\n    ;(movement as any).data.teleportTime = Date.now()\n    ;(movement as any).data.teleportAnimation = 'respawn'\n\n    // Emit respawn event\n    this.world.events.emit('player:respawned', {\n      playerId: player.id,\n      position: location,\n      gravestoneId: deathData.gravestoneId,\n    })\n  }\n\n  /**\n   * Handle respawn request\n   */\n  private handleRespawnRequest(event: { playerId: string; respawnPoint?: string }): void {\n    const player = this.world.entities.get(event.playerId) as PlayerEntity\n    if (!player) {\n      return\n    }\n\n    const death = player.getComponent('death')\n    if (!death || !(death as any).data?.isDead) {\n      return\n    }\n\n    this.respawn(player, event.respawnPoint)\n  }\n\n  /**\n   * Get respawn location\n   */\n  private getRespawnLocation(player: PlayerEntity, customPoint?: string): Vector3 {\n    // Check for custom respawn point\n    if (customPoint) {\n      const point = this.config.respawnPoints.get(customPoint)\n      if (point && this.canUseRespawnPoint(player, point)) {\n        return { ...point.position }\n      }\n    }\n\n    // Check for saved respawn point\n    const death = player.getComponent('death')\n    if ((death as any)?.data?.respawnPoint) {\n      const point = this.config.respawnPoints.get((death as any).data.respawnPoint)\n      if (point && this.canUseRespawnPoint(player, point)) {\n        return { ...point.position }\n      }\n    }\n\n    // Default respawn\n    return { ...this.config.defaultRespawnPoint }\n  }\n\n  /**\n   * Check if player can use respawn point\n   */\n  private canUseRespawnPoint(player: PlayerEntity, point: RespawnPoint): boolean {\n    if (!point.requirements) {\n      return true\n    }\n\n    // Check quest requirement\n    if (point.requirements.questId) {\n      // TODO: Check quest completion\n      return false\n    }\n\n    // Check skill requirement\n    if (point.requirements.skillLevel) {\n      const stats = player.getComponent('stats') as any\n      if (!stats) {\n        return false\n      }\n\n      const skill = (stats as any)[point.requirements.skillLevel.skill]\n      if (skill && skill.level >= point.requirements.skillLevel.level) {\n        return true\n      }\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Handle gravestone interaction\n   */\n  private handleGravestoneInteraction(event: { playerId: string; gravestoneId: string }): void {\n    const gravestone = this.gravestones.get(event.gravestoneId)\n    if (!gravestone) {\n      return\n    }\n\n    const player = this.world.entities.get(event.playerId) as PlayerEntity\n    if (!player) {\n      return\n    }\n\n    // Check ownership\n    if (gravestone.ownerId !== event.playerId) {\n      // Check if gravestone is expired\n      if (Date.now() < gravestone.expiresAt) {\n        this.sendMessage(event.playerId, 'This is not your gravestone.')\n        return\n      }\n    }\n\n    // Calculate reclaim fee\n    const totalValue = this.calculateGravestoneValue(gravestone)\n    const fee =\n      totalValue > this.config.freeReclaimThreshold\n        ? Math.floor((totalValue * this.config.reclaimFeePercentage) / 100)\n        : 0\n\n    // Show options\n    this.world.events.emit('gravestone:options', {\n      playerId: event.playerId,\n      gravestoneId: event.gravestoneId,\n      items: gravestone.items,\n      fee,\n      isOwner: gravestone.ownerId === event.playerId,\n    })\n  }\n\n  /**\n   * Reclaim items from gravestone\n   */\n  public reclaimItems(playerId: string, gravestoneId: string, payFee: boolean = true): boolean {\n    const gravestone = this.gravestones.get(gravestoneId)\n    const player = this.world.entities.get(playerId) as PlayerEntity\n\n    if (!gravestone || !player) {\n      return false\n    }\n\n    // Check ownership\n    if (gravestone.ownerId !== playerId && Date.now() < gravestone.expiresAt) {\n      return false\n    }\n\n    // Calculate and check fee\n    if (payFee && gravestone.ownerId === playerId) {\n      const totalValue = this.calculateGravestoneValue(gravestone)\n      const fee =\n        totalValue > this.config.freeReclaimThreshold\n          ? Math.floor((totalValue * this.config.reclaimFeePercentage) / 100)\n          : 0\n\n      if (fee > 0) {\n        const inventory = player.getComponent('inventory') as any\n        if (!inventory) {\n          return false\n        }\n\n        // Check if player has enough gold\n        const goldAmount = this.getPlayerGold(inventory)\n        if (goldAmount < fee) {\n          this.sendMessage(playerId, `You need ${fee} coins to reclaim your items.`)\n          return false\n        }\n\n        // Remove gold\n        if (!this.removePlayerGold(player, fee)) {\n          return false\n        }\n      }\n    }\n\n    // Transfer items\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return false\n    }\n\n    for (const item of gravestone.items) {\n      inventorySystem.addItem(playerId, item.itemId, item.quantity)\n    }\n\n    // Remove gravestone\n    this.removeGravestone(gravestoneId)\n\n    // Update death component\n    const death = player.getComponent('death')\n    if (death) {\n      ;(death as any).data.gravestoneId = null\n    }\n\n    this.sendMessage(playerId, 'You have reclaimed your items.')\n\n    return true\n  }\n\n  /**\n   * Handle gravestone blessing\n   */\n  private handleGravestoneBless(event: { playerId: string; gravestoneId: string }): void {\n    const gravestone = this.gravestones.get(event.gravestoneId)\n    if (!gravestone || gravestone.isBlessed) {\n      return\n    }\n\n    // Extend timer by 1 hour\n    gravestone.expiresAt += 60 * 60 * 1000\n    gravestone.isBlessed = true\n\n    // Update visual\n    const entity = this.gravestoneEntities.get(event.gravestoneId)\n    if (entity) {\n      const visual = entity.getComponent('visual')\n      if (visual) {\n        (visual as any).effect = 'blessed'\n      }\n    }\n\n    this.sendMessage(event.playerId, 'The gravestone has been blessed and will last longer.')\n  }\n\n  /**\n   * Expire gravestone\n   */\n  private expireGravestone(gravestoneId: string): void {\n    const gravestone = this.gravestones.get(gravestoneId)\n    if (!gravestone) {\n      return\n    }\n\n    // Drop items on ground\n    const lootSystem = this.world.getSystem<any>('loot')\n    if (lootSystem && gravestone.items.length > 0) {\n      lootSystem.createLootPile(gravestone.position, gravestone.items, null)\n    }\n\n    // Remove gravestone\n    this.removeGravestone(gravestoneId)\n  }\n\n  /**\n   * Remove gravestone\n   */\n  private removeGravestone(gravestoneId: string): void {\n    this.gravestones.delete(gravestoneId)\n\n    const entity = this.gravestoneEntities.get(gravestoneId)\n    if (entity) {\n      ;(this.world as any).entities?.items?.delete(gravestoneId)\n      this.gravestoneEntities.delete(gravestoneId)\n    }\n  }\n\n  /**\n   * Check if position is in safe zone\n   */\n  private isInSafeZone(position: Vector3): boolean {\n    if (!position) {\n      return false\n    }\n\n    for (const zone of this.config.safeZones) {\n      if (\n        position.x >= zone.bounds.min.x &&\n        position.x <= zone.bounds.max.x &&\n        position.y >= zone.bounds.min.y &&\n        position.y <= zone.bounds.max.y &&\n        position.z >= zone.bounds.min.z &&\n        position.z <= zone.bounds.max.z\n      ) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Get player gravestone tier\n   */\n  private getPlayerGravestoneTier(_player: PlayerEntity): GravestoneTier {\n    // TODO: Check player's unlocked gravestone tier\n    // For now, return wooden\n    return GravestoneTier.WOODEN\n  }\n\n  /**\n   * Get gravestone model\n   */\n  private getGravestoneModel(tier: GravestoneTier): string {\n    const models: Record<GravestoneTier, string> = {\n      [GravestoneTier.BASIC]: 'gravestone_basic',\n      [GravestoneTier.WOODEN]: 'gravestone_wooden',\n      [GravestoneTier.STONE]: 'gravestone_stone',\n      [GravestoneTier.ORNATE]: 'gravestone_ornate',\n      [GravestoneTier.ANGEL]: 'gravestone_angel',\n      [GravestoneTier.MYSTIC]: 'gravestone_mystic',\n      [GravestoneTier.ROYAL]: 'gravestone_royal',\n    }\n    return models[tier]\n  }\n\n  /**\n   * Calculate gravestone value\n   */\n  private calculateGravestoneValue(gravestone: Gravestone): number {\n    let total = 0\n    for (const item of gravestone.items) {\n      total += this.getItemValue(item.itemId) * item.quantity\n    }\n    return total\n  }\n\n  /**\n   * Get item value\n   */\n  private getItemValue(itemId: number): number {\n    // Try to get from InventorySystem's item registry\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (inventorySystem && inventorySystem.itemRegistry && typeof inventorySystem.itemRegistry.getItem === 'function') {\n      const item = inventorySystem.itemRegistry.getItem(itemId)\n      if (item && item.value) {\n        return item.value\n      }\n    }\n\n    // Fallback item values for common items\n    const fallbackValues: Record<number, number> = {\n      1: 15, // Bronze sword\n      995: 1, // Coins\n      315: 5, // Shrimps\n      526: 1, // Bones\n    }\n\n    return fallbackValues[itemId] || 1\n  }\n\n  /**\n   * Get player gold amount\n   */\n  private getPlayerGold(inventory: InventoryComponent): number {\n    let total = 0\n    const items = (inventory as any).data?.items || (inventory as any).items || []\n    for (const item of items) {\n      if (item && item.itemId === 995) {\n        // Coins\n        total += item.quantity\n      }\n    }\n    return total\n  }\n\n  /**\n   * Remove gold from player\n   */\n  private removePlayerGold(player: PlayerEntity, amount: number): boolean {\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return false\n    }\n\n    return inventorySystem.removeItem(player.id, 995, amount)\n  }\n\n  /**\n   * Send message to player\n   */\n  private sendMessage(playerId: string, message: string): void {\n    this.world.events.emit('chat:message', {\n      playerId,\n      message,\n      type: 'system',\n    })\n  }\n\n  /**\n   * Update system\n   */\n  update(_delta: number): void {\n    // Check for expired gravestones\n    const now = Date.now()\n    for (const [id, gravestone] of this.gravestones) {\n      if (now >= gravestone.expiresAt) {\n        this.expireGravestone(id)\n      }\n    }\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  // RPGEntity,\n  PlayerEntity,\n  CombatComponent,\n  StatsComponent,\n  // MovementComponent,\n  InventoryComponent,\n  Vector3,\n} from '../types'\n\ninterface _WildernessLevel {\n  minLevel: number\n  maxLevel: number\n  position: {\n    min: Vector3\n    max: Vector3\n  }\n}\n\ninterface PvPZone {\n  id: string\n  name: string\n  type: 'safe' | 'dangerous' | 'wilderness'\n  bounds: {\n    min: Vector3\n    max: Vector3\n  }\n  rules: {\n    skulling: boolean\n    itemLoss: boolean\n    combatLevelRange?: number\n    singleCombat?: boolean\n    multiCombat?: boolean\n  }\n}\n\ninterface SkullData {\n  playerId: string\n  skullTime: number\n  expiresAt: number\n  attackedPlayers: Set<string>\n}\n\nexport class PvPSystem extends System {\n  private pvpZones: Map<string, PvPZone> = new Map()\n  private skulledPlayers: Map<string, SkullData> = new Map()\n  private combatProtection: Map<string, number> = new Map() // New player protection\n\n  // Configuration\n  private readonly SKULL_DURATION = 20 * 60 * 1000 // 20 minutes\n  private readonly NEW_PLAYER_PROTECTION = 6 * 60 * 60 * 1000 // 6 hours\n  private readonly COMBAT_LEVEL_RANGE = 5 // Default wilderness combat range\n  private readonly SAFE_ZONE_DELAY = 10000 // 10 seconds to leave combat in safe zone\n\n  constructor(world: World) {\n    super(world)\n    this.initializeZones()\n  }\n\n  /**\n   * Initialize the system\n   */\n  override async init(_options: any): Promise<void> {\n    console.log('[PvPSystem] Initializing...')\n\n    // Listen for combat events\n    this.world.events.on('combat:attack', this.handleCombatAttack.bind(this))\n    this.world.events.on('player:death', this.handlePlayerDeath.bind(this))\n    this.world.events.on('player:spawned', this.handlePlayerSpawn.bind(this))\n    this.world.events.on('player:move', this.handlePlayerMove.bind(this))\n\n    // Listen for zone transitions\n    this.world.events.on('player:zone:enter', this.handleZoneEnter.bind(this))\n    this.world.events.on('player:zone:leave', this.handleZoneLeave.bind(this))\n  }\n\n  /**\n   * Initialize PvP zones\n   */\n  private initializeZones(): void {\n    // Wilderness zones\n    this.registerZone({\n      id: 'wilderness_low',\n      name: 'Low Wilderness',\n      type: 'wilderness',\n      bounds: {\n        min: { x: 2944, y: 0, z: 3520 },\n        max: { x: 3391, y: 50, z: 3648 },\n      },\n      rules: {\n        skulling: true,\n        itemLoss: true,\n        multiCombat: true,\n      },\n    })\n\n    this.registerZone({\n      id: 'wilderness_deep',\n      name: 'Deep Wilderness',\n      type: 'wilderness',\n      bounds: {\n        min: { x: 2944, y: 0, z: 3648 },\n        max: { x: 3391, y: 50, z: 3967 },\n      },\n      rules: {\n        skulling: true,\n        itemLoss: true,\n        multiCombat: true,\n      },\n    })\n\n    // PvP worlds safe zones\n    this.registerZone({\n      id: 'edgeville_safe',\n      name: 'Edgeville Safe Zone',\n      type: 'safe',\n      bounds: {\n        min: { x: 3073, y: 0, z: 3457 },\n        max: { x: 3108, y: 20, z: 3518 },\n      },\n      rules: {\n        skulling: false,\n        itemLoss: false,\n      },\n    })\n\n    // Dangerous PvP zones (like Clan Wars)\n    this.registerZone({\n      id: 'clan_wars_dangerous',\n      name: 'Clan Wars Dangerous Portal',\n      type: 'dangerous',\n      bounds: {\n        min: { x: 3327, y: 0, z: 4751 },\n        max: { x: 3378, y: 20, z: 4801 },\n      },\n      rules: {\n        skulling: false,\n        itemLoss: true,\n        singleCombat: false,\n        multiCombat: true,\n      },\n    })\n  }\n\n  /**\n   * Register a PvP zone\n   */\n  public registerZone(zone: PvPZone): void {\n    this.pvpZones.set(zone.id, zone)\n  }\n\n  /**\n   * Handle combat attack\n   */\n  private handleCombatAttack(event: { attackerId: string; targetId: string; timestamp: number }): void {\n    const attacker = this.world.entities.get(event.attackerId) as PlayerEntity\n    const target = this.world.entities.get(event.targetId) as PlayerEntity\n\n    if (!attacker || !target) {\n      return\n    }\n\n    // Check if both are players\n    if (attacker.type !== 'player' || target.type !== 'player') {\n      return\n    }\n\n    // Check if PvP is allowed\n    if (!this.canAttackPlayer(attacker, target)) {\n      this.world.events.emit('combat:cancel', {\n        attackerId: event.attackerId,\n        reason: 'PvP not allowed',\n      })\n      return\n    }\n\n    // Handle skulling\n    this.handleSkulling(attacker, target)\n  }\n\n  /**\n   * Check if player can attack another player\n   */\n  public canAttackPlayer(attacker: PlayerEntity, target: PlayerEntity): boolean {\n    const attackerPos = attacker.position\n    const targetPos = target.position\n\n    // Check if both in same zone\n    const attackerZone = this.getPlayerZone(attackerPos)\n    const targetZone = this.getPlayerZone(targetPos)\n\n    if (!attackerZone || !targetZone || attackerZone.id !== targetZone.id) {\n      this.sendMessage(attacker.id, \"You can't attack players in different zones.\")\n      return false\n    }\n\n    // Check zone rules\n    if (attackerZone.type === 'safe') {\n      this.sendMessage(attacker.id, \"You can't attack players in safe zones.\")\n      return false\n    }\n\n    // Check new player protection\n    if (this.hasNewPlayerProtection(target)) {\n      this.sendMessage(attacker.id, 'That player is under new player protection.')\n      return false\n    }\n\n    // Check wilderness combat levels\n    if (attackerZone.type === 'wilderness') {\n      const wildLevel = this.getWildernessLevel(attackerPos)\n      if (!this.isWithinCombatRange(attacker, target, wildLevel)) {\n        this.sendMessage(attacker.id, 'Your combat level difference is too great.')\n        return false\n      }\n    }\n\n    // Check single/multi combat\n    if (attackerZone.rules.singleCombat) {\n      const attackerCombat = attacker.getComponent('combat') as any\n      const targetCombat = target.getComponent('combat') as any\n\n      if (attackerCombat?.inCombat || targetCombat?.inCombat) {\n        this.sendMessage(attacker.id, \"You can't attack in single combat areas when already in combat.\")\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Handle skulling mechanics\n   */\n  private handleSkulling(attacker: PlayerEntity, target: PlayerEntity): void {\n    const zone = this.getPlayerZone(attacker.position)\n    if (!zone || !zone.rules.skulling) {\n      return\n    }\n\n    // Check if target has skull\n    const targetSkull = this.skulledPlayers.get(target.id)\n\n    // Check if attacker already skulled on this target\n    const attackerSkull = this.skulledPlayers.get(attacker.id)\n    if (attackerSkull?.attackedPlayers.has(target.id)) {\n      return // Already skulled on this player\n    }\n\n    // If target doesn't have skull or hasn't attacked attacker, skull the attacker\n    if (!targetSkull || !targetSkull.attackedPlayers.has(attacker.id)) {\n      this.skullPlayer(attacker, target)\n    }\n  }\n\n  /**\n   * Skull a player\n   */\n  private skullPlayer(player: PlayerEntity, victim: PlayerEntity): void {\n    let skullData = this.skulledPlayers.get(player.id)\n\n    if (!skullData) {\n      skullData = {\n        playerId: player.id,\n        skullTime: Date.now(),\n        expiresAt: Date.now() + this.SKULL_DURATION,\n        attackedPlayers: new Set(),\n      }\n      this.skulledPlayers.set(player.id, skullData)\n    } else {\n      // Refresh skull timer\n      skullData.skullTime = Date.now()\n      skullData.expiresAt = Date.now() + this.SKULL_DURATION\n    }\n\n    skullData.attackedPlayers.add(victim.id)\n\n    // Update player skull timer\n    ;(player as any).skullTimer = this.SKULL_DURATION\n\n    // Emit skull event\n    this.world.events.emit('player:skulled', {\n      playerId: player.id,\n      duration: this.SKULL_DURATION,\n    })\n\n    this.sendMessage(player.id, 'A skull appears above your head.')\n  }\n\n  /**\n   * Handle player death in PvP\n   */\n  private handlePlayerDeath(event: { playerId: string; killerId?: string; position: Vector3 }): void {\n    if (!event.killerId) {\n      return\n    }\n\n    const victim = this.world.entities.get(event.playerId) as PlayerEntity\n    const killer = this.world.entities.get(event.killerId) as PlayerEntity\n\n    if (!victim || !killer || killer.type !== 'player') {\n      return\n    }\n\n    // Remove victim's skull\n    this.skulledPlayers.delete(event.playerId)\n    ;(victim as any).skullTimer = 0\n\n    // Award kill to killer\n    this.awardPvPKill(killer, victim)\n\n    // Emit PvP death event\n    this.world.events.emit('pvp:death', {\n      victimId: event.playerId,\n      killerId: event.killerId,\n      position: event.position,\n    })\n  }\n\n  /**\n   * Award PvP kill\n   */\n  private awardPvPKill(killer: PlayerEntity, victim: PlayerEntity): void {\n    // Track PvP stats\n    const killerStats = (killer as any).pvpStats || {\n      kills: 0,\n      deaths: 0,\n      killStreak: 0,\n      bestKillStreak: 0,\n    }\n\n    killerStats.kills++\n    killerStats.killStreak++\n    if (killerStats.killStreak > killerStats.bestKillStreak) {\n      killerStats.bestKillStreak = killerStats.killStreak\n    }\n\n    ;(killer as any).pvpStats = killerStats\n\n    // Award points/rewards based on victim's risk\n    const riskValue = this.calculateRiskValue(victim)\n    if (riskValue > 0) {\n      this.world.events.emit('pvp:reward', {\n        playerId: killer.id,\n        victimId: victim.id,\n        riskValue,\n      })\n    }\n\n    // Announce kill\n    const zone = this.getPlayerZone(killer.position)\n    if (zone?.type === 'wilderness') {\n      this.sendGlobalMessage(`${killer.displayName} has defeated ${victim.displayName} in the Wilderness!`)\n    }\n  }\n\n  /**\n   * Handle player spawn\n   */\n  private handlePlayerSpawn(event: { playerId: string; firstTime?: boolean }): void {\n    if (event.firstTime) {\n      // Grant new player protection\n      this.combatProtection.set(event.playerId, Date.now() + this.NEW_PLAYER_PROTECTION)\n    }\n  }\n\n  /**\n   * Handle player movement\n   */\n  private handlePlayerMove(event: { playerId: string; from: Vector3; to: Vector3 }): void {\n    const player = this.world.entities.get(event.playerId) as PlayerEntity\n    if (!player) {\n      return\n    }\n\n    const fromZone = this.getPlayerZone(event.from)\n    const toZone = this.getPlayerZone(event.to)\n\n    // Check zone transition\n    if (fromZone?.id !== toZone?.id) {\n      if (fromZone) {\n        this.world.events.emit('player:zone:leave', {\n          playerId: event.playerId,\n          zoneId: fromZone.id,\n        })\n      }\n      if (toZone) {\n        this.world.events.emit('player:zone:enter', {\n          playerId: event.playerId,\n          zoneId: toZone.id,\n        })\n      }\n    }\n\n    // Update wilderness level\n    if (toZone?.type === 'wilderness') {\n      const wildLevel = this.getWildernessLevel(event.to)\n      ;(player as any).wildernessLevel = wildLevel\n    } else {\n      ;(player as any).wildernessLevel = 0\n    }\n  }\n\n  /**\n   * Handle zone enter\n   */\n  private handleZoneEnter(event: { playerId: string; zoneId: string }): void {\n    const zone = this.pvpZones.get(event.zoneId)\n    if (!zone) {\n      return\n    }\n\n    switch (zone.type) {\n      case 'wilderness':\n        this.sendMessage(event.playerId, 'You have entered the Wilderness!')\n        this.sendMessage(event.playerId, 'Other players can now attack you!')\n        break\n      case 'dangerous':\n        this.sendMessage(event.playerId, `You have entered ${zone.name}.`)\n        this.sendMessage(event.playerId, 'This is a dangerous area!')\n        break\n      case 'safe':\n        this.sendMessage(event.playerId, 'You have entered a safe zone.')\n        break\n    }\n  }\n\n  /**\n   * Handle zone leave\n   */\n  private handleZoneLeave(event: { playerId: string; zoneId: string }): void {\n    const zone = this.pvpZones.get(event.zoneId)\n    if (!zone) {\n      return\n    }\n\n    if (zone.type === 'wilderness') {\n      this.sendMessage(event.playerId, 'You have left the Wilderness.')\n    }\n  }\n\n  /**\n   * Get player's current zone\n   */\n  private getPlayerZone(position: Vector3): PvPZone | null {\n    for (const zone of this.pvpZones.values()) {\n      if (this.isInBounds(position, zone.bounds)) {\n        return zone\n      }\n    }\n    return null\n  }\n\n  /**\n   * Get wilderness level at position\n   */\n  private getWildernessLevel(position: Vector3): number {\n    // Wilderness level increases as you go north (higher Z coordinate)\n    const wildernessStart = 3520\n    if (position.z < wildernessStart) {\n      return 0\n    }\n\n    const level = Math.floor((position.z - wildernessStart) / 8) + 1\n    return Math.min(level, 56) // Max wilderness level\n  }\n\n  /**\n   * Check if players are within combat range\n   */\n  private isWithinCombatRange(attacker: PlayerEntity, target: PlayerEntity, wildLevel: number): boolean {\n    const attackerStats = attacker.getComponent('stats') as any\n    const targetStats = target.getComponent('stats') as any\n\n    if (!attackerStats || !targetStats) {\n      return false\n    }\n\n    const attackerCombat = attackerStats.combatLevel\n    const targetCombat = targetStats.combatLevel\n\n    const range = wildLevel || this.COMBAT_LEVEL_RANGE\n    const minLevel = attackerCombat - range\n    const maxLevel = attackerCombat + range\n\n    return targetCombat >= minLevel && targetCombat <= maxLevel\n  }\n\n  /**\n   * Check if player has new player protection\n   */\n  private hasNewPlayerProtection(player: PlayerEntity): boolean {\n    const protection = this.combatProtection.get(player.id)\n    if (!protection) {\n      return false\n    }\n\n    if (Date.now() < protection) {\n      return true\n    }\n\n    // Protection expired\n    this.combatProtection.delete(player.id)\n    return false\n  }\n\n  /**\n   * Calculate risk value\n   */\n  private calculateRiskValue(player: PlayerEntity): number {\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return 0\n    }\n\n    let totalValue = 0\n\n    // Calculate inventory value\n    for (const item of inventory.items) {\n      if (item) {\n        totalValue += this.getItemValue(item.itemId) * item.quantity\n      }\n    }\n\n    // Calculate equipment value\n    for (const slot of Object.values(inventory.equipment)) {\n      if (slot) {\n        totalValue += this.getItemValue((slot as any).id || 0)\n      }\n    }\n\n    return totalValue\n  }\n\n  /**\n   * Get item value from registry\n   */\n  private getItemValue(itemId: number): number {\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (inventorySystem && 'itemRegistry' in inventorySystem) {\n      const item = (inventorySystem as any).itemRegistry.get(itemId)\n      if (item) {\n        return item.value\n      }\n    }\n    return 1\n  }\n\n  /**\n   * Check if position is in bounds\n   */\n  private isInBounds(position: Vector3, bounds: { min: Vector3; max: Vector3 }): boolean {\n    return (\n      position.x >= bounds.min.x &&\n      position.x <= bounds.max.x &&\n      position.y >= bounds.min.y &&\n      position.y <= bounds.max.y &&\n      position.z >= bounds.min.z &&\n      position.z <= bounds.max.z\n    )\n  }\n\n  /**\n   * Send message to player\n   */\n  private sendMessage(playerId: string, message: string): void {\n    this.world.events.emit('chat:message', {\n      playerId,\n      message,\n      type: 'system',\n    })\n  }\n\n  /**\n   * Send global message\n   */\n  private sendGlobalMessage(message: string): void {\n    this.world.events.emit('chat:broadcast', {\n      message,\n      type: 'pvp',\n    })\n  }\n\n  /**\n   * Update system\n   */\n  update(_delta: number): void {\n    const now = Date.now()\n\n    // Update skull timers\n    for (const [playerId, skullData] of this.skulledPlayers) {\n      if (now >= skullData.expiresAt) {\n        this.skulledPlayers.delete(playerId)\n\n        const player = this.world.entities.get(playerId) as PlayerEntity\n        if (player) {\n          ;(player as any).skullTimer = 0\n\n          this.world.events.emit('player:skull:removed', {\n            playerId,\n          })\n\n          this.sendMessage(playerId, 'Your PK skull has disappeared.')\n        }\n      }\n    }\n  }\n\n  /**\n   * Get PvP stats for player\n   */\n  public getPlayerPvPStats(playerId: string): any {\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return null\n    }\n\n    return (\n      (player as any).pvpStats || {\n        kills: 0,\n        deaths: 0,\n        killStreak: 0,\n        bestKillStreak: 0,\n      }\n    )\n  }\n\n  /**\n   * Check if player is skulled\n   */\n  public isPlayerSkulled(playerId: string): boolean {\n    return this.skulledPlayers.has(playerId)\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  RPGEntity,\n  // ItemStack,\n  InventoryComponent,\n  NPCComponent,\n} from '../types/index'\n\nexport interface ShopItem {\n  itemId: number\n  stock: number\n  maxStock: number\n  restockRate: number // Items per minute\n  lastRestock: number\n  customPrice?: number // Override default item value\n}\n\nexport interface Shop {\n  id: string\n  name: string\n  npcId: string\n  items: ShopItem[]\n  currency: 'gp' | 'tokkul' | 'custom' // Gold pieces, TzHaar currency, etc.\n  buyModifier: number // Multiplier for buying from shop (default 1.0)\n  sellModifier: number // Multiplier for selling to shop (default 0.4)\n  specialStock: boolean // Whether stock is per-player\n  lastUpdate: number\n}\n\nexport interface PlayerShopSession {\n  playerId: string\n  shopId: string\n  startTime: number\n}\n\nexport class ShopSystem extends System {\n  private shops: Map<string, Shop> = new Map()\n  private playerShops: Map<string, Map<string, ShopItem[]>> = new Map() // For per-player stock\n  private activeSessions: Map<string, PlayerShopSession> = new Map()\n\n  // Configuration\n  private readonly RESTOCK_INTERVAL = 60000 // 1 minute\n  private readonly DEFAULT_BUY_MODIFIER = 1.0\n  private readonly DEFAULT_SELL_MODIFIER = 0.4 // 40% of item value\n  private readonly GENERAL_STORE_ID = 'general_store'\n\n  constructor(world: World) {\n    super(world)\n    this.registerDefaultShops()\n  }\n\n  /**\n   * Register default shops\n   */\n  private registerDefaultShops(): void {\n    // General Store\n    this.registerShop({\n      id: this.GENERAL_STORE_ID,\n      name: 'General Store',\n      npcId: 'shopkeeper_general',\n      items: [\n        { itemId: 1931, stock: 30, maxStock: 30, restockRate: 1, lastRestock: Date.now() }, // Pot\n        { itemId: 1925, stock: 30, maxStock: 30, restockRate: 1, lastRestock: Date.now() }, // Bucket\n        { itemId: 590, stock: 10, maxStock: 10, restockRate: 0.5, lastRestock: Date.now() }, // Tinderbox\n        { itemId: 36, stock: 10, maxStock: 10, restockRate: 0.5, lastRestock: Date.now() }, // Candle\n        { itemId: 1351, stock: 5, maxStock: 5, restockRate: 0.2, lastRestock: Date.now() }, // Bronze axe\n        { itemId: 1265, stock: 5, maxStock: 5, restockRate: 0.2, lastRestock: Date.now() }, // Bronze pickaxe\n        { itemId: 946, stock: 10, maxStock: 10, restockRate: 0.5, lastRestock: Date.now() }, // Knife\n        { itemId: 1785, stock: 10, maxStock: 10, restockRate: 0.5, lastRestock: Date.now() }, // Gloves\n        { itemId: 1129, stock: 10, maxStock: 10, restockRate: 0.5, lastRestock: Date.now() }, // Leather body\n        { itemId: 1095, stock: 10, maxStock: 10, restockRate: 0.5, lastRestock: Date.now() }, // Leather chaps\n      ],\n      currency: 'gp',\n      buyModifier: this.DEFAULT_BUY_MODIFIER,\n      sellModifier: this.DEFAULT_SELL_MODIFIER,\n      specialStock: false,\n      lastUpdate: Date.now(),\n    })\n\n    // Sword Shop\n    this.registerShop({\n      id: 'sword_shop',\n      name: 'Varrock Swords',\n      npcId: 'shopkeeper_sword',\n      items: [\n        { itemId: 1277, stock: 5, maxStock: 5, restockRate: 0.2, lastRestock: Date.now() }, // Bronze sword\n        { itemId: 1279, stock: 4, maxStock: 4, restockRate: 0.15, lastRestock: Date.now() }, // Iron sword\n        { itemId: 1281, stock: 3, maxStock: 3, restockRate: 0.1, lastRestock: Date.now() }, // Steel sword\n        { itemId: 1285, stock: 2, maxStock: 2, restockRate: 0.05, lastRestock: Date.now() }, // Mithril sword\n        { itemId: 1287, stock: 1, maxStock: 1, restockRate: 0.02, lastRestock: Date.now() }, // Adamant sword\n      ],\n      currency: 'gp',\n      buyModifier: 1.3, // Specialist shops charge more\n      sellModifier: 0.5,\n      specialStock: false,\n      lastUpdate: Date.now(),\n    })\n\n    // Rune Shop\n    this.registerShop({\n      id: 'rune_shop',\n      name: \"Aubury's Rune Shop\",\n      npcId: 'shopkeeper_rune',\n      items: [\n        { itemId: 556, stock: 1000, maxStock: 1000, restockRate: 10, lastRestock: Date.now() }, // Air rune\n        { itemId: 555, stock: 1000, maxStock: 1000, restockRate: 10, lastRestock: Date.now() }, // Water rune\n        { itemId: 557, stock: 1000, maxStock: 1000, restockRate: 10, lastRestock: Date.now() }, // Earth rune\n        { itemId: 554, stock: 1000, maxStock: 1000, restockRate: 10, lastRestock: Date.now() }, // Fire rune\n        { itemId: 558, stock: 500, maxStock: 500, restockRate: 5, lastRestock: Date.now() }, // Mind rune\n        { itemId: 562, stock: 250, maxStock: 250, restockRate: 2, lastRestock: Date.now() }, // Chaos rune\n      ],\n      currency: 'gp',\n      buyModifier: 1.0,\n      sellModifier: 0.4,\n      specialStock: false,\n      lastUpdate: Date.now(),\n    })\n  }\n\n  /**\n   * Register a shop\n   */\n  public registerShop(shop: Shop): void {\n    this.shops.set(shop.id, shop)\n  }\n\n  /**\n   * Open shop for player\n   */\n  public openShop(playerId: string, shopId: string): boolean {\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return false\n    }\n\n    const shop = this.shops.get(shopId)\n    if (!shop) {\n      return false\n    }\n\n    // Check if shop NPC exists and is nearby\n    const shopNPC = this.findShopNPC(shop.npcId)\n    if (shopNPC) {\n      const distance = this.getDistance(player as any, shopNPC as any)\n      if (distance > 5) {\n        this.sendMessage(playerId, 'You are too far away from the shop.')\n        return false\n      }\n    }\n\n    // Create session\n    const session: PlayerShopSession = {\n      playerId,\n      shopId,\n      startTime: Date.now(),\n    }\n    this.activeSessions.set(playerId, session)\n\n    // Update stock\n    this.updateShopStock(shop)\n\n    // Get current stock (per-player or global)\n    const stock = this.getShopStock(shop, playerId)\n\n    // Emit event\n    this.world.events.emit('shop:opened', {\n      playerId,\n      shopId,\n      shopName: shop.name,\n      stock,\n      buyModifier: shop.buyModifier,\n      sellModifier: shop.sellModifier,\n    })\n\n    return true\n  }\n\n  /**\n   * Close shop\n   */\n  public closeShop(playerId: string): void {\n    const session = this.activeSessions.get(playerId)\n    if (!session) {\n      return\n    }\n\n    this.activeSessions.delete(playerId)\n\n    this.world.events.emit('shop:closed', {\n      playerId,\n      shopId: session.shopId,\n    })\n  }\n\n  /**\n   * Buy item from shop\n   */\n  public buyItem(playerId: string, shopId: string, itemIndex: number, quantity: number = 1): boolean {\n    const session = this.activeSessions.get(playerId)\n    if (!session || session.shopId !== shopId) {\n      return false\n    }\n\n    const shop = this.shops.get(shopId)\n    if (!shop) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return false\n    }\n\n    // Get current stock\n    const stock = this.getShopStock(shop, playerId)\n    if (itemIndex < 0 || itemIndex >= stock.length) {\n      return false\n    }\n\n    const shopItem = stock[itemIndex]\n    if (!shopItem || shopItem.stock < quantity) {\n      this.sendMessage(playerId, \"The shop doesn't have that many in stock.\")\n      return false\n    }\n\n    // Calculate price\n    const itemDef = this.getItemDefinition(shopItem.itemId)\n    if (!itemDef) {\n      return false\n    }\n\n    const basePrice = shopItem.customPrice || itemDef.value\n    const totalPrice = Math.floor(basePrice * shop.buyModifier * quantity)\n\n    // Check if player has enough money\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    const playerGold = this.getPlayerCurrency(inventory, shop.currency)\n    if (playerGold < totalPrice) {\n      this.sendMessage(playerId, \"You don't have enough coins.\")\n      return false\n    }\n\n    // Check inventory space\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return false\n    }\n\n    const hasSpace = inventorySystem.hasSpace(playerId, shopItem.itemId, quantity)\n    if (!hasSpace) {\n      this.sendMessage(playerId, \"You don't have enough inventory space.\")\n      return false\n    }\n\n    // Remove currency\n    if (!this.removeCurrency(playerId, shop.currency, totalPrice)) {\n      return false\n    }\n\n    // Add item\n    inventorySystem.addItem(playerId, shopItem.itemId, quantity)\n\n    // Update stock\n    shopItem.stock -= quantity\n\n    // Emit event\n    this.world.events.emit('shop:bought', {\n      playerId,\n      shopId,\n      itemId: shopItem.itemId,\n      quantity,\n      price: totalPrice,\n    })\n\n    this.sendMessage(playerId, `You buy ${quantity} ${itemDef.name} for ${totalPrice} coins.`)\n\n    return true\n  }\n\n  /**\n   * Sell item to shop\n   */\n  public sellItem(playerId: string, shopId: string, inventorySlot: number, quantity: number = 1): boolean {\n    const session = this.activeSessions.get(playerId)\n    if (!session || session.shopId !== shopId) {\n      return false\n    }\n\n    const shop = this.shops.get(shopId)\n    if (!shop) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return false\n    }\n\n    const inventory = player.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    const item = inventory.items[inventorySlot]\n    if (!item || item.quantity < quantity) {\n      return false\n    }\n\n    // Get item definition\n    const itemDef = this.getItemDefinition(item.itemId)\n    if (!itemDef) {\n      return false\n    }\n\n    // Check if item can be sold\n    if (!itemDef.tradeable) {\n      this.sendMessage(playerId, \"You can't sell this item.\")\n      return false\n    }\n\n    // Calculate price\n    const basePrice = itemDef.value\n    const totalPrice = Math.floor(basePrice * shop.sellModifier * quantity)\n\n    // Check if shop accepts this item\n    const shopStock = this.getShopStock(shop, playerId)\n    const existingItem = shopStock.find(si => si.itemId === item.itemId)\n\n    // General stores accept everything, specialist shops only their items\n    if (shop.id !== this.GENERAL_STORE_ID && !existingItem) {\n      this.sendMessage(playerId, \"This shop doesn't buy that type of item.\")\n      return false\n    }\n\n    // Remove item from inventory\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return false\n    }\n\n    if (!inventorySystem.removeItem(playerId, inventorySlot, quantity)) {\n      return false\n    }\n\n    // Add currency\n    this.addCurrency(playerId, shop.currency, totalPrice)\n\n    // Update shop stock if it's a general store\n    if (shop.id === this.GENERAL_STORE_ID && !existingItem) {\n      shopStock.push({\n        itemId: item.itemId,\n        stock: quantity,\n        maxStock: quantity,\n        restockRate: -1, // Sold items don't restock\n        lastRestock: Date.now(),\n      })\n    } else if (existingItem) {\n      existingItem.stock = Math.min(existingItem.stock + quantity, existingItem.maxStock * 2)\n    }\n\n    // Emit event\n    this.world.events.emit('shop:sold', {\n      playerId,\n      shopId,\n      itemId: item.itemId,\n      quantity,\n      price: totalPrice,\n    })\n\n    this.sendMessage(playerId, `You sell ${quantity} ${itemDef.name} for ${totalPrice} coins.`)\n\n    return true\n  }\n\n  /**\n   * Get value of item at shop\n   */\n  public getItemValue(shopId: string, itemId: number, buying: boolean): number {\n    const shop = this.shops.get(shopId)\n    if (!shop) {\n      return 0\n    }\n\n    const itemDef = this.getItemDefinition(itemId)\n    if (!itemDef) {\n      return 0\n    }\n\n    const basePrice = itemDef.value\n    const modifier = buying ? shop.buyModifier : shop.sellModifier\n\n    return Math.floor(basePrice * modifier)\n  }\n\n  /**\n   * Update shop stock (restock items)\n   */\n  private updateShopStock(shop: Shop): void {\n    const now = Date.now()\n    const timeDiff = now - shop.lastUpdate\n\n    if (timeDiff < this.RESTOCK_INTERVAL) {\n      return\n    }\n\n    const restockTicks = Math.floor(timeDiff / this.RESTOCK_INTERVAL)\n    shop.lastUpdate = now\n\n    for (const item of shop.items) {\n      if (item.restockRate > 0 && item.stock < item.maxStock) {\n        const restockAmount = Math.floor(item.restockRate * restockTicks)\n        item.stock = Math.min(item.stock + restockAmount, item.maxStock)\n        item.lastRestock = now\n      }\n    }\n  }\n\n  /**\n   * Update all shops\n   */\n  public update(_delta: number): void {\n    const now = Date.now()\n\n    // Update shop stocks periodically\n    for (const shop of this.shops.values()) {\n      if (now - shop.lastUpdate >= this.RESTOCK_INTERVAL) {\n        this.updateShopStock(shop)\n      }\n    }\n  }\n\n  /**\n   * Get shop stock (handles per-player stock)\n   */\n  private getShopStock(shop: Shop, playerId: string): ShopItem[] {\n    if (!shop.specialStock) {\n      return shop.items\n    }\n\n    // Get or create per-player stock\n    let playerShopMap = this.playerShops.get(playerId)\n    if (!playerShopMap) {\n      playerShopMap = new Map()\n      this.playerShops.set(playerId, playerShopMap)\n    }\n\n    let playerStock = playerShopMap.get(shop.id)\n    if (!playerStock) {\n      // Clone the default stock for this player\n      playerStock = shop.items.map(item => ({ ...item }))\n      playerShopMap.set(shop.id, playerStock)\n    }\n\n    return playerStock\n  }\n\n  /**\n   * Helper methods\n   */\n  private findShopNPC(npcId: string): RPGEntity | null {\n    // Search for NPC by ID\n    const allEntities = this.world.entities.getAll()\n    for (const entity of allEntities) {\n      const npcComponent = entity.getComponent('npc') as any\n      if (npcComponent && npcComponent.npcId.toString() === npcId) {\n        return entity as RPGEntity\n      }\n    }\n    return null\n  }\n\n  private getDistance(entity1: RPGEntity, entity2: RPGEntity): number {\n    const pos1 = entity1.position\n    const pos2 = entity2.position\n\n    const dx = pos1.x - pos2.x\n    const dz = pos1.z - pos2.z\n\n    return Math.sqrt(dx * dx + dz * dz)\n  }\n\n  private getItemDefinition(itemId: number): any {\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return null\n    }\n\n    return inventorySystem.itemRegistry?.getItem(itemId)\n  }\n\n  private getPlayerCurrency(inventory: InventoryComponent, currency: string): number {\n    if (currency !== 'gp') {\n      return 0\n    } // Only support GP for now\n\n    let total = 0\n    for (const item of inventory.items) {\n      if (item && item.itemId === 995) {\n        // Coins\n        total += item.quantity\n      }\n    }\n    return total\n  }\n\n  private removeCurrency(playerId: string, currency: string, amount: number): boolean {\n    if (currency !== 'gp') {\n      return false\n    } // Only support GP for now\n\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return false\n    }\n\n    return inventorySystem.removeItem(playerId, 995, amount)\n  }\n\n  private addCurrency(playerId: string, currency: string, amount: number): boolean {\n    if (currency !== 'gp') {\n      return false\n    } // Only support GP for now\n\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return false\n    }\n\n    return inventorySystem.addItem(playerId, 995, amount)\n  }\n\n  private sendMessage(playerId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      targetId: playerId,\n      message,\n    })\n  }\n\n  /**\n   * Get shop by ID\n   */\n  public getShop(shopId: string): Shop | undefined {\n    return this.shops.get(shopId)\n  }\n\n  /**\n   * Get all shops\n   */\n  public getAllShops(): Shop[] {\n    return Array.from(this.shops.values())\n  }\n\n  /**\n   * Check if player has shop open\n   */\n  public hasShopOpen(playerId: string): boolean {\n    return this.activeSessions.has(playerId)\n  }\n\n  /**\n   * Get player's open shop\n   */\n  public getOpenShop(playerId: string): string | null {\n    const session = this.activeSessions.get(playerId)\n    return session ? session.shopId : null\n  }\n}\n", "/**\n * Item Definitions - Comprehensive item system for RuneScape-style RPG\n * Defines all items including weapons, armor, consumables, and materials\n */\n\nimport { SkillType } from '../skills/SkillDefinitions'\n\nexport enum ItemCategory {\n  WEAPON = 'weapon',\n  ARMOR = 'armor',\n  TOOL = 'tool',\n  CONSUMABLE = 'consumable',\n  MATERIAL = 'material',\n  QUEST = 'quest',\n  MISC = 'misc',\n}\n\nexport enum ItemRarity {\n  COMMON = 'common',\n  UNCOMMON = 'uncommon',\n  RARE = 'rare',\n  VERY_RARE = 'very_rare',\n  ULTRA_RARE = 'ultra_rare',\n}\n\nexport enum EquipmentSlot {\n  WEAPON = 'weapon',\n  HELMET = 'helmet',\n  BODY = 'body',\n  LEGS = 'legs',\n  BOOTS = 'boots',\n  GLOVES = 'gloves',\n  SHIELD = 'shield',\n  RING = 'ring',\n  AMULET = 'amulet',\n  ARROW = 'arrow',\n  CAPE = 'cape',\n}\n\nexport interface ItemRequirement {\n  skill: SkillType\n  level: number\n}\n\nexport interface ItemStats {\n  attackBonus?: number\n  strengthBonus?: number\n  defenceBonus?: number\n  rangedBonus?: number\n  rangedDefence?: number\n  magicBonus?: number\n  magicDefence?: number\n  prayer?: number\n  weight?: number\n}\n\nexport interface ItemDefinition {\n  id: string\n  name: string\n  description: string\n  category: ItemCategory\n  rarity: ItemRarity\n  value: number // Grand Exchange value\n  weight: number\n  stackable: boolean\n  tradeable: boolean\n\n  // Equipment specific\n  equipmentSlot?: EquipmentSlot\n  requirements?: ItemRequirement[]\n  stats?: ItemStats\n\n  // Consumable specific\n  consumable?: {\n    healAmount?: number\n    effects?: Array<{\n      skill: SkillType\n      boost: number\n      duration: number // minutes\n    }>\n    consumeTime?: number // milliseconds\n  }\n\n  // Visual\n  visual?: {\n    color: string\n    model?: string\n    texture?: string\n  }\n\n  // Production\n  production?: {\n    skill: SkillType\n    level: number\n    experience: number\n    materials: Array<{\n      itemId: string\n      quantity: number\n    }>\n  }\n}\n\n// Comprehensive item definitions\nexport const ITEM_DEFINITIONS: Record<string, ItemDefinition> = {\n  // === WEAPONS ===\n\n  // Bronze weapons\n  bronze_dagger: {\n    id: 'bronze_dagger',\n    name: 'Bronze Dagger',\n    description: 'A sharp bronze dagger.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.COMMON,\n    value: 5,\n    weight: 0.5,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 1 }],\n    stats: {\n      attackBonus: 1,\n      strengthBonus: 1,\n      weight: 0.5,\n    },\n    visual: {\n      color: '#CD7F32',\n      model: 'dagger',\n    },\n  },\n\n  bronze_sword: {\n    id: 'bronze_sword',\n    name: 'Bronze Sword',\n    description: 'A bronze sword.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.COMMON,\n    value: 15,\n    weight: 1.0,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 1 }],\n    stats: {\n      attackBonus: 3,\n      strengthBonus: 2,\n      weight: 1.0,\n    },\n    visual: {\n      color: '#CD7F32',\n      model: 'sword',\n    },\n  },\n\n  // Iron weapons\n  iron_sword: {\n    id: 'iron_sword',\n    name: 'Iron Sword',\n    description: 'An iron sword.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.COMMON,\n    value: 50,\n    weight: 1.2,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 1 }],\n    stats: {\n      attackBonus: 10,\n      strengthBonus: 9,\n      weight: 1.2,\n    },\n    visual: {\n      color: '#C0C0C0',\n      model: 'sword',\n    },\n  },\n\n  // Steel weapons\n  steel_sword: {\n    id: 'steel_sword',\n    name: 'Steel Sword',\n    description: 'A steel sword.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.COMMON,\n    value: 150,\n    weight: 1.4,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 5 }],\n    stats: {\n      attackBonus: 21,\n      strengthBonus: 20,\n      weight: 1.4,\n    },\n    visual: {\n      color: '#71797E',\n      model: 'sword',\n    },\n  },\n\n  // Mithril weapons\n  mithril_sword: {\n    id: 'mithril_sword',\n    name: 'Mithril Sword',\n    description: 'A mithril sword.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.UNCOMMON,\n    value: 500,\n    weight: 1.0,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 20 }],\n    stats: {\n      attackBonus: 35,\n      strengthBonus: 34,\n      weight: 1.0,\n    },\n    visual: {\n      color: '#4A90E2',\n      model: 'sword',\n    },\n  },\n\n  // Adamant weapons\n  adamant_sword: {\n    id: 'adamant_sword',\n    name: 'Adamant Sword',\n    description: 'An adamant sword.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.RARE,\n    value: 1500,\n    weight: 1.6,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 30 }],\n    stats: {\n      attackBonus: 50,\n      strengthBonus: 49,\n      weight: 1.6,\n    },\n    visual: {\n      color: '#50C878',\n      model: 'sword',\n    },\n  },\n\n  // Rune weapons\n  rune_sword: {\n    id: 'rune_sword',\n    name: 'Rune Sword',\n    description: 'A rune sword.',\n    category: ItemCategory.WEAPON,\n    rarity: ItemRarity.VERY_RARE,\n    value: 5000,\n    weight: 1.8,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.ATTACK, level: 40 }],\n    stats: {\n      attackBonus: 67,\n      strengthBonus: 66,\n      weight: 1.8,\n    },\n    visual: {\n      color: '#4169E1',\n      model: 'sword',\n    },\n  },\n\n  // === ARMOR ===\n\n  // Bronze armor\n  bronze_helmet: {\n    id: 'bronze_helmet',\n    name: 'Bronze Helmet',\n    description: 'A bronze helmet.',\n    category: ItemCategory.ARMOR,\n    rarity: ItemRarity.COMMON,\n    value: 20,\n    weight: 1.0,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.HELMET,\n    requirements: [{ skill: SkillType.DEFENCE, level: 1 }],\n    stats: {\n      defenceBonus: 6,\n      weight: 1.0,\n    },\n    visual: {\n      color: '#CD7F32',\n      model: 'helmet',\n    },\n  },\n\n  bronze_platebody: {\n    id: 'bronze_platebody',\n    name: 'Bronze Platebody',\n    description: 'A bronze platebody.',\n    category: ItemCategory.ARMOR,\n    rarity: ItemRarity.COMMON,\n    value: 80,\n    weight: 5.0,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.BODY,\n    requirements: [{ skill: SkillType.DEFENCE, level: 1 }],\n    stats: {\n      defenceBonus: 15,\n      weight: 5.0,\n    },\n    visual: {\n      color: '#CD7F32',\n      model: 'platebody',\n    },\n  },\n\n  // Iron armor\n  iron_helmet: {\n    id: 'iron_helmet',\n    name: 'Iron Helmet',\n    description: 'An iron helmet.',\n    category: ItemCategory.ARMOR,\n    rarity: ItemRarity.COMMON,\n    value: 100,\n    weight: 1.2,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.HELMET,\n    requirements: [{ skill: SkillType.DEFENCE, level: 1 }],\n    stats: {\n      defenceBonus: 15,\n      weight: 1.2,\n    },\n    visual: {\n      color: '#C0C0C0',\n      model: 'helmet',\n    },\n  },\n\n  // === CONSUMABLES ===\n\n  // Cooked food\n  cooked_shrimp: {\n    id: 'cooked_shrimp',\n    name: 'Cooked Shrimp',\n    description: 'Some nicely cooked shrimp.',\n    category: ItemCategory.CONSUMABLE,\n    rarity: ItemRarity.COMMON,\n    value: 3,\n    weight: 0.1,\n    stackable: true,\n    tradeable: true,\n    consumable: {\n      healAmount: 3,\n      consumeTime: 1800,\n    },\n    visual: {\n      color: '#FFA500',\n      model: 'food',\n    },\n  },\n\n  cooked_lobster: {\n    id: 'cooked_lobster',\n    name: 'Cooked Lobster',\n    description: 'A delicious cooked lobster.',\n    category: ItemCategory.CONSUMABLE,\n    rarity: ItemRarity.UNCOMMON,\n    value: 150,\n    weight: 0.5,\n    stackable: true,\n    tradeable: true,\n    consumable: {\n      healAmount: 12,\n      consumeTime: 1800,\n    },\n    visual: {\n      color: '#FF6347',\n      model: 'food',\n    },\n  },\n\n  cooked_shark: {\n    id: 'cooked_shark',\n    name: 'Cooked Shark',\n    description: 'A perfectly cooked shark.',\n    category: ItemCategory.CONSUMABLE,\n    rarity: ItemRarity.RARE,\n    value: 1000,\n    weight: 1.0,\n    stackable: true,\n    tradeable: true,\n    consumable: {\n      healAmount: 20,\n      consumeTime: 1800,\n    },\n    visual: {\n      color: '#708090',\n      model: 'food',\n    },\n  },\n\n  // Potions\n  attack_potion: {\n    id: 'attack_potion',\n    name: 'Attack Potion',\n    description: 'A potion that temporarily boosts attack.',\n    category: ItemCategory.CONSUMABLE,\n    rarity: ItemRarity.UNCOMMON,\n    value: 50,\n    weight: 0.1,\n    stackable: true,\n    tradeable: true,\n    consumable: {\n      effects: [\n        {\n          skill: SkillType.ATTACK,\n          boost: 3,\n          duration: 5, // 5 minutes\n        },\n      ],\n      consumeTime: 1800,\n    },\n    visual: {\n      color: '#FF0000',\n      model: 'potion',\n    },\n  },\n\n  strength_potion: {\n    id: 'strength_potion',\n    name: 'Strength Potion',\n    description: 'A potion that temporarily boosts strength.',\n    category: ItemCategory.CONSUMABLE,\n    rarity: ItemRarity.UNCOMMON,\n    value: 50,\n    weight: 0.1,\n    stackable: true,\n    tradeable: true,\n    consumable: {\n      effects: [\n        {\n          skill: SkillType.STRENGTH,\n          boost: 3,\n          duration: 5,\n        },\n      ],\n      consumeTime: 1800,\n    },\n    visual: {\n      color: '#800080',\n      model: 'potion',\n    },\n  },\n\n  // === MATERIALS ===\n\n  // Raw materials\n  raw_shrimp: {\n    id: 'raw_shrimp',\n    name: 'Raw Shrimp',\n    description: 'Some raw shrimp.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 1,\n    weight: 0.1,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#FFEFD5',\n      model: 'food',\n    },\n  },\n\n  raw_lobster: {\n    id: 'raw_lobster',\n    name: 'Raw Lobster',\n    description: 'A raw lobster.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.UNCOMMON,\n    value: 100,\n    weight: 0.5,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#8B0000',\n      model: 'food',\n    },\n  },\n\n  raw_shark: {\n    id: 'raw_shark',\n    name: 'Raw Shark',\n    description: 'A raw shark.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.RARE,\n    value: 800,\n    weight: 1.0,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#2F4F4F',\n      model: 'food',\n    },\n  },\n\n  // Ore and bars\n  copper_ore: {\n    id: 'copper_ore',\n    name: 'Copper Ore',\n    description: 'An ore containing copper.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 5,\n    weight: 2.0,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#B87333',\n      model: 'ore',\n    },\n  },\n\n  tin_ore: {\n    id: 'tin_ore',\n    name: 'Tin Ore',\n    description: 'An ore containing tin.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 5,\n    weight: 2.0,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#D3D3D3',\n      model: 'ore',\n    },\n  },\n\n  iron_ore: {\n    id: 'iron_ore',\n    name: 'Iron Ore',\n    description: 'An ore containing iron.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 25,\n    weight: 2.5,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#696969',\n      model: 'ore',\n    },\n  },\n\n  coal: {\n    id: 'coal',\n    name: 'Coal',\n    description: 'A lump of coal.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 100,\n    weight: 2.0,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#36454F',\n      model: 'ore',\n    },\n  },\n\n  bronze_bar: {\n    id: 'bronze_bar',\n    name: 'Bronze Bar',\n    description: 'A bar of bronze.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 50,\n    weight: 1.0,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#CD7F32',\n      model: 'bar',\n    },\n  },\n\n  iron_bar: {\n    id: 'iron_bar',\n    name: 'Iron Bar',\n    description: 'A bar of iron.',\n    category: ItemCategory.MATERIAL,\n    rarity: ItemRarity.COMMON,\n    value: 150,\n    weight: 1.2,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#C0C0C0',\n      model: 'bar',\n    },\n  },\n\n  // === TOOLS ===\n\n  bronze_pickaxe: {\n    id: 'bronze_pickaxe',\n    name: 'Bronze Pickaxe',\n    description: 'A pickaxe made of bronze.',\n    category: ItemCategory.TOOL,\n    rarity: ItemRarity.COMMON,\n    value: 100,\n    weight: 2.0,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.MINING, level: 1 }],\n    stats: {\n      attackBonus: 1,\n      weight: 2.0,\n    },\n    visual: {\n      color: '#CD7F32',\n      model: 'pickaxe',\n    },\n  },\n\n  iron_pickaxe: {\n    id: 'iron_pickaxe',\n    name: 'Iron Pickaxe',\n    description: 'A pickaxe made of iron.',\n    category: ItemCategory.TOOL,\n    rarity: ItemRarity.COMMON,\n    value: 500,\n    weight: 2.5,\n    stackable: false,\n    tradeable: true,\n    equipmentSlot: EquipmentSlot.WEAPON,\n    requirements: [{ skill: SkillType.MINING, level: 1 }],\n    stats: {\n      attackBonus: 3,\n      weight: 2.5,\n    },\n    visual: {\n      color: '#C0C0C0',\n      model: 'pickaxe',\n    },\n  },\n\n  // === MISC ===\n\n  coins: {\n    id: 'coins',\n    name: 'Coins',\n    description: 'Shiny gold coins.',\n    category: ItemCategory.MISC,\n    rarity: ItemRarity.COMMON,\n    value: 1,\n    weight: 0,\n    stackable: true,\n    tradeable: true,\n    visual: {\n      color: '#FFD700',\n      model: 'coin',\n    },\n  },\n}\n\n// Helper functions\nexport function getItemDefinition(itemId: string): ItemDefinition | null {\n  return ITEM_DEFINITIONS[itemId] || null\n}\n\nexport function getItemsByCategory(category: ItemCategory): ItemDefinition[] {\n  return Object.values(ITEM_DEFINITIONS).filter(item => item.category === category)\n}\n\nexport function getItemsByRarity(rarity: ItemRarity): ItemDefinition[] {\n  return Object.values(ITEM_DEFINITIONS).filter(item => item.rarity === rarity)\n}\n\nexport function getItemsByEquipmentSlot(slot: EquipmentSlot): ItemDefinition[] {\n  return Object.values(ITEM_DEFINITIONS).filter(item => item.equipmentSlot === slot)\n}\n\nexport function getTradeableItems(): ItemDefinition[] {\n  return Object.values(ITEM_DEFINITIONS).filter(item => item.tradeable)\n}\n\nexport function getStackableItems(): ItemDefinition[] {\n  return Object.values(ITEM_DEFINITIONS).filter(item => item.stackable)\n}\n\nexport function canPlayerEquipItem(playerLevels: Record<SkillType, number>, item: ItemDefinition): boolean {\n  if (!item.requirements) {\n    return true\n  }\n\n  return item.requirements.every(req => {\n    const playerLevel = playerLevels[req.skill] || 1\n    return playerLevel >= req.level\n  })\n}\n", "/**\n * Grand Exchange System - RuneScape-style player economy and trading\n * Handles buy/sell orders, price tracking, and automated trading\n */\n\nimport { System } from '../../core/systems/System'\nimport type { World, Entity } from '../../types'\nimport type { ItemDefinition } from './items/ItemDefinitions'\nimport { getItemDefinition, ITEM_DEFINITIONS } from './items/ItemDefinitions'\n\nexport enum OrderType {\n  BUY = 'buy',\n  SELL = 'sell',\n}\n\nexport enum OrderStatus {\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n  PARTIALLY_FILLED = 'partially_filled',\n}\n\nexport interface GrandExchangeOffer {\n  id: string\n  playerId: string\n  playerName: string\n  itemId: string\n  type: OrderType\n  quantity: number\n  pricePerItem: number\n  totalValue: number\n  quantityRemaining: number\n  status: OrderStatus\n  created: number\n  expires: number\n  lastUpdated: number\n}\n\nexport interface PriceHistory {\n  itemId: string\n  timestamp: number\n  price: number\n  quantity: number\n  type: 'trade' | 'update'\n}\n\nexport interface MarketData {\n  itemId: string\n  currentPrice: number\n  dailyVolume: number\n  highPrice24h: number\n  lowPrice24h: number\n  priceChange24h: number\n  priceChangePercent: number\n  lastUpdated: number\n  activeOffers: {\n    buy: number\n    sell: number\n  }\n}\n\nexport interface GrandExchangeComponent {\n  type: 'grand_exchange'\n  activeOffers: string[] // offer IDs\n  completedOffers: string[]\n  totalTradeValue: number\n  tradesCompleted: number\n  lastActivity: number\n}\n\nexport class GrandExchangeSystem extends System {\n  private offers: Map<string, GrandExchangeOffer> = new Map()\n  private marketData: Map<string, MarketData> = new Map()\n  private priceHistory: Map<string, PriceHistory[]> = new Map()\n  private offerCounter: number = 0\n  private readonly OFFER_DURATION = 7 * 24 * 60 * 60 * 1000 // 7 days\n  private readonly MAX_OFFERS_PER_PLAYER = 8 // RuneScape limit\n  private readonly PRICE_UPDATE_INTERVAL = 60000 // 1 minute\n  private readonly MAX_PRICE_HISTORY = 1000 // per item\n\n  constructor(world: World) {\n    super(world)\n    this.initializeMarketData()\n  }\n\n  async initialize(): Promise<void> {\n    console.log('[GrandExchangeSystem] Initializing...')\n\n    // Listen for GE events\n    this.world.events.on('player:joined', this.handlePlayerJoined.bind(this))\n    this.world.events.on('ge:place_buy_offer', this.handlePlaceBuyOffer.bind(this))\n    this.world.events.on('ge:place_sell_offer', this.handlePlaceSellOffer.bind(this))\n    this.world.events.on('ge:cancel_offer', this.handleCancelOffer.bind(this))\n    this.world.events.on('ge:collect_offer', this.handleCollectOffer.bind(this))\n    this.world.events.on('ge:view_market_data', this.handleViewMarketData.bind(this))\n    this.world.events.on('ge:view_price_history', this.handleViewPriceHistory.bind(this))\n    this.world.events.on('ge:search_items', this.handleSearchItems.bind(this))\n\n    // Start market update timer\n    setInterval(() => this.updateMarketData(), this.PRICE_UPDATE_INTERVAL)\n\n    console.log('[GrandExchangeSystem] Initialized with market tracking')\n  }\n\n  private initializeMarketData(): void {\n    // Initialize market data for all tradeable items\n    const allItems = Object.values(ITEM_DEFINITIONS) as ItemDefinition[]\n\n    for (const item of allItems) {\n      if ((item as any).tradeable) {\n        this.marketData.set((item as any).id, {\n          itemId: (item as any).id,\n          currentPrice: (item as any).value, // Start with item's base value\n          dailyVolume: 0,\n          highPrice24h: (item as any).value,\n          lowPrice24h: (item as any).value,\n          priceChange24h: 0,\n          priceChangePercent: 0,\n          lastUpdated: Date.now(),\n          activeOffers: {\n            buy: 0,\n            sell: 0,\n          },\n        })\n\n        this.priceHistory.set((item as any).id, [])\n      }\n    }\n  }\n\n  private handlePlayerJoined(data: any): void {\n    const { entityId } = data\n    this.createGrandExchangeComponent(entityId)\n  }\n\n  public createGrandExchangeComponent(entityId: string): GrandExchangeComponent | null {\n    const entity = this.world.getEntityById(entityId)\n    if (!entity) {\n      return null\n    }\n\n    const geComponent: GrandExchangeComponent = {\n      type: 'grand_exchange',\n      activeOffers: [],\n      completedOffers: [],\n      totalTradeValue: 0,\n      tradesCompleted: 0,\n      lastActivity: Date.now(),\n    }\n\n    entity.addComponent(geComponent)\n    return geComponent\n  }\n\n  private handlePlaceBuyOffer(data: any): void {\n    const { playerId, itemId, quantity, pricePerItem } = data\n    this.placeBuyOffer(playerId, itemId, quantity, pricePerItem)\n  }\n\n  private handlePlaceSellOffer(data: any): void {\n    const { playerId, itemId, quantity, pricePerItem } = data\n    this.placeSellOffer(playerId, itemId, quantity, pricePerItem)\n  }\n\n  private handleCancelOffer(data: any): void {\n    const { playerId, offerId } = data\n    this.cancelOffer(playerId, offerId)\n  }\n\n  private handleCollectOffer(data: any): void {\n    const { playerId, offerId } = data\n    this.collectOffer(playerId, offerId)\n  }\n\n  private handleViewMarketData(data: any): void {\n    const { playerId, itemId } = data\n    const marketData = this.getMarketData(itemId)\n\n    this.world.events.emit('ge:market_data_response', {\n      playerId,\n      itemId,\n      marketData,\n    })\n  }\n\n  private handleViewPriceHistory(data: any): void {\n    const { playerId, itemId, timeframe } = data\n    const history = this.getPriceHistory(itemId, timeframe)\n\n    this.world.events.emit('ge:price_history_response', {\n      playerId,\n      itemId,\n      history,\n    })\n  }\n\n  private handleSearchItems(data: any): void {\n    const { playerId, searchTerm } = data\n    const results = this.searchTradeableItems(searchTerm)\n\n    this.world.events.emit('ge:search_results', {\n      playerId,\n      searchTerm,\n      results,\n    })\n  }\n\n  public placeBuyOffer(playerId: string, itemId: string, quantity: number, pricePerItem: number): boolean {\n    const entity = this.world.getEntityById(playerId)\n    const itemDef = getItemDefinition(itemId)\n\n    if (!entity || !itemDef) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Invalid item or player',\n      })\n      return false\n    }\n\n    if (!itemDef.tradeable) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'This item cannot be traded',\n      })\n      return false\n    }\n\n    const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n    if (!geComponent) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Grand Exchange component not found',\n      })\n      return false\n    }\n\n    // Check offer limits\n    if (geComponent.activeOffers.length >= this.MAX_OFFERS_PER_PLAYER) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: `Maximum ${this.MAX_OFFERS_PER_PLAYER} active offers allowed`,\n      })\n      return false\n    }\n\n    // Validate quantity and price\n    if (quantity <= 0 || pricePerItem <= 0) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Invalid quantity or price',\n      })\n      return false\n    }\n\n    const totalCost = quantity * pricePerItem\n\n    // Check if player has enough coins\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (!inventorySystem || !(inventorySystem as any).hasItem(playerId, 'coins', totalCost)) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: `You need ${totalCost} coins to place this buy offer`,\n      })\n      return false\n    }\n\n    // Remove coins from player\n    ; (inventorySystem as any).removeItem(playerId, 'coins', totalCost)\n\n    // Create buy offer\n    const offerId = `buy_${this.offerCounter++}_${Date.now()}`\n    const offer: GrandExchangeOffer = {\n      id: offerId,\n      playerId,\n      playerName: this.getPlayerName(playerId),\n      itemId,\n      type: OrderType.BUY,\n      quantity,\n      pricePerItem,\n      totalValue: totalCost,\n      quantityRemaining: quantity,\n      status: OrderStatus.ACTIVE,\n      created: Date.now(),\n      expires: Date.now() + this.OFFER_DURATION,\n      lastUpdated: Date.now(),\n    }\n\n    this.offers.set(offerId, offer)\n    geComponent.activeOffers.push(offerId)\n    geComponent.lastActivity = Date.now()\n\n    // Update market data\n    this.updateActiveOfferCount(itemId)\n\n    // Try to match with existing sell offers\n    this.attemptMatching(offer)\n\n    this.world.events.emit('ge:buy_offer_placed', {\n      playerId,\n      offerId,\n      itemId,\n      itemName: itemDef.name,\n      quantity,\n      pricePerItem,\n      totalCost,\n    })\n\n    return true\n  }\n\n  public placeSellOffer(playerId: string, itemId: string, quantity: number, pricePerItem: number): boolean {\n    const entity = this.world.getEntityById(playerId)\n    const itemDef = getItemDefinition(itemId)\n\n    if (!entity || !itemDef) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Invalid item or player',\n      })\n      return false\n    }\n\n    if (!itemDef.tradeable) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'This item cannot be traded',\n      })\n      return false\n    }\n\n    const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n    if (!geComponent) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Grand Exchange component not found',\n      })\n      return false\n    }\n\n    // Check offer limits\n    if (geComponent.activeOffers.length >= this.MAX_OFFERS_PER_PLAYER) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: `Maximum ${this.MAX_OFFERS_PER_PLAYER} active offers allowed`,\n      })\n      return false\n    }\n\n    // Validate quantity and price\n    if (quantity <= 0 || pricePerItem <= 0) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Invalid quantity or price',\n      })\n      return false\n    }\n\n    // Check if player has the items\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (!inventorySystem || !(inventorySystem as any).hasItem(playerId, itemId, quantity)) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: `You need ${quantity} ${itemDef.name} to place this sell offer`,\n      })\n      return false\n    }\n\n    // Remove items from player\n    ; (inventorySystem as any).removeItem(playerId, itemId, quantity)\n\n    // Create sell offer\n    const offerId = `sell_${this.offerCounter++}_${Date.now()}`\n    const offer: GrandExchangeOffer = {\n      id: offerId,\n      playerId,\n      playerName: this.getPlayerName(playerId),\n      itemId,\n      type: OrderType.SELL,\n      quantity,\n      pricePerItem,\n      totalValue: quantity * pricePerItem,\n      quantityRemaining: quantity,\n      status: OrderStatus.ACTIVE,\n      created: Date.now(),\n      expires: Date.now() + this.OFFER_DURATION,\n      lastUpdated: Date.now(),\n    }\n\n    this.offers.set(offerId, offer)\n    geComponent.activeOffers.push(offerId)\n    geComponent.lastActivity = Date.now()\n\n    // Update market data\n    this.updateActiveOfferCount(itemId)\n\n    // Try to match with existing buy offers\n    this.attemptMatching(offer)\n\n    this.world.events.emit('ge:sell_offer_placed', {\n      playerId,\n      offerId,\n      itemId,\n      itemName: itemDef.name,\n      quantity,\n      pricePerItem,\n      totalValue: quantity * pricePerItem,\n    })\n\n    return true\n  }\n\n  private attemptMatching(newOffer: GrandExchangeOffer): void {\n    const oppositeType = newOffer.type === OrderType.BUY ? OrderType.SELL : OrderType.BUY\n\n    // Get matching offers sorted by best price\n    const matchingOffers = Array.from(this.offers.values())\n      .filter(\n        offer =>\n          offer.itemId === newOffer.itemId &&\n          offer.type === oppositeType &&\n          offer.status === OrderStatus.ACTIVE &&\n          offer.playerId !== newOffer.playerId && // Can't trade with yourself\n          this.canOffersMatch(newOffer, offer)\n      )\n      .sort((a, b) => {\n        // For buy offers, sort by highest price first\n        // For sell offers, sort by lowest price first\n        if (oppositeType === OrderType.BUY) {\n          return b.pricePerItem - a.pricePerItem\n        } else {\n          return a.pricePerItem - b.pricePerItem\n        }\n      })\n\n    // Process matches\n    for (const matchingOffer of matchingOffers) {\n      if (newOffer.quantityRemaining <= 0) {\n        break\n      }\n\n      this.executeTrade(newOffer, matchingOffer)\n    }\n  }\n\n  private canOffersMatch(buyOffer: GrandExchangeOffer, sellOffer: GrandExchangeOffer): boolean {\n    // Determine which is buy and which is sell\n    const actualBuyOffer = buyOffer.type === OrderType.BUY ? buyOffer : sellOffer\n    const actualSellOffer = buyOffer.type === OrderType.SELL ? buyOffer : sellOffer\n\n    // Buy price must be >= sell price for a match\n    return actualBuyOffer.pricePerItem >= actualSellOffer.pricePerItem\n  }\n\n  private executeTrade(offer1: GrandExchangeOffer, offer2: GrandExchangeOffer): void {\n    const buyOffer = offer1.type === OrderType.BUY ? offer1 : offer2\n    const sellOffer = offer1.type === OrderType.SELL ? offer1 : offer2\n\n    // Determine trade quantity (minimum of both remaining quantities)\n    const tradeQuantity = Math.min(buyOffer.quantityRemaining, sellOffer.quantityRemaining)\n\n    // Trade price is the seller's price (seller gets their asking price)\n    const tradePrice = sellOffer.pricePerItem\n    const totalTradeValue = tradeQuantity * tradePrice\n\n    // Update offer quantities\n    buyOffer.quantityRemaining -= tradeQuantity\n    sellOffer.quantityRemaining -= tradeQuantity\n    buyOffer.lastUpdated = Date.now()\n    sellOffer.lastUpdated = Date.now()\n\n    // Update statuses\n    if (buyOffer.quantityRemaining === 0) {\n      buyOffer.status = OrderStatus.COMPLETED\n    } else {\n      buyOffer.status = OrderStatus.PARTIALLY_FILLED\n    }\n\n    if (sellOffer.quantityRemaining === 0) {\n      sellOffer.status = OrderStatus.COMPLETED\n    } else {\n      sellOffer.status = OrderStatus.PARTIALLY_FILLED\n    }\n\n    // Execute the trade\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (inventorySystem) {\n      // Give items to buyer\n      ; (inventorySystem as any).addItem(buyOffer.playerId, buyOffer.itemId, tradeQuantity)\n\n        // Give coins to seller\n        ; (inventorySystem as any).addItem(sellOffer.playerId, 'coins', totalTradeValue)\n\n      // If buyer paid more than trade price, refund the difference\n      const buyerOverpayment = (buyOffer.pricePerItem - tradePrice) * tradeQuantity\n      if (buyerOverpayment > 0) {\n        ; (inventorySystem as any).addItem(buyOffer.playerId, 'coins', buyerOverpayment)\n      }\n    }\n\n    // Update player stats\n    this.updatePlayerTradeStats(buyOffer.playerId, totalTradeValue)\n    this.updatePlayerTradeStats(sellOffer.playerId, totalTradeValue)\n\n    // Record price history\n    this.recordPriceHistory(buyOffer.itemId, tradePrice, tradeQuantity)\n\n    // Update market data\n    this.updateMarketDataFromTrade(buyOffer.itemId, tradePrice, tradeQuantity)\n\n    // Emit trade events\n    this.world.events.emit('ge:trade_executed', {\n      buyerId: buyOffer.playerId,\n      sellerId: sellOffer.playerId,\n      itemId: buyOffer.itemId,\n      quantity: tradeQuantity,\n      pricePerItem: tradePrice,\n      totalValue: totalTradeValue,\n      buyOfferId: buyOffer.id,\n      sellOfferId: sellOffer.id,\n    })\n\n    // Move completed offers to completed list\n    if (buyOffer.status === OrderStatus.COMPLETED) {\n      this.moveOfferToCompleted(buyOffer.playerId, buyOffer.id)\n    }\n\n    if (sellOffer.status === OrderStatus.COMPLETED) {\n      this.moveOfferToCompleted(sellOffer.playerId, sellOffer.id)\n    }\n  }\n\n  public cancelOffer(playerId: string, offerId: string): boolean {\n    const offer = this.offers.get(offerId)\n\n    if (!offer || offer.playerId !== playerId) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Offer not found or not owned by you',\n      })\n      return false\n    }\n\n    if (offer.status !== OrderStatus.ACTIVE && offer.status !== OrderStatus.PARTIALLY_FILLED) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Cannot cancel completed or cancelled offer',\n      })\n      return false\n    }\n\n    // Refund items/coins\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\n    if (inventorySystem) {\n      if (offer.type === OrderType.BUY) {\n        // Refund remaining coins\n        const refundAmount = offer.quantityRemaining * offer.pricePerItem\n          ; (inventorySystem as any).addItem(playerId, 'coins', refundAmount)\n      } else {\n        // Refund remaining items\n        ; (inventorySystem as any).addItem(playerId, offer.itemId, offer.quantityRemaining)\n      }\n    }\n\n    // Update offer status\n    offer.status = OrderStatus.CANCELLED\n    offer.lastUpdated = Date.now()\n\n    // Remove from active offers\n    const entity = this.world.getEntityById(playerId)\n    if (entity) {\n      const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n      if (geComponent) {\n        const index = geComponent.activeOffers.indexOf(offerId)\n        if (index !== -1) {\n          geComponent.activeOffers.splice(index, 1)\n        }\n        geComponent.completedOffers.push(offerId)\n      }\n    }\n\n    // Update market data\n    this.updateActiveOfferCount(offer.itemId)\n\n    this.world.events.emit('ge:offer_cancelled', {\n      playerId,\n      offerId,\n      itemId: offer.itemId,\n      refundAmount:\n        offer.type === OrderType.BUY ? offer.quantityRemaining * offer.pricePerItem : offer.quantityRemaining,\n      refundType: offer.type === OrderType.BUY ? 'coins' : 'items',\n    })\n\n    return true\n  }\n\n  public collectOffer(playerId: string, offerId: string): boolean {\n    const offer = this.offers.get(offerId)\n\n    if (!offer || offer.playerId !== playerId) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Offer not found or not owned by you',\n      })\n      return false\n    }\n\n    if (offer.status !== OrderStatus.COMPLETED) {\n      this.world.events.emit('ge:error', {\n        playerId,\n        message: 'Offer is not ready for collection',\n      })\n      return false\n    }\n\n    // Remove from completed offers\n    const entity = this.world.getEntityById(playerId)\n    if (entity) {\n      const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n      if (geComponent) {\n        const index = geComponent.completedOffers.indexOf(offerId)\n        if (index !== -1) {\n          geComponent.completedOffers.splice(index, 1)\n        }\n      }\n    }\n\n    // Remove offer from system\n    this.offers.delete(offerId)\n\n    this.world.events.emit('ge:offer_collected', {\n      playerId,\n      offerId,\n      itemId: offer.itemId,\n    })\n\n    return true\n  }\n\n  private moveOfferToCompleted(playerId: string, offerId: string): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n    if (!geComponent) {\n      return\n    }\n\n    const activeIndex = geComponent.activeOffers.indexOf(offerId)\n    if (activeIndex !== -1) {\n      geComponent.activeOffers.splice(activeIndex, 1)\n      geComponent.completedOffers.push(offerId)\n    }\n  }\n\n  private updatePlayerTradeStats(playerId: string, tradeValue: number): void {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return\n    }\n\n    const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n    if (!geComponent) {\n      return\n    }\n\n    geComponent.totalTradeValue += tradeValue\n    geComponent.tradesCompleted++\n    geComponent.lastActivity = Date.now()\n  }\n\n  private recordPriceHistory(itemId: string, price: number, quantity: number): void {\n    const history = this.priceHistory.get(itemId) || []\n\n    history.push({\n      itemId,\n      timestamp: Date.now(),\n      price,\n      quantity,\n      type: 'trade',\n    })\n\n    // Keep only recent history\n    if (history.length > this.MAX_PRICE_HISTORY) {\n      history.splice(0, history.length - this.MAX_PRICE_HISTORY)\n    }\n\n    this.priceHistory.set(itemId, history)\n  }\n\n  private updateMarketDataFromTrade(itemId: string, price: number, quantity: number): void {\n    const marketData = this.marketData.get(itemId)\n    if (!marketData) {\n      return\n    }\n\n    const oldPrice = marketData.currentPrice\n\n    // Update current price (weighted average with recent trades)\n    const weight = Math.min(quantity / 100, 0.1) // Max 10% price change per trade\n    marketData.currentPrice = Math.round(marketData.currentPrice * (1 - weight) + price * weight)\n\n    // Update daily stats\n    marketData.dailyVolume += quantity\n    marketData.highPrice24h = Math.max(marketData.highPrice24h, price)\n    marketData.lowPrice24h = Math.min(marketData.lowPrice24h, price)\n    marketData.priceChange24h = marketData.currentPrice - oldPrice\n    marketData.priceChangePercent = oldPrice > 0 ? (marketData.priceChange24h / oldPrice) * 100 : 0\n    marketData.lastUpdated = Date.now()\n  }\n\n  private updateActiveOfferCount(itemId: string): void {\n    const marketData = this.marketData.get(itemId)\n    if (!marketData) {\n      return\n    }\n\n    const activeOffers = Array.from(this.offers.values()).filter(\n      offer => offer.itemId === itemId && offer.status === OrderStatus.ACTIVE\n    )\n\n    marketData.activeOffers.buy = activeOffers.filter(o => o.type === OrderType.BUY).length\n    marketData.activeOffers.sell = activeOffers.filter(o => o.type === OrderType.SELL).length\n  }\n\n  private updateMarketData(): void {\n    // Clean up expired offers\n    this.cleanupExpiredOffers()\n\n    // Update market data for all items\n    for (const [itemId, marketData] of this.marketData) {\n      this.updateActiveOfferCount(itemId)\n\n      // Reset daily stats if it's a new day\n      const now = Date.now()\n      const daysSinceUpdate = (now - marketData.lastUpdated) / (24 * 60 * 60 * 1000)\n\n      if (daysSinceUpdate >= 1) {\n        marketData.dailyVolume = 0\n        marketData.priceChange24h = 0\n        marketData.priceChangePercent = 0\n        marketData.highPrice24h = marketData.currentPrice\n        marketData.lowPrice24h = marketData.currentPrice\n      }\n    }\n  }\n\n  private cleanupExpiredOffers(): void {\n    const now = Date.now()\n    const expiredOffers = Array.from(this.offers.values()).filter(\n      offer => offer.status === OrderStatus.ACTIVE && offer.expires < now\n    )\n\n    for (const offer of expiredOffers) {\n      this.cancelOffer(offer.playerId, offer.id)\n    }\n  }\n\n  private getPlayerName(playerId: string): string {\n    const entity = this.world.getEntityById(playerId)\n    return entity?.data?.name || `Player_${playerId.slice(-6)}`\n  }\n\n  private searchTradeableItems(searchTerm: string): ItemDefinition[] {\n    const allItems = Object.values(ITEM_DEFINITIONS) as ItemDefinition[]\n    return allItems.filter(item => \n      (item as any).tradeable && \n      (item as any).name.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  }\n\n  public getMarketData(itemId: string): MarketData | null {\n    return this.marketData.get(itemId) || null\n  }\n\n  public getPriceHistory(itemId: string, timeframe?: number): PriceHistory[] {\n    const history = this.priceHistory.get(itemId) || []\n\n    if (!timeframe) {\n      return history\n    }\n\n    const cutoff = Date.now() - timeframe\n    return history.filter(entry => entry.timestamp >= cutoff)\n  }\n\n  public getPlayerOffers(playerId: string): { active: GrandExchangeOffer[]; completed: GrandExchangeOffer[] } {\n    const entity = this.world.getEntityById(playerId)\n    if (!entity) {\n      return { active: [], completed: [] }\n    }\n\n    const geComponent = entity.getComponent('grand_exchange') as GrandExchangeComponent\n    if (!geComponent) {\n      return { active: [], completed: [] }\n    }\n\n    const active = geComponent.activeOffers\n      .map(id => this.offers.get(id))\n      .filter(offer => offer) as GrandExchangeOffer[]\n\n    const completed = geComponent.completedOffers\n      .map(id => this.offers.get(id))\n      .filter(offer => offer) as GrandExchangeOffer[]\n\n    return { active, completed }\n  }\n\n  public getGrandExchangeComponent(playerId: string): GrandExchangeComponent | null {\n    const entity = this.world.getEntityById(playerId)\n    return entity ? (entity.getComponent('grand_exchange') as GrandExchangeComponent) : null\n  }\n\n  update(deltaTime: number): void {\n    // Periodic cleanup and market updates are handled by intervals\n  }\n\n  serialize(): any {\n    return {\n      offers: Object.fromEntries(this.offers),\n      marketData: Object.fromEntries(this.marketData),\n      priceHistory: Object.fromEntries(this.priceHistory),\n      offerCounter: this.offerCounter,\n    }\n  }\n\n  deserialize(data: any): void {\n    if (data.offers) {\n      this.offers = new Map(Object.entries(data.offers))\n    }\n    if (data.marketData) {\n      this.marketData = new Map(Object.entries(data.marketData))\n    }\n    if (data.priceHistory) {\n      this.priceHistory = new Map(Object.entries(data.priceHistory))\n    }\n    if (data.offerCounter) {\n      this.offerCounter = data.offerCounter\n    }\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  RPGEntity,\n  StatsComponent,\n  CombatComponent,\n  // SkillType\n} from '../types/index'\n\nexport interface Prayer {\n  id: string\n  name: string\n  level: number\n  drainRate: number // Points per minute\n  effects: PrayerEffect[]\n  overhead?: boolean // Protection prayers show overhead icon\n  category: PrayerCategory\n}\n\nexport enum PrayerCategory {\n  COMBAT = 'combat',\n  SKILL = 'skill',\n  PROTECTION = 'protection',\n  OTHER = 'other',\n}\n\nexport interface PrayerEffect {\n  type: 'stat_boost' | 'damage_reduction' | 'protection' | 'other'\n  stat?: string\n  modifier?: number // Percentage boost/reduction\n  value?: any\n}\n\nexport interface ActivePrayer {\n  prayerId: string\n  startTime: number\n  overhead?: boolean\n}\n\nexport class PrayerSystem extends System {\n  private prayers: Map<string, Prayer> = new Map()\n  private activePrayers: Map<string, Set<string>> = new Map() // entityId -> Set of prayer IDs\n  private prayerDrainTimers: Map<string, number> = new Map()\n\n  // Configuration\n  private readonly PRAYER_TICK_RATE = 600 // milliseconds (game tick)\n  private readonly BASE_DRAIN_RESISTANCE = 120 // Base time in seconds per prayer point\n\n  private originalStats: Map<string, any> = new Map()\n\n  constructor(world: World) {\n    super(world)\n    this.registerDefaultPrayers()\n  }\n\n  /**\n   * Register default prayers\n   */\n  private registerDefaultPrayers(): void {\n    // Tier 1 prayers\n    this.registerPrayer({\n      id: 'thick_skin',\n      name: 'Thick Skin',\n      level: 1,\n      drainRate: 3,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'defense',\n          modifier: 5, // +5% defense\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'burst_of_strength',\n      name: 'Burst of Strength',\n      level: 4,\n      drainRate: 3,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'strength',\n          modifier: 5, // +5% strength\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'clarity_of_thought',\n      name: 'Clarity of Thought',\n      level: 7,\n      drainRate: 3,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'attack',\n          modifier: 5, // +5% attack\n        },\n      ],\n    })\n\n    // Tier 2 prayers\n    this.registerPrayer({\n      id: 'rock_skin',\n      name: 'Rock Skin',\n      level: 10,\n      drainRate: 6,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'defense',\n          modifier: 10, // +10% defense\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'superhuman_strength',\n      name: 'Superhuman Strength',\n      level: 13,\n      drainRate: 6,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'strength',\n          modifier: 10, // +10% strength\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'improved_reflexes',\n      name: 'Improved Reflexes',\n      level: 16,\n      drainRate: 6,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'attack',\n          modifier: 10, // +10% attack\n        },\n      ],\n    })\n\n    // Protection prayers\n    this.registerPrayer({\n      id: 'protect_from_magic',\n      name: 'Protect from Magic',\n      level: 37,\n      drainRate: 12,\n      overhead: true,\n      category: PrayerCategory.PROTECTION,\n      effects: [\n        {\n          type: 'protection',\n          stat: 'magic',\n          modifier: 100, // 100% protection from NPCs, 40% from players\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'protect_from_missiles',\n      name: 'Protect from Missiles',\n      level: 40,\n      drainRate: 12,\n      overhead: true,\n      category: PrayerCategory.PROTECTION,\n      effects: [\n        {\n          type: 'protection',\n          stat: 'ranged',\n          modifier: 100, // 100% protection from NPCs, 40% from players\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'protect_from_melee',\n      name: 'Protect from Melee',\n      level: 43,\n      drainRate: 12,\n      overhead: true,\n      category: PrayerCategory.PROTECTION,\n      effects: [\n        {\n          type: 'protection',\n          stat: 'melee',\n          modifier: 100, // 100% protection from NPCs, 40% from players\n        },\n      ],\n    })\n\n    // Higher tier prayers\n    this.registerPrayer({\n      id: 'eagle_eye',\n      name: 'Eagle Eye',\n      level: 44,\n      drainRate: 12,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'ranged',\n          modifier: 15, // +15% ranged\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'mystic_might',\n      name: 'Mystic Might',\n      level: 45,\n      drainRate: 12,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'magic',\n          modifier: 15, // +15% magic\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'steel_skin',\n      name: 'Steel Skin',\n      level: 28,\n      drainRate: 12,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'defense',\n          modifier: 15, // +15% defense\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'ultimate_strength',\n      name: 'Ultimate Strength',\n      level: 31,\n      drainRate: 12,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'strength',\n          modifier: 15, // +15% strength\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'incredible_reflexes',\n      name: 'Incredible Reflexes',\n      level: 34,\n      drainRate: 12,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'attack',\n          modifier: 15, // +15% attack\n        },\n      ],\n    })\n\n    this.registerPrayer({\n      id: 'piety',\n      name: 'Piety',\n      level: 70,\n      drainRate: 24,\n      category: PrayerCategory.COMBAT,\n      effects: [\n        {\n          type: 'stat_boost',\n          stat: 'attack',\n          modifier: 20, // +20% attack\n        },\n        {\n          type: 'stat_boost',\n          stat: 'strength',\n          modifier: 23, // +23% strength\n        },\n        {\n          type: 'stat_boost',\n          stat: 'defense',\n          modifier: 25, // +25% defense\n        },\n      ],\n    })\n  }\n\n  /**\n   * Register a prayer\n   */\n  public registerPrayer(prayer: Prayer): void {\n    this.prayers.set(prayer.id, prayer)\n  }\n\n  /**\n   * Activate prayer for entity\n   */\n  public activatePrayer(entityId: string, prayerId: string): boolean {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return false\n    }\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return false\n    }\n\n    const prayer = this.prayers.get(prayerId)\n    if (!prayer) {\n      return false\n    }\n\n    // Check prayer level requirement\n    if (stats.prayer.level < prayer.level) {\n      this.sendMessage(entityId, `You need level ${prayer.level} Prayer to use ${prayer.name}.`)\n      return false\n    }\n\n    // Check if player has prayer points\n    if (stats.prayer.points <= 0) {\n      this.sendMessage(entityId, 'You have run out of Prayer points.')\n      return false\n    }\n\n    // Get or create active prayers set\n    let entityPrayers = this.activePrayers.get(entityId)\n    if (!entityPrayers) {\n      entityPrayers = new Set()\n      this.activePrayers.set(entityId, entityPrayers)\n    }\n\n    // Deactivate conflicting prayers\n    this.deactivateConflictingPrayers(entityId, prayer)\n\n    // Activate prayer\n    entityPrayers.add(prayerId)\n\n    // Apply prayer effects\n    this.applyPrayerEffects(entity as any, prayer)\n\n    // Update combat component for protection prayers\n    if (prayer.overhead) {\n      const combat = entity.getComponent('combat') as any\n      if (combat) {\n        this.updateProtectionPrayers(combat, prayer, true)\n      }\n    }\n\n    // Emit event\n    this.world.events.emit('prayer:activated', {\n      entityId,\n      prayerId,\n      prayerName: prayer.name,\n    })\n\n    return true\n  }\n\n  /**\n   * Deactivate prayer\n   */\n  public deactivatePrayer(entityId: string, prayerId: string): boolean {\n    const entityPrayers = this.activePrayers.get(entityId)\n    if (!entityPrayers || !entityPrayers.has(prayerId)) {\n      return false\n    }\n\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return false\n    }\n\n    const prayer = this.prayers.get(prayerId)\n    if (!prayer) {\n      return false\n    }\n\n    // Remove prayer\n    entityPrayers.delete(prayerId)\n\n    // Remove prayer effects\n    this.removePrayerEffects(entity as any, prayer)\n\n    // Update combat component for protection prayers\n    if (prayer.overhead) {\n      const combat = entity.getComponent('combat') as any\n      if (combat) {\n        this.updateProtectionPrayers(combat, prayer, false)\n      }\n    }\n\n    // Emit event\n    this.world.events.emit('prayer:deactivated', {\n      entityId,\n      prayerId,\n      prayerName: prayer.name,\n    })\n\n    return true\n  }\n\n  /**\n   * Deactivate all prayers\n   */\n  public deactivateAllPrayers(entityId: string): void {\n    const entityPrayers = this.activePrayers.get(entityId)\n    if (!entityPrayers) {\n      return\n    }\n\n    for (const prayerId of Array.from(entityPrayers)) {\n      this.deactivatePrayer(entityId, prayerId)\n    }\n  }\n\n  /**\n   * Update prayer drain\n   */\n  public update(_delta: number): void {\n    const tickTime = Date.now()\n\n    for (const [entityId, prayerSet] of this.activePrayers) {\n      if (prayerSet.size === 0) {\n        continue\n      }\n\n      const entity = this.world.entities.get(entityId)\n      if (!entity) {\n        continue\n      }\n\n      const stats = entity.getComponent('stats') as any\n      if (!stats) {\n        continue\n      }\n\n      // Check if it's time to drain\n      const lastDrain = this.prayerDrainTimers.get(entityId) || 0\n      if (tickTime - lastDrain >= this.PRAYER_TICK_RATE) {\n        this.prayerDrainTimers.set(entityId, tickTime)\n\n        // Calculate total drain rate\n        let totalDrainRate = 0\n        for (const prayerId of prayerSet) {\n          const prayer = this.prayers.get(prayerId)\n          if (prayer) {\n            totalDrainRate += prayer.drainRate\n          }\n        }\n\n        // Apply prayer bonus from equipment\n        const prayerBonus = stats.combatBonuses.prayerBonus || 0\n        const drainResistance = this.BASE_DRAIN_RESISTANCE + prayerBonus * 2\n\n        // Calculate drain amount\n        const drainPerTick = totalDrainRate / (drainResistance / (this.PRAYER_TICK_RATE / 1000))\n\n        // Drain prayer points\n        stats.prayer.points = Math.max(0, stats.prayer.points - drainPerTick)\n\n        // If out of prayer points, deactivate all prayers\n        if (stats.prayer.points <= 0) {\n          this.deactivateAllPrayers(entityId)\n          this.sendMessage(entityId, 'You have run out of Prayer points.')\n        }\n      }\n    }\n  }\n\n  /**\n   * Restore prayer points\n   */\n  public restorePrayer(entityId: string, amount: number): void {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return\n    }\n\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    const previousPoints = stats.prayer.points\n    stats.prayer.points = Math.min(stats.prayer.maxPoints, stats.prayer.points + amount)\n\n    const restored = stats.prayer.points - previousPoints\n    if (restored > 0) {\n      this.world.events.emit('prayer:restored', {\n        entityId,\n        amount: restored,\n        current: stats.prayer.points,\n        max: stats.prayer.maxPoints,\n      })\n    }\n  }\n\n  /**\n   * Get active prayers\n   */\n  public getActivePrayers(entityId: string): string[] {\n    const entityPrayers = this.activePrayers.get(entityId)\n    return entityPrayers ? Array.from(entityPrayers) : []\n  }\n\n  /**\n   * Check if prayer is active\n   */\n  public isPrayerActive(entityId: string, prayerId: string): boolean {\n    const entityPrayers = this.activePrayers.get(entityId)\n    return entityPrayers ? entityPrayers.has(prayerId) : false\n  }\n\n  /**\n   * Get prayer by ID\n   */\n  public getPrayer(prayerId: string): Prayer | undefined {\n    return this.prayers.get(prayerId)\n  }\n\n  /**\n   * Get all prayers\n   */\n  public getAllPrayers(): Prayer[] {\n    return Array.from(this.prayers.values())\n  }\n\n  /**\n   * Get prayers for level\n   */\n  public getPrayersForLevel(level: number): Prayer[] {\n    return Array.from(this.prayers.values()).filter(p => p.level <= level)\n  }\n\n  /**\n   * Apply prayer effects\n   */\n  private applyPrayerEffects(entity: RPGEntity, prayer: Prayer): void {\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    // Store original stats if not already stored\n    let originalStats = this.originalStats.get(entity.id)\n    if (!originalStats) {\n      originalStats = {\n        attack: { ...stats.attack },\n        strength: { ...stats.strength },\n        defense: { ...stats.defense },\n        ranged: { ...stats.ranged },\n        magic: { ...stats.magic },\n      }\n      this.originalStats.set(entity.id, originalStats)\n    }\n\n    for (const effect of prayer.effects) {\n      switch (effect.type) {\n        case 'stat_boost':\n          if (effect.stat && effect.modifier) {\n            switch (effect.stat) {\n              case 'attack':\n                stats.attack.level = Math.floor(originalStats.attack.level * (1 + effect.modifier / 100))\n                break\n              case 'strength':\n                stats.strength.level = Math.floor(originalStats.strength.level * (1 + effect.modifier / 100))\n                break\n              case 'defense':\n                stats.defense.level = Math.floor(originalStats.defense.level * (1 + effect.modifier / 100))\n                break\n              case 'ranged':\n                stats.ranged.level = Math.floor(originalStats.ranged.level * (1 + effect.modifier / 100))\n                break\n              case 'magic':\n                stats.magic.level = Math.floor(originalStats.magic.level * (1 + effect.modifier / 100))\n                break\n            }\n          }\n          break\n        case 'protection':\n          // Protection is handled by combat system\n          break\n      }\n    }\n  }\n\n  /**\n   * Remove prayer effects\n   */\n  private removePrayerEffects(entity: RPGEntity, prayer: Prayer): void {\n    const stats = entity.getComponent('stats') as any\n    if (!stats) {\n      return\n    }\n\n    const originalStats = this.originalStats.get(entity.id)\n    if (!originalStats) {\n      return\n    }\n\n    // Recalculate stats from base values considering all active prayers\n    const entityPrayers = this.activePrayers.get(entity.id)\n    if (!entityPrayers) {\n      return\n    }\n\n    // Reset to original values\n    stats.attack.level = originalStats.attack.level\n    stats.strength.level = originalStats.strength.level\n    stats.defense.level = originalStats.defense.level\n    stats.ranged.level = originalStats.ranged.level\n    stats.magic.level = originalStats.magic.level\n\n    // Reapply effects from remaining active prayers\n    for (const prayerId of entityPrayers) {\n      if (prayerId === prayer.id) {\n        continue\n      } // Skip the prayer we're removing\n\n      const activePrayer = this.prayers.get(prayerId)\n      if (activePrayer) {\n        for (const effect of activePrayer.effects) {\n          if (effect.type === 'stat_boost' && effect.stat && effect.modifier) {\n            switch (effect.stat) {\n              case 'attack':\n                stats.attack.level = Math.floor(originalStats.attack.level * (1 + effect.modifier / 100))\n                break\n              case 'strength':\n                stats.strength.level = Math.floor(originalStats.strength.level * (1 + effect.modifier / 100))\n                break\n              case 'defense':\n                stats.defense.level = Math.floor(originalStats.defense.level * (1 + effect.modifier / 100))\n                break\n              case 'ranged':\n                stats.ranged.level = Math.floor(originalStats.ranged.level * (1 + effect.modifier / 100))\n                break\n              case 'magic':\n                stats.magic.level = Math.floor(originalStats.magic.level * (1 + effect.modifier / 100))\n                break\n            }\n          }\n        }\n      }\n    }\n\n    // Clean up original stats if no prayers are active\n    if (entityPrayers.size === 0) {\n      this.originalStats.delete(entity.id)\n    }\n  }\n\n  /**\n   * Update protection prayers on combat component\n   */\n  private updateProtectionPrayers(combat: CombatComponent, prayer: Prayer, active: boolean): void {\n    const protectionEffect = prayer.effects.find(e => e.type === 'protection')\n    if (!protectionEffect) {\n      return\n    }\n\n    switch (protectionEffect.stat) {\n      case 'melee':\n        combat.protectionPrayers.melee = active\n        break\n      case 'ranged':\n        combat.protectionPrayers.ranged = active\n        break\n      case 'magic':\n        combat.protectionPrayers.magic = active\n        break\n    }\n  }\n\n  /**\n   * Deactivate conflicting prayers\n   */\n  private deactivateConflictingPrayers(entityId: string, newPrayer: Prayer): void {\n    const entityPrayers = this.activePrayers.get(entityId)\n    if (!entityPrayers) {\n      return\n    }\n\n    // Overhead prayers conflict with each other\n    if (newPrayer.overhead) {\n      for (const prayerId of Array.from(entityPrayers)) {\n        const prayer = this.prayers.get(prayerId)\n        if (prayer && prayer.overhead && prayer.id !== newPrayer.id) {\n          this.deactivatePrayer(entityId, prayerId)\n        }\n      }\n    }\n\n    // Stat boost prayers of the same type conflict\n    for (const effect of newPrayer.effects) {\n      if (effect.type === 'stat_boost' && effect.stat) {\n        for (const prayerId of Array.from(entityPrayers)) {\n          const prayer = this.prayers.get(prayerId)\n          if (prayer && prayer.id !== newPrayer.id) {\n            const hasConflict = prayer.effects.some(e => e.type === 'stat_boost' && e.stat === effect.stat)\n            if (hasConflict) {\n              this.deactivatePrayer(entityId, prayerId)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Send message to entity\n   */\n  private sendMessage(entityId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      targetId: entityId,\n      message,\n    })\n  }\n\n  /**\n   * Calculate prayer drain modifier for PvP\n   */\n  public getPvPProtectionModifier(): number {\n    return 0.4 // 40% damage reduction in PvP\n  }\n\n  /**\n   * Check if entity has protection prayer active\n   */\n  public hasProtectionPrayer(entityId: string, damageType: 'melee' | 'ranged' | 'magic'): boolean {\n    const entityPrayers = this.activePrayers.get(entityId)\n    if (!entityPrayers) {\n      return false\n    }\n\n    for (const prayerId of entityPrayers) {\n      const prayer = this.prayers.get(prayerId)\n      if (prayer) {\n        const hasProtection = prayer.effects.some(e => e.type === 'protection' && e.stat === damageType)\n        if (hasProtection) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  RPGEntity,\n  StatsComponent,\n  // CombatComponent,\n  InventoryComponent,\n  AttackType,\n  HitResult,\n  // ItemStack,\n  Vector3,\n} from '../types/index'\nimport { InventorySystem } from '../systems/InventorySystem'\n\nexport interface Spell {\n  id: string\n  name: string\n  level: number // Magic level required\n  spellbook: 'standard' | 'ancient' | 'lunar'\n  type: 'combat' | 'teleport' | 'enchantment' | 'alchemy' | 'utility'\n  runes: RuneRequirement[]\n  experience: number\n  damage?: {\n    max: number\n    type: 'fire' | 'water' | 'earth' | 'air' | 'standard'\n  }\n  effects?: SpellEffect[]\n  cooldown?: number\n  range?: number\n}\n\nexport interface RuneRequirement {\n  runeId: number\n  quantity: number\n}\n\nexport interface SpellEffect {\n  type: 'freeze' | 'poison' | 'weaken' | 'teleport' | 'heal' | 'buff'\n  duration?: number\n  value?: any\n}\n\nexport interface ActiveSpell {\n  spellId: string\n  targetId?: string\n  castTime: number\n  position?: Vector3\n}\n\nexport class MagicSystem extends System {\n  private spells: Map<string, Spell> = new Map()\n  private activeSpells: Map<string, ActiveSpell> = new Map()\n  private spellCooldowns: Map<string, Map<string, number>> = new Map() // entityId -> spellId -> cooldown end time\n  private poisonEffects: Map<string, any> = new Map()\n  private weakenedStats: Map<string, any> = new Map()\n\n  // Rune IDs\n  private readonly RUNES = {\n    AIR: 556,\n    WATER: 555,\n    EARTH: 557,\n    FIRE: 554,\n    MIND: 558,\n    BODY: 559,\n    COSMIC: 564,\n    CHAOS: 562,\n    NATURE: 561,\n    LAW: 563,\n    DEATH: 560,\n    BLOOD: 565,\n    SOUL: 566,\n    ASTRAL: 9075,\n    // Combination runes\n    DUST: 4696, // Air + Earth\n    MIST: 4695, // Air + Water\n    MUD: 4698, // Water + Earth\n    SMOKE: 4697, // Air + Fire\n    STEAM: 4694, // Water + Fire\n    LAVA: 4699, // Earth + Fire\n  }\n\n  constructor(world: World) {\n    super(world)\n    this.registerDefaultSpells()\n  }\n\n  /**\n   * Register default spells\n   */\n  private registerDefaultSpells(): void {\n    // Standard spellbook - Combat spells\n    this.registerSpell({\n      id: 'wind_strike',\n      name: 'Wind Strike',\n      level: 1,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.AIR, quantity: 1 },\n        { runeId: this.RUNES.MIND, quantity: 1 },\n      ],\n      experience: 5.5,\n      damage: { max: 2, type: 'air' },\n      range: 10,\n    })\n\n    this.registerSpell({\n      id: 'water_strike',\n      name: 'Water Strike',\n      level: 5,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.WATER, quantity: 1 },\n        { runeId: this.RUNES.AIR, quantity: 1 },\n        { runeId: this.RUNES.MIND, quantity: 1 },\n      ],\n      experience: 7.5,\n      damage: { max: 4, type: 'water' },\n      range: 10,\n    })\n\n    this.registerSpell({\n      id: 'earth_strike',\n      name: 'Earth Strike',\n      level: 9,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.EARTH, quantity: 2 },\n        { runeId: this.RUNES.AIR, quantity: 1 },\n        { runeId: this.RUNES.MIND, quantity: 1 },\n      ],\n      experience: 9.5,\n      damage: { max: 6, type: 'earth' },\n      range: 10,\n    })\n\n    this.registerSpell({\n      id: 'fire_strike',\n      name: 'Fire Strike',\n      level: 13,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.FIRE, quantity: 3 },\n        { runeId: this.RUNES.AIR, quantity: 2 },\n        { runeId: this.RUNES.MIND, quantity: 1 },\n      ],\n      experience: 11.5,\n      damage: { max: 8, type: 'fire' },\n      range: 10,\n    })\n\n    // Bolt spells\n    this.registerSpell({\n      id: 'wind_bolt',\n      name: 'Wind Bolt',\n      level: 17,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.AIR, quantity: 2 },\n        { runeId: this.RUNES.CHAOS, quantity: 1 },\n      ],\n      experience: 13.5,\n      damage: { max: 9, type: 'air' },\n      range: 10,\n    })\n\n    this.registerSpell({\n      id: 'fire_bolt',\n      name: 'Fire Bolt',\n      level: 35,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.FIRE, quantity: 4 },\n        { runeId: this.RUNES.AIR, quantity: 3 },\n        { runeId: this.RUNES.CHAOS, quantity: 1 },\n      ],\n      experience: 22.5,\n      damage: { max: 12, type: 'fire' },\n      range: 10,\n    })\n\n    // Blast spells\n    this.registerSpell({\n      id: 'wind_blast',\n      name: 'Wind Blast',\n      level: 41,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.AIR, quantity: 3 },\n        { runeId: this.RUNES.DEATH, quantity: 1 },\n      ],\n      experience: 25.5,\n      damage: { max: 13, type: 'air' },\n      range: 10,\n    })\n\n    this.registerSpell({\n      id: 'fire_blast',\n      name: 'Fire Blast',\n      level: 59,\n      spellbook: 'standard',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.FIRE, quantity: 5 },\n        { runeId: this.RUNES.AIR, quantity: 4 },\n        { runeId: this.RUNES.DEATH, quantity: 1 },\n      ],\n      experience: 34.5,\n      damage: { max: 16, type: 'fire' },\n      range: 10,\n    })\n\n    // Teleport spells\n    this.registerSpell({\n      id: 'varrock_teleport',\n      name: 'Varrock Teleport',\n      level: 25,\n      spellbook: 'standard',\n      type: 'teleport',\n      runes: [\n        { runeId: this.RUNES.FIRE, quantity: 1 },\n        { runeId: this.RUNES.AIR, quantity: 3 },\n        { runeId: this.RUNES.LAW, quantity: 1 },\n      ],\n      experience: 35,\n      effects: [\n        {\n          type: 'teleport',\n          value: { x: 3213, y: 0, z: 3428 }, // Varrock coordinates\n        },\n      ],\n    })\n\n    this.registerSpell({\n      id: 'lumbridge_teleport',\n      name: 'Lumbridge Teleport',\n      level: 31,\n      spellbook: 'standard',\n      type: 'teleport',\n      runes: [\n        { runeId: this.RUNES.EARTH, quantity: 1 },\n        { runeId: this.RUNES.AIR, quantity: 3 },\n        { runeId: this.RUNES.LAW, quantity: 1 },\n      ],\n      experience: 41,\n      effects: [\n        {\n          type: 'teleport',\n          value: { x: 3222, y: 0, z: 3218 }, // Lumbridge coordinates\n        },\n      ],\n    })\n\n    // Alchemy spells\n    this.registerSpell({\n      id: 'low_alchemy',\n      name: 'Low Level Alchemy',\n      level: 21,\n      spellbook: 'standard',\n      type: 'alchemy',\n      runes: [\n        { runeId: this.RUNES.FIRE, quantity: 3 },\n        { runeId: this.RUNES.NATURE, quantity: 1 },\n      ],\n      experience: 31,\n      cooldown: 3000, // 3 seconds\n    })\n\n    this.registerSpell({\n      id: 'high_alchemy',\n      name: 'High Level Alchemy',\n      level: 55,\n      spellbook: 'standard',\n      type: 'alchemy',\n      runes: [\n        { runeId: this.RUNES.FIRE, quantity: 5 },\n        { runeId: this.RUNES.NATURE, quantity: 1 },\n      ],\n      experience: 65,\n      cooldown: 3000, // 3 seconds\n    })\n\n    // Ancient spellbook - Ice spells (multi-target with freeze)\n    this.registerSpell({\n      id: 'ice_rush',\n      name: 'Ice Rush',\n      level: 58,\n      spellbook: 'ancient',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.WATER, quantity: 2 },\n        { runeId: this.RUNES.CHAOS, quantity: 2 },\n        { runeId: this.RUNES.DEATH, quantity: 2 },\n      ],\n      experience: 34,\n      damage: { max: 16, type: 'water' },\n      effects: [\n        {\n          type: 'freeze',\n          duration: 5000, // 5 seconds\n        },\n      ],\n      range: 10,\n    })\n\n    this.registerSpell({\n      id: 'ice_barrage',\n      name: 'Ice Barrage',\n      level: 94,\n      spellbook: 'ancient',\n      type: 'combat',\n      runes: [\n        { runeId: this.RUNES.WATER, quantity: 6 },\n        { runeId: this.RUNES.BLOOD, quantity: 2 },\n        { runeId: this.RUNES.DEATH, quantity: 4 },\n      ],\n      experience: 52,\n      damage: { max: 30, type: 'water' },\n      effects: [\n        {\n          type: 'freeze',\n          duration: 20000, // 20 seconds\n        },\n      ],\n      range: 10,\n    })\n  }\n\n  /**\n   * Register a spell\n   */\n  public registerSpell(spell: Spell): void {\n    this.spells.set(spell.id, spell)\n  }\n\n  /**\n   * Cast a spell\n   */\n  public castSpell(casterId: string, spellId: string, targetId?: string, position?: Vector3): boolean {\n    const caster = this.world.entities.get(casterId)\n    if (!caster) {\n      return false\n    }\n\n    const stats = caster.getComponent('stats') as any\n    if (!stats) {\n      return false\n    }\n\n    const spell = this.spells.get(spellId)\n    if (!spell) {\n      return false\n    }\n\n    // Check magic level\n    if (stats.magic.level < spell.level) {\n      this.sendMessage(casterId, `You need level ${spell.level} Magic to cast ${spell.name}.`)\n      return false\n    }\n\n    // Check cooldown\n    if (this.isSpellOnCooldown(casterId, spellId)) {\n      this.sendMessage(casterId, 'That spell is still on cooldown.')\n      return false\n    }\n\n    // Check runes\n    if (!this.hasRunes(casterId, spell.runes)) {\n      this.sendMessage(casterId, \"You don't have the required runes to cast this spell.\")\n      return false\n    }\n\n    // Check target for combat spells\n    if (spell.type === 'combat' && !targetId) {\n      this.sendMessage(casterId, 'You need a target to cast this spell.')\n      return false\n    }\n\n    // Consume runes\n    this.consumeRunes(casterId, spell.runes)\n\n    // Create active spell\n    const activeSpell: ActiveSpell = {\n      spellId,\n      targetId,\n      castTime: Date.now(),\n      position,\n    }\n    this.activeSpells.set(casterId, activeSpell)\n\n    // Apply spell cooldown\n    if (spell.cooldown) {\n      this.setSpellCooldown(casterId, spellId, spell.cooldown)\n    }\n\n    // Execute spell effect\n    switch (spell.type) {\n      case 'combat':\n        this.executeCombatSpell(caster as any, spell, targetId!)\n        break\n      case 'teleport':\n        this.executeTeleportSpell(caster as any, spell)\n        break\n      case 'alchemy':\n        this.executeAlchemySpell(caster as any, spell)\n        break\n      default:\n        // Other spell types\n        break\n    }\n\n    // Grant experience\n    this.grantMagicExperience(casterId, spell.experience)\n\n    // Emit event\n    this.world.events.emit('spell:cast', {\n      casterId,\n      spellId,\n      targetId,\n      position,\n    })\n\n    return true\n  }\n\n  /**\n   * Execute combat spell\n   */\n  private executeCombatSpell(caster: RPGEntity, spell: Spell, targetId: string): void {\n    const target = this.world.entities.get(targetId)\n    if (!target) {\n      return\n    }\n\n    // Check range\n    const distance = this.getDistance(caster as any, target as any)\n    if (spell.range && distance > spell.range) {\n      this.sendMessage(caster.id, 'Your target is too far away.')\n      return\n    }\n\n    // Calculate damage\n    const casterStats = caster.getComponent('stats') as any\n    if (!casterStats || !spell.damage) {\n      return\n    }\n\n    // Base damage + magic level bonus\n    const magicLevel = casterStats.magic.level\n    const _magicBonus = casterStats.combatBonuses.attackMagic\n    const damage = Math.floor(Math.random() * (spell.damage.max + 1)) + Math.floor(magicLevel / 10)\n\n    // Create hit result\n    const hit: HitResult = {\n      damage,\n      type: 'normal',\n      attackType: AttackType.MAGIC,\n      attackerId: caster.id,\n      targetId,\n      timestamp: Date.now(),\n    }\n\n    // Apply damage through combat system\n    const combatSystem = this.world.getSystem<any>('combat')\n    if (combatSystem) {\n      combatSystem.applyDamage(target, hit)\n    }\n\n    // Apply spell effects\n    if (spell.effects) {\n      for (const effect of spell.effects) {\n        this.applySpellEffect(target as any, effect)\n      }\n    }\n  }\n\n  /**\n   * Execute teleport spell\n   */\n  private executeTeleportSpell(caster: RPGEntity, spell: Spell): void {\n    const teleportEffect = spell.effects?.find(e => e.type === 'teleport')\n    if (!teleportEffect || !teleportEffect.value) {\n      return\n    }\n\n    // Teleport player\n    const position = teleportEffect.value as Vector3\n\n    this.world.events.emit('player:teleport', {\n      playerId: caster.id,\n      position,\n      spellId: spell.id,\n    })\n\n    this.sendMessage(caster.id, `You teleport to ${spell.name.replace(' Teleport', '')}.`)\n  }\n\n  /**\n   * Execute alchemy spell\n   */\n  private executeAlchemySpell(caster: RPGEntity, spell: Spell): void {\n    const inventory = caster.getComponent('inventory') as any\n    if (!inventory) {\n      return\n    }\n\n    // Find the next non-empty item slot\n    let targetSlot = -1\n    for (let i = 0; i < inventory.items.length; i++) {\n      if (inventory.items[i] !== null) {\n        targetSlot = i\n        break\n      }\n    }\n\n    if (targetSlot === -1) {\n      this.sendMessage(caster.id, \"You don't have any items to alchemize.\")\n      return\n    }\n\n    const item = inventory.items[targetSlot]\n    if (!item) {\n      return\n    }\n\n    // Get item value from inventory system\n    const inventorySystem =\n      this.world.getSystemByType(InventorySystem) || this.world.getSystem<InventorySystem>('inventory')\n    if (!inventorySystem) {\n      return\n    }\n\n    const itemDef = (inventorySystem as any).itemRegistry?.getItem(item.itemId)\n    if (!itemDef) {\n      this.sendMessage(caster.id, 'That item cannot be alchemized.')\n      return\n    }\n\n    // Check if item can be alchemized\n    if (!itemDef.tradeable) {\n      this.sendMessage(caster.id, 'That item cannot be alchemized.')\n      return\n    }\n\n    // Calculate gold amount based on spell type\n    let goldAmount = 0\n    if (spell.id === 'high_alchemy') {\n      goldAmount = Math.floor(itemDef.value * 0.6) // 60% of item value for high alch\n    } else if (spell.id === 'low_alchemy') {\n      goldAmount = Math.floor(itemDef.value * 0.4) // 40% of item value for low alch\n    }\n\n    // Remove the item\n    inventory.items[targetSlot] = null\n\n    // Add gold (coin item ID is 995)\n    ;(inventorySystem as any).addItem(caster.id, 995, goldAmount)\n\n    // Send message\n    this.sendMessage(caster.id, `You cast ${spell.name} and receive ${goldAmount} coins.`)\n\n    // Emit alchemy event\n    this.world.events.emit('spell:alchemy', {\n      casterId: caster.id,\n      spellId: spell.id,\n      itemId: item.itemId,\n      goldReceived: goldAmount,\n    })\n  }\n\n  /**\n   * Apply spell effect to target\n   */\n  private applySpellEffect(target: RPGEntity, effect: SpellEffect): void {\n    switch (effect.type) {\n      case 'freeze':\n        // Apply movement freeze\n        this.world.events.emit('effect:freeze', {\n          targetId: target.id,\n          duration: effect.duration || 5000,\n        })\n        break\n      case 'poison':\n        // Apply poison damage over time\n        const stats = target.getComponent('stats') as any\n        if (!stats) {\n          return\n        }\n\n        // Create poison effect\n        const poisonData = {\n          targetId: target.id,\n          damage: effect.value?.damage || 2, // Default 2 damage per tick\n          duration: effect.duration || 30000, // Default 30 seconds\n          tickRate: effect.value?.tickRate || 3000, // Default damage every 3 seconds\n          startTime: Date.now(),\n        }\n\n        // Store poison effect\n        this.poisonEffects.set(target.id, poisonData)\n\n        // Emit poison event\n        this.world.events.emit('effect:poison', poisonData)\n\n        this.sendMessage(target.id, 'You have been poisoned!')\n        break\n      case 'weaken':\n        // Reduce target stats temporarily\n        const targetStats = target.getComponent('stats') as any\n        if (!targetStats) {\n          return\n        }\n\n        // Store original stats if not already stored\n        if (!this.weakenedStats.has(target.id)) {\n          this.weakenedStats.set(target.id, {\n            attack: targetStats.attack.level,\n            strength: targetStats.strength.level,\n            defense: targetStats.defense.level,\n          })\n        }\n\n        // Apply stat reduction (default 10%)\n        const reduction = effect.value?.reduction || 0.1\n        targetStats.attack.level = Math.floor(targetStats.attack.level * (1 - reduction))\n        targetStats.strength.level = Math.floor(targetStats.strength.level * (1 - reduction))\n        targetStats.defense.level = Math.floor(targetStats.defense.level * (1 - reduction))\n\n        // Schedule stat restoration\n        setTimeout(() => {\n          const originalStats = this.weakenedStats.get(target.id)\n          if (originalStats && targetStats) {\n            targetStats.attack.level = originalStats.attack\n            targetStats.strength.level = originalStats.strength\n            targetStats.defense.level = originalStats.defense\n            this.weakenedStats.delete(target.id)\n          }\n        }, effect.duration || 60000) // Default 60 seconds\n\n        this.sendMessage(target.id, 'You feel weakened!')\n        break\n    }\n  }\n\n  /**\n   * Check if player has required runes\n   */\n  private hasRunes(entityId: string, requirements: RuneRequirement[]): boolean {\n    const entity = this.world.entities.get(entityId)\n    if (!entity) {\n      return false\n    }\n\n    const inventory = entity.getComponent('inventory') as any\n    if (!inventory) {\n      return false\n    }\n\n    // Check combination runes\n    const runeAmounts = this.calculateRuneAmounts(inventory)\n\n    for (const req of requirements) {\n      if ((runeAmounts.get(req.runeId) || 0) < req.quantity) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Calculate rune amounts including combination runes\n   */\n  private calculateRuneAmounts(inventory: InventoryComponent): Map<number, number> {\n    const amounts = new Map<number, number>()\n\n    for (const item of inventory.items) {\n      if (!item) {\n        continue\n      }\n\n      // Add basic rune amounts\n      const current = amounts.get(item.itemId) || 0\n      amounts.set(item.itemId, current + item.quantity)\n\n      // Add combination rune equivalents\n      switch (item.itemId) {\n        case this.RUNES.DUST:\n          amounts.set(this.RUNES.AIR, (amounts.get(this.RUNES.AIR) || 0) + item.quantity)\n          amounts.set(this.RUNES.EARTH, (amounts.get(this.RUNES.EARTH) || 0) + item.quantity)\n          break\n        case this.RUNES.MIST:\n          amounts.set(this.RUNES.AIR, (amounts.get(this.RUNES.AIR) || 0) + item.quantity)\n          amounts.set(this.RUNES.WATER, (amounts.get(this.RUNES.WATER) || 0) + item.quantity)\n          break\n        // Add other combination runes...\n      }\n    }\n\n    return amounts\n  }\n\n  /**\n   * Consume runes for spell\n   */\n  private consumeRunes(entityId: string, requirements: RuneRequirement[]): void {\n    const inventorySystem = this.world.getSystem<any>('inventory')\n    if (!inventorySystem) {\n      return\n    }\n\n    // Remove required runes (prioritize basic runes over combination)\n    for (const req of requirements) {\n      inventorySystem.removeItem(entityId, req.runeId, req.quantity)\n    }\n  }\n\n  /**\n   * Grant magic experience\n   */\n  private grantMagicExperience(entityId: string, experience: number): void {\n    const skillsSystem = this.world.getSystem<any>('skills')\n    if (skillsSystem) {\n      skillsSystem.grantXP(entityId, 'magic', experience)\n    }\n  }\n\n  /**\n   * Check if spell is on cooldown\n   */\n  private isSpellOnCooldown(entityId: string, spellId: string): boolean {\n    const cooldowns = this.spellCooldowns.get(entityId)\n    if (!cooldowns) {\n      return false\n    }\n\n    const cooldownEnd = cooldowns.get(spellId)\n    if (!cooldownEnd) {\n      return false\n    }\n\n    return Date.now() < cooldownEnd\n  }\n\n  /**\n   * Set spell cooldown\n   */\n  private setSpellCooldown(entityId: string, spellId: string, duration: number): void {\n    let cooldowns = this.spellCooldowns.get(entityId)\n    if (!cooldowns) {\n      cooldowns = new Map()\n      this.spellCooldowns.set(entityId, cooldowns)\n    }\n    cooldowns.set(spellId, Date.now() + duration)\n  }\n\n  /**\n   * Helper methods\n   */\n  private getDistance(entity1: RPGEntity, entity2: RPGEntity): number {\n    const pos1 = entity1.position\n    const pos2 = entity2.position\n\n    const dx = pos1.x - pos2.x\n    const dz = pos1.z - pos2.z\n\n    return Math.sqrt(dx * dx + dz * dz)\n  }\n\n  private sendMessage(entityId: string, message: string): void {\n    this.world.events.emit('chat:system', {\n      targetId: entityId,\n      message,\n    })\n  }\n\n  /**\n   * Get spell by ID\n   */\n  public getSpell(spellId: string): Spell | undefined {\n    return this.spells.get(spellId)\n  }\n\n  /**\n   * Get all spells for level\n   */\n  public getSpellsForLevel(level: number, spellbook: string = 'standard'): Spell[] {\n    return Array.from(this.spells.values()).filter(s => s.level <= level && s.spellbook === spellbook)\n  }\n\n  /**\n   * Get active spell for entity\n   */\n  public getActiveSpell(entityId: string): ActiveSpell | undefined {\n    return this.activeSpells.get(entityId)\n  }\n\n  /**\n   * Update spell cooldowns\n   */\n  public update(_delta: number): void {\n    // Clean up expired cooldowns\n    const now = Date.now()\n    for (const [_entityId, cooldowns] of this.spellCooldowns) {\n      for (const [spellId, cooldownEnd] of cooldowns) {\n        if (now >= cooldownEnd) {\n          cooldowns.delete(spellId)\n        }\n      }\n    }\n\n    // Process poison effects\n    for (const [entityId, poisonData] of this.poisonEffects) {\n      const entity = this.world.entities.get(entityId)\n      if (!entity) {\n        this.poisonEffects.delete(entityId)\n        continue\n      }\n\n      const stats = entity.getComponent('stats') as any\n      if (!stats) {\n        continue\n      }\n\n      // Check if poison has expired\n      if (now >= poisonData.startTime + poisonData.duration) {\n        this.poisonEffects.delete(entityId)\n        this.sendMessage(entityId, 'The poison has worn off.')\n        continue\n      }\n\n      // Apply poison damage at tick rate\n      const lastTick = poisonData.lastTick || poisonData.startTime\n      if (now >= lastTick + poisonData.tickRate) {\n        poisonData.lastTick = now\n\n        // Apply damage\n        stats.hitpoints.current = Math.max(0, stats.hitpoints.current - poisonData.damage)\n\n        // Create poison hit splat\n        this.world.events.emit('combat:damage', {\n          targetId: entityId,\n          damage: poisonData.damage,\n          type: 'poison',\n          timestamp: now,\n        })\n\n        // Check if entity died from poison\n        if (stats.hitpoints.current <= 0) {\n          this.poisonEffects.delete(entityId)\n          this.world.events.emit('entity:death', {\n            entityId,\n            cause: 'poison',\n          })\n        }\n      }\n    }\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport {\n  Minigame,\n  MinigameType,\n  MinigameStatus,\n  MinigameSession,\n  MinigamePlayer,\n  MinigameStats,\n  MinigameRewards,\n  GameRequirements,\n  MinigameComponent,\n  Team,\n  PlayerEntity,\n  Vector3,\n} from '../types'\n\nexport class MinigameSystem extends System {\n  protected sessions: Map<string, MinigameSession> = new Map()\n  protected playerSessions: Map<string, string> = new Map() // playerId -> sessionId\n  protected queuedPlayers: Map<MinigameType, Set<string>> = new Map()\n  protected minigameDefinitions: Map<MinigameType, Minigame> = new Map()\n\n  // Configuration\n  protected readonly MAX_QUEUE_TIME = 300000 // 5 minutes\n  protected readonly MIN_PLAYERS_TO_START = 2\n\n  constructor(world: World) {\n    super(world)\n    this.initializeMinigames()\n  }\n\n  /**\n   * Initialize minigame definitions\n   */\n  protected initializeMinigames(): void {\n    // Basic minigame implementations\n    this.minigameDefinitions.set(MinigameType.CASTLE_WARS, {\n      id: 'castle_wars',\n      name: 'Castle Wars',\n      type: MinigameType.CASTLE_WARS,\n      minPlayers: 2,\n      maxPlayers: 50,\n      duration: 1200000, // 20 minutes\n      requirements: {\n        combatLevel: 10,\n      },\n      rewards: {\n        points: 100,\n        experience: { attack: 500, strength: 500, defence: 500 },\n      },\n      status: MinigameStatus.WAITING,\n    })\n\n    this.minigameDefinitions.set(MinigameType.FIGHT_CAVES, {\n      id: 'fight_caves',\n      name: 'Fight Caves',\n      type: MinigameType.FIGHT_CAVES,\n      minPlayers: 1,\n      maxPlayers: 1,\n      duration: 3600000, // 1 hour\n      requirements: {\n        combatLevel: 40,\n      },\n      rewards: {\n        points: 1000,\n        items: [{ itemId: 6570, quantity: 1, chance: 1.0 }], // Fire cape\n      },\n      status: MinigameStatus.WAITING,\n    })\n\n    console.log('[MinigameSystem] Initialized with basic minigames')\n  }\n\n  /**\n   * Join minigame queue\n   */\n  joinQueue(playerId: string, minigameType: MinigameType): boolean {\n    // Check if already in a minigame\n    if (this.playerSessions.has(playerId)) {\n      this.emit('minigame:error', {\n        playerId,\n        error: 'You are already in a minigame',\n      })\n      return false\n    }\n\n    // Check if already in queue\n    for (const [type, queue] of this.queuedPlayers) {\n      if (queue.has(playerId)) {\n        if (type === minigameType) {\n          this.emit('minigame:error', {\n            playerId,\n            error: 'You are already in this queue',\n          })\n          return false\n        } else {\n          queue.delete(playerId)\n        }\n      }\n    }\n\n    const minigame = this.minigameDefinitions.get(minigameType)\n    if (!minigame) {\n      return false\n    }\n\n    // Check requirements\n    if (!this.checkRequirements(playerId, minigame.requirements)) {\n      return false\n    }\n\n    // Add to queue\n    let queue = this.queuedPlayers.get(minigameType)\n    if (!queue) {\n      queue = new Set()\n      this.queuedPlayers.set(minigameType, queue)\n    }\n    queue.add(playerId)\n\n    // Update player component\n    const player = this.world.entities.get(playerId)\n    if (player) {\n      const component = this.getOrCreateMinigameComponent(player as PlayerEntity)\n      component.currentMinigame = minigameType\n    }\n\n    // Check if we can start\n    if (queue.size >= minigame.minPlayers) {\n      this.tryStartMinigame(minigameType)\n    }\n\n    // Emit event\n    this.emit('minigame:joined-queue', {\n      playerId,\n      minigameType,\n      queueSize: queue.size,\n      minPlayers: minigame.minPlayers,\n    })\n\n    return true\n  }\n\n  /**\n   * Leave minigame queue\n   */\n  leaveQueue(playerId: string): boolean {\n    for (const [type, queue] of this.queuedPlayers) {\n      if (queue.has(playerId)) {\n        queue.delete(playerId)\n\n        // Update player component\n        const player = this.world.entities.get(playerId)\n        if (player) {\n          const component = player.getComponent('minigame') as any\n          if (component) {\n            component.currentMinigame = null\n          }\n        }\n\n        // Emit event\n        this.emit('minigame:left-queue', {\n          playerId,\n          minigameType: type,\n        })\n\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Leave active minigame\n   */\n  leaveMinigame(playerId: string): boolean {\n    const sessionId = this.playerSessions.get(playerId)\n    if (!sessionId) {\n      return false\n    }\n\n    const session = this.sessions.get(sessionId)\n    if (!session || session.status === 'completed') {\n      return false\n    }\n\n    // Remove player\n    session.players = session.players.filter(id => id !== playerId)\n    this.playerSessions.delete(playerId)\n\n    // Remove from team if applicable\n    if (session.teams) {\n      for (const team of session.teams.values()) {\n        team.players.delete(playerId)\n      }\n    }\n\n    // Update player component\n    const player = this.world.entities.get(playerId)\n    if (player) {\n      const component = player.getComponent('minigame') as any\n      if (component) {\n        component.currentMinigame = null\n        component.sessionId = null\n        component.team = null\n      }\n    }\n\n    // Teleport out\n    this.teleportToLobby(playerId)\n\n    // Check if minigame should end\n    const minigame = this.minigameDefinitions.get(session.type)\n    if (minigame && session.players.length < minigame.minPlayers) {\n      this.endMinigame(sessionId, 'insufficient_players')\n    }\n\n    // Emit event\n    this.emit('minigame:player-left', {\n      playerId,\n      sessionId,\n      minigameType: session.type,\n    })\n\n    return true\n  }\n\n  /**\n   * Try to start a minigame\n   */\n  protected tryStartMinigame(minigameType: MinigameType): boolean {\n    const queue = this.queuedPlayers.get(minigameType)\n    if (!queue) {\n      return false\n    }\n\n    const minigame = this.minigameDefinitions.get(minigameType)\n    if (!minigame) {\n      return false\n    }\n\n    if (queue.size < minigame.minPlayers) {\n      return false\n    }\n\n    // Take players from queue\n    const players: string[] = []\n    const maxToTake = Math.min(queue.size, minigame.maxPlayers)\n    let count = 0\n\n    for (const playerId of queue) {\n      if (count >= maxToTake) {\n        break\n      }\n      players.push(playerId)\n      count++\n    }\n\n    // Remove from queue\n    for (const playerId of players) {\n      queue.delete(playerId)\n    }\n\n    // Create session\n    const sessionId = this.createSession(minigameType, players)\n\n    return sessionId !== null\n  }\n\n  /**\n   * Create minigame session\n   */\n  protected createSession(minigameType: MinigameType, playerIds: string[]): string | null {\n    const minigame = this.minigameDefinitions.get(minigameType)\n    if (!minigame) {\n      return null\n    }\n\n    const sessionId = this.generateSessionId()\n    const session: MinigameSession = {\n      id: sessionId,\n      type: minigameType,\n      players: playerIds,\n      teams: this.createTeams(minigameType, playerIds),\n      startTime: Date.now(),\n      status: 'waiting',\n      data: this.createMinigameData(minigameType),\n    }\n\n    // Store session\n    this.sessions.set(sessionId, session)\n\n    // Map players to session\n    for (const playerId of playerIds) {\n      this.playerSessions.set(playerId, sessionId)\n\n      // Update player component\n      const player = this.world.entities.get(playerId)\n      if (player) {\n        const component = player.getComponent('minigame') as any\n        if (component) {\n          component.sessionId = sessionId\n          if (session.teams) {\n            // Assign team\n            for (const [teamName, team] of session.teams) {\n              if (team.players.has(playerId)) {\n                component.team = teamName\n                break\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Start preparation phase\n    setTimeout(() => {\n      this.startMinigame(sessionId)\n    }, 30000) // 30 second preparation\n\n    // Emit event\n    this.emit('minigame:session-created', {\n      sessionId,\n      minigameType,\n      players: playerIds,\n      startTime: session.startTime + 30000,\n    })\n\n    // Teleport players to minigame\n    for (const playerId of playerIds) {\n      this.teleportToMinigame(playerId, minigameType, session)\n    }\n\n    return sessionId\n  }\n\n  /**\n   * Start minigame\n   */\n  protected startMinigame(sessionId: string): void {\n    const session = this.sessions.get(sessionId)\n    if (!session || session.status !== 'waiting') {\n      return\n    }\n\n    session.status = 'in_progress'\n\n    // Initialize minigame-specific logic\n    this.initializeGameplay(session)\n\n    // Emit event\n    this.emit('minigame:started', {\n      sessionId,\n      minigameType: session.type,\n      players: session.players,\n    })\n  }\n\n  /**\n   * End minigame\n   */\n  protected endMinigame(sessionId: string, reason?: string): void {\n    const session = this.sessions.get(sessionId)\n    if (!session || session.status === 'completed') {\n      return\n    }\n\n    session.status = 'completed'\n    session.endTime = Date.now()\n\n    // Calculate results\n    const results = this.calculateResults(session)\n\n    // Grant rewards\n    for (const playerId of session.players) {\n      const player = this.world.entities.get(playerId)\n      if (!player) {\n        continue\n      }\n\n      const playerResults = results.get(playerId)\n      if (playerResults) {\n        this.grantRewards(playerId, session.type, playerResults)\n        this.updateStats(playerId, session.type, playerResults)\n      }\n\n      // Clean up\n      this.playerSessions.delete(playerId)\n      const component = player.getComponent('minigame') as any\n      if (component) {\n        component.currentMinigame = null\n        component.sessionId = null\n        component.team = null\n      }\n\n      // Teleport out\n      this.teleportToLobby(playerId)\n    }\n\n    // Clean up session after delay\n    setTimeout(() => {\n      this.sessions.delete(sessionId)\n    }, 60000) // Keep for 1 minute for results viewing\n\n    // Emit event\n    this.emit('minigame:ended', {\n      sessionId,\n      minigameType: session.type,\n      reason,\n      results: Array.from(results.entries()),\n    })\n  }\n\n  /**\n   * Update player score\n   */\n  updatePlayerScore(sessionId: string, playerId: string, points: number): void {\n    const session = this.sessions.get(sessionId)\n    if (!session || session.status !== 'in_progress') {\n      return\n    }\n\n    const minigamePlayer = this.getMinigamePlayer(session, playerId)\n    if (minigamePlayer) {\n      minigamePlayer.score += points\n\n      // Update team score if applicable\n      if (session.teams && minigamePlayer.teamId) {\n        const team = session.teams.get(minigamePlayer.teamId)\n        if (team) {\n          team.score += points\n        }\n      }\n\n      // Emit event\n      this.emit('minigame:score-updated', {\n        sessionId,\n        playerId,\n        score: minigamePlayer.score,\n        teamId: minigamePlayer.teamId,\n        teamScore: session.teams?.get(minigamePlayer.teamId || '')?.score,\n      })\n    }\n  }\n\n  /**\n   * Check if player meets requirements\n   */\n  protected checkRequirements(playerId: string, requirements?: GameRequirements): boolean {\n    if (!requirements) {\n      return true\n    }\n\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    // Check combat level\n    if (requirements.combatLevel) {\n      const stats = player.getComponent('stats') as any as any\n      if (!stats || stats.combatLevel < requirements.combatLevel) {\n        this.emit('minigame:error', {\n          playerId,\n          error: `You need combat level ${requirements.combatLevel}`,\n        })\n        return false\n      }\n    }\n\n    // Check skills\n    if (requirements.skills) {\n      const stats = player.getComponent('stats') as any\n      if (!stats) {\n        return false\n      }\n\n      for (const [skill, level] of Object.entries(requirements.skills)) {\n        const skillData = (stats as any)[skill]\n        if (!skillData || skillData.level < level) {\n          this.emit('minigame:error', {\n            playerId,\n            error: `You need level ${level} ${skill}`,\n          })\n          return false\n        }\n      }\n    }\n\n    // Check quests\n    if (requirements.quests) {\n      const questLog = player.getComponent('questLog')\n      if (!questLog) {\n        return false\n      }\n\n      for (const questId of requirements.quests) {\n        const quest = (questLog as any).getQuest?.(questId)\n        if (!quest || quest.status !== 'completed') {\n          this.emit('minigame:error', {\n            playerId,\n            error: 'You must complete required quests first',\n          })\n          return false\n        }\n      }\n    }\n\n    // Check items\n    if (requirements.items) {\n      const inventory = player.getComponent('inventory') as any\n      if (!inventory) {\n        return false\n      }\n\n      for (const itemId of requirements.items) {\n        if (!(inventory as any).hasItem?.(itemId)) {\n          this.emit('minigame:error', {\n            playerId,\n            error: 'You need the required items',\n          })\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Grant rewards to player\n   */\n  protected grantRewards(playerId: string, minigameType: MinigameType, results: any): void {\n    const minigame = this.minigameDefinitions.get(minigameType)\n    if (!minigame) {\n      return\n    }\n\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return\n    }\n\n    const rewards = this.calculateRewards(minigame.rewards, results)\n\n    // Grant points\n    if (rewards.points > 0) {\n      const component = player.getComponent('minigame') as any\n      if (component) {\n        const currentPoints = component.points.get(minigameType) || 0\n        component.points.set(minigameType, currentPoints + rewards.points)\n      }\n    }\n\n    // Grant experience\n    if (rewards.experience) {\n      for (const [skill, xp] of Object.entries(rewards.experience)) {\n        this.emit('skill:grant-xp', {\n          playerId,\n          skill,\n          amount: xp,\n        })\n      }\n    }\n\n    // Grant items\n    if (rewards.items) {\n      const inventory = player.getComponent('inventory') as any\n      if (inventory) {\n        for (const item of rewards.items) {\n          if (Math.random() < item.chance) {\n            ;(inventory as any).addItem?.({\n              id: item.itemId,\n              quantity: item.quantity,\n            })\n          }\n        }\n      }\n    }\n\n    // Grant currency\n    if (rewards.currency) {\n      for (const [type, amount] of Object.entries(rewards.currency)) {\n        this.emit('currency:grant', {\n          playerId,\n          type,\n          amount,\n        })\n      }\n    }\n\n    // Emit event\n    this.emit('minigame:rewards-granted', {\n      playerId,\n      minigameType,\n      rewards,\n    })\n  }\n\n  /**\n   * Update player statistics\n   */\n  protected updateStats(playerId: string, minigameType: MinigameType, results: any): void {\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return\n    }\n\n    const component = player.getComponent('minigame') as any\n    if (!component) {\n      return\n    }\n\n    let stats = component.stats.get(minigameType)\n    if (!stats) {\n      stats = {\n        gamesPlayed: 0,\n        wins: 0,\n        losses: 0,\n        bestScore: 0,\n        totalScore: 0,\n        achievements: [],\n        personalBest: {},\n      }\n      component.stats.set(minigameType, stats)\n    }\n\n    // Update stats\n    stats.gamesPlayed++\n    if (results.won) {\n      stats.wins++\n    } else {\n      stats.losses++\n    }\n    stats.totalScore += results.score || 0\n    if (results.score > stats.bestScore) {\n      stats.bestScore = results.score\n    }\n\n    // Check achievements\n    const newAchievements = this.checkAchievements(minigameType, stats, results)\n    for (const achievement of newAchievements) {\n      if (!stats.achievements.includes(achievement)) {\n        stats.achievements.push(achievement)\n        this.emit('minigame:achievement-unlocked', {\n          playerId,\n          minigameType,\n          achievement,\n        })\n      }\n    }\n  }\n\n  /**\n   * Get or create minigame component\n   */\n  protected getOrCreateMinigameComponent(player: PlayerEntity): MinigameComponent {\n    let component = player.getComponent('minigame') as MinigameComponent | null\n    if (!component) {\n      const newComponent: MinigameComponent = {\n        type: 'minigame',\n        entity: player,\n        data: {},\n        currentMinigame: null,\n        sessionId: null,\n        team: null,\n        stats: new Map(),\n        points: new Map(),\n        unlockedRewards: [],\n      }\n      player.addComponent('minigame', newComponent)\n      component = newComponent\n    }\n    return component\n  }\n\n  /**\n   * Basic implementations for minigame methods\n   */\n  protected createTeams(minigameType: MinigameType, playerIds: string[]): Map<string, Team> | undefined {\n    if (minigameType === MinigameType.CASTLE_WARS) {\n      const teams = new Map<string, Team>()\n\n      // Create two teams for Castle Wars\n      teams.set('red', {\n        id: 'red',\n        name: 'Red Team',\n        players: new Set(),\n        score: 0,\n        color: '#ff0000',\n      })\n\n      teams.set('blue', {\n        id: 'blue',\n        name: 'Blue Team',\n        players: new Set(),\n        score: 0,\n        color: '#0000ff',\n      })\n\n      // Assign players to teams\n      for (let i = 0; i < playerIds.length; i++) {\n        const teamName = i % 2 === 0 ? 'red' : 'blue'\n        teams.get(teamName)?.players.add(playerIds[i])\n      }\n\n      return teams\n    }\n\n    return undefined // Single player minigames don't need teams\n  }\n\n  protected createMinigameData(minigameType: MinigameType): any {\n    switch (minigameType) {\n      case MinigameType.CASTLE_WARS:\n        return {\n          flags: { red: null, blue: null },\n          captures: { red: 0, blue: 0 },\n          respawnTimes: new Map<string, number>(),\n        }\n\n      case MinigameType.FIGHT_CAVES:\n        return {\n          wave: 1,\n          currentEnemies: [],\n          playerPosition: { x: 0, y: 0, z: 0 },\n        }\n\n      default:\n        return {}\n    }\n  }\n\n  protected initializeGameplay(session: MinigameSession): void {\n    // Basic initialization - override for specific minigames\n    console.log(`[MinigameSystem] Initializing gameplay for ${session.type}`)\n\n    if (session.type === MinigameType.CASTLE_WARS) {\n      // Initialize castle wars specific gameplay\n      this.emit('minigame:message', {\n        sessionId: session.id,\n        message: 'Castle Wars has begun! Capture the enemy flag!',\n      })\n    } else if (session.type === MinigameType.FIGHT_CAVES) {\n      // Initialize fight caves\n      this.emit('minigame:message', {\n        sessionId: session.id,\n        message: 'Fight Caves: Survive 63 waves to earn your Fire Cape!',\n      })\n    }\n  }\n\n  protected calculateResults(session: MinigameSession): Map<string, any> {\n    const results = new Map<string, any>()\n\n    for (const playerId of session.players) {\n      const baseResult = {\n        playerId,\n        score: 100, // Base score\n        won: false,\n        participated: true,\n        duration: Date.now() - session.startTime,\n      }\n\n      if (session.teams) {\n        // Team-based results\n        for (const [_teamName, team] of session.teams) {\n          if (team.players.has(playerId)) {\n            baseResult.won = team.score > 0 // Simple win condition\n            baseResult.score += team.score * 10\n            break\n          }\n        }\n      } else {\n        // Individual results - simple completion bonus\n        baseResult.won = true\n        baseResult.score += 50\n      }\n\n      results.set(playerId, baseResult)\n    }\n\n    return results\n  }\n\n  protected calculateRewards(baseRewards: MinigameRewards, results: any): MinigameRewards {\n    const rewards: MinigameRewards = {\n      points: baseRewards.points || 0,\n      experience: { ...baseRewards.experience },\n      items: baseRewards.items ? [...baseRewards.items] : undefined,\n      currency: baseRewards.currency ? { ...baseRewards.currency } : undefined,\n    }\n\n    // Apply multipliers based on performance\n    if (results.won) {\n      rewards.points = Math.floor(rewards.points * 1.5)\n\n      if (rewards.experience) {\n        for (const [skill, xp] of Object.entries(rewards.experience)) {\n          rewards.experience[skill] = Math.floor(xp * 1.2)\n        }\n      }\n    }\n\n    // Participation reward\n    if (results.participated) {\n      rewards.points = Math.max(rewards.points, 25)\n    }\n\n    return rewards\n  }\n\n  protected checkAchievements(minigameType: MinigameType, stats: MinigameStats, results: any): string[] {\n    const achievements: string[] = []\n\n    // First game achievement\n    if (stats.gamesPlayed === 1) {\n      achievements.push(`${minigameType}_first_game`)\n    }\n\n    // Win achievements\n    if (results.won) {\n      if (stats.wins === 1) {\n        achievements.push(`${minigameType}_first_win`)\n      } else if (stats.wins === 10) {\n        achievements.push(`${minigameType}_veteran`)\n      } else if (stats.wins === 100) {\n        achievements.push(`${minigameType}_master`)\n      }\n    }\n\n    // Score achievements\n    if (results.score >= 1000) {\n      achievements.push(`${minigameType}_high_score`)\n    }\n\n    return achievements\n  }\n\n  protected teleportToMinigame(playerId: string, minigameType: MinigameType, _session: MinigameSession): void {\n    // Basic teleport - in a real implementation this would move the player\n    this.emit('player:teleport', {\n      playerId,\n      destination: this.getMinigameLocation(minigameType),\n      reason: 'minigame_start',\n    })\n\n    console.log(`[MinigameSystem] Teleported player ${playerId} to ${minigameType}`)\n  }\n\n  protected teleportToLobby(playerId: string): void {\n    // Teleport back to main game area\n    this.emit('player:teleport', {\n      playerId,\n      destination: { x: 0, y: 0, z: 0 }, // Lobby position\n      reason: 'minigame_end',\n    })\n\n    console.log(`[MinigameSystem] Teleported player ${playerId} back to lobby`)\n  }\n\n  /**\n   * Get minigame location\n   */\n  protected getMinigameLocation(minigameType: MinigameType): Vector3 {\n    switch (minigameType) {\n      case MinigameType.CASTLE_WARS:\n        return { x: -100, y: 0, z: -100 }\n      case MinigameType.FIGHT_CAVES:\n        return { x: 100, y: 0, z: 100 }\n      default:\n        return { x: 0, y: 0, z: 50 }\n    }\n  }\n\n  /**\n   * Helper methods\n   */\n  protected getMinigamePlayer(_session: MinigameSession, _playerId: string): MinigamePlayer | null {\n    // This would be overridden by specific implementations\n    return null\n  }\n\n  protected generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * Update loop\n   */\n  update(_delta: number): void {\n    // Check queue timeouts\n    const _now = Date.now()\n    for (const [type, queue] of this.queuedPlayers) {\n      for (const _playerId of queue) {\n        // In a real implementation, track when each player joined\n        // For now, just try to start periodically\n        if (queue.size >= this.MIN_PLAYERS_TO_START) {\n          this.tryStartMinigame(type)\n        }\n      }\n    }\n\n    // Update active minigames\n    for (const session of this.sessions.values()) {\n      if (session.status === 'in_progress') {\n        this.updateMinigame(session, _delta)\n      }\n    }\n  }\n\n  /**\n   * Update specific minigame\n   */\n  protected updateMinigame(session: MinigameSession, _delta: number): void {\n    // Basic update logic - override for specific minigames\n    const minigame = this.minigameDefinitions.get(session.type)\n    if (!minigame) {\n      return\n    }\n\n    // Check for time-based end conditions\n    const elapsed = Date.now() - session.startTime\n    if (elapsed >= minigame.duration) {\n      this.endMinigame(session.id, 'time_limit')\n      return\n    }\n\n    // Update specific minigame logic\n    switch (session.type) {\n      case MinigameType.CASTLE_WARS:\n        this.updateCastleWars(session, _delta)\n        break\n\n      case MinigameType.FIGHT_CAVES:\n        this.updateFightCaves(session, _delta)\n        break\n    }\n  }\n\n  /**\n   * Update Castle Wars minigame\n   */\n  private updateCastleWars(session: MinigameSession, _delta: number): void {\n    const _data = session.data as any\n\n    // Simple scoring simulation\n    if (Math.random() < 0.01) {\n      // 1% chance per update\n      if (session.teams) {\n        const teams = Array.from(session.teams.values())\n        const scoringTeam = teams[Math.floor(Math.random() * teams.length)]\n        scoringTeam.score++\n\n        this.emit('minigame:team-scored', {\n          sessionId: session.id,\n          teamId: scoringTeam.id,\n          score: scoringTeam.score,\n        })\n\n        // Check win condition\n        if (scoringTeam.score >= 3) {\n          this.endMinigame(session.id, 'victory')\n        }\n      }\n    }\n  }\n\n  /**\n   * Update Fight Caves minigame\n   */\n  private updateFightCaves(session: MinigameSession, _delta: number): void {\n    const data = session.data as any\n\n    // Simple wave progression\n    if (data.currentEnemies.length === 0) {\n      data.wave++\n\n      if (data.wave > 63) {\n        // Completed all waves\n        this.endMinigame(session.id, 'victory')\n        return\n      }\n\n      // Spawn new enemies for the wave\n      const enemyCount = Math.min(data.wave, 5)\n      data.currentEnemies = Array(enemyCount)\n        .fill(0)\n        .map((_, i) => ({\n          id: `enemy_${data.wave}_${i}`,\n          type: 'tzhaar',\n          health: 100 * data.wave,\n        }))\n\n      this.emit('minigame:wave-started', {\n        sessionId: session.id,\n        wave: data.wave,\n        enemies: data.currentEnemies.length,\n      })\n    }\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type {\n  Entity,\n  Component,\n  Clan,\n  ClanComponent,\n  ClanMember,\n  ClanPermissions,\n  ClanWar,\n  ClanWarParticipant,\n  ClanWarRules\n} from '../types'\nimport { ClanRank } from '../types'\n\ninterface PlayerEntity extends Entity {\n  type: 'player'\n  username: string\n  displayName: string\n}\n\nexport class ClanSystem extends System {\n  private clans: Map<string, Clan> = new Map()\n  private playerClans: Map<string, string> = new Map() // playerId -> clanId\n  private clanWars: Map<string, ClanWar> = new Map()\n  private clanInvites: Map<string, Set<string>> = new Map() // playerId -> Set<clanId>\n\n  // Configuration\n  private readonly MIN_CLAN_NAME_LENGTH = 3\n  private readonly MAX_CLAN_NAME_LENGTH = 20\n  private readonly MIN_CLAN_TAG_LENGTH = 2\n  private readonly MAX_CLAN_TAG_LENGTH = 5\n  private readonly CLAN_CREATION_COST = 100000 // 100k gold\n  private readonly CLAN_WAR_PREPARATION_TIME = 300000 // 5 minutes\n  private readonly MAX_CLAN_SIZE = 500\n  private readonly INACTIVE_KICK_DAYS = 30\n  \n  // Persistence\n  private pendingSaves: Set<string> = new Set()\n  private saveTimer?: NodeJS.Timeout\n\n  // Default permissions by rank\n  private readonly DEFAULT_PERMISSIONS: Map<ClanRank, ClanPermissions> = new Map([\n    [\n      ClanRank.RECRUIT,\n      {\n        invite: false,\n        kick: false,\n        promote: false,\n        demote: false,\n        accessTreasury: false,\n        editSettings: false,\n        startWars: false,\n        editMotd: false,\n        manageCitadel: false,\n      },\n    ],\n    [\n      ClanRank.CORPORAL,\n      {\n        invite: true,\n        kick: false,\n        promote: false,\n        demote: false,\n        accessTreasury: false,\n        editSettings: false,\n        startWars: false,\n        editMotd: false,\n        manageCitadel: false,\n      },\n    ],\n    [\n      ClanRank.SERGEANT,\n      {\n        invite: true,\n        kick: true,\n        promote: false,\n        demote: false,\n        accessTreasury: false,\n        editSettings: false,\n        startWars: false,\n        editMotd: false,\n        manageCitadel: false,\n      },\n    ],\n    [\n      ClanRank.LIEUTENANT,\n      {\n        invite: true,\n        kick: true,\n        promote: true,\n        demote: true,\n        accessTreasury: true,\n        editSettings: false,\n        startWars: true,\n        editMotd: true,\n        manageCitadel: false,\n      },\n    ],\n    [\n      ClanRank.CAPTAIN,\n      {\n        invite: true,\n        kick: true,\n        promote: true,\n        demote: true,\n        accessTreasury: true,\n        editSettings: false,\n        startWars: true,\n        editMotd: true,\n        manageCitadel: true,\n      },\n    ],\n    [\n      ClanRank.GENERAL,\n      {\n        invite: true,\n        kick: true,\n        promote: true,\n        demote: true,\n        accessTreasury: true,\n        editSettings: true,\n        startWars: true,\n        editMotd: true,\n        manageCitadel: true,\n      },\n    ],\n    [\n      ClanRank.ADMIN,\n      {\n        invite: true,\n        kick: true,\n        promote: true,\n        demote: true,\n        accessTreasury: true,\n        editSettings: true,\n        startWars: true,\n        editMotd: true,\n        manageCitadel: true,\n      },\n    ],\n    [\n      ClanRank.DEPUTY_OWNER,\n      {\n        invite: true,\n        kick: true,\n        promote: true,\n        demote: true,\n        accessTreasury: true,\n        editSettings: true,\n        startWars: true,\n        editMotd: true,\n        manageCitadel: true,\n      },\n    ],\n    [\n      ClanRank.OWNER,\n      {\n        invite: true,\n        kick: true,\n        promote: true,\n        demote: true,\n        accessTreasury: true,\n        editSettings: true,\n        startWars: true,\n        editMotd: true,\n        manageCitadel: true,\n      },\n    ],\n  ])\n\n  constructor(world: World) {\n    super(world)\n  }\n\n  async initialize(): Promise<void> {\n    console.log('[ClanSystem] Initializing...')\n\n    // Listen for events\n    this.world.events.on('world:shutdown', this.handleShutdown.bind(this))\n\n    // Start auto-save timer\n    this.startAutoSave()\n    \n    // Load existing clans\n    await this.loadClanData()\n\n    console.log('[ClanSystem] Initialized with clan management')\n  }\n\n  /**\n   * Start auto-save timer\n   */\n  private startAutoSave(): void {\n    // Save clan data every 30 seconds\n    this.saveTimer = setInterval(() => {\n      this.savePendingClans()\n    }, 30000)\n  }\n\n  /**\n   * Handle world shutdown\n   */\n  private async handleShutdown(): Promise<void> {\n    // Save all clans immediately\n    await this.saveAllClans()\n    if (this.saveTimer) {\n      clearInterval(this.saveTimer)\n    }\n  }\n\n  /**\n   * Load clan data from persistence\n   */\n  private async loadClanData(): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      // Load all clans from world entities\n      const entities = await persistence.loadWorldEntities()\n      \n      for (const entity of entities) {\n        if (entity.entityType === 'clan') {\n          const metadata = entity.metadata || {}\n          const clan: Clan = {\n            id: entity.entityId,\n            name: metadata.name,\n            tag: metadata.tag,\n            description: metadata.description,\n            owner: metadata.owner,\n            created: new Date(metadata.created).getTime(),\n            members: new Map(Object.entries(metadata.members || {})),\n            maxMembers: metadata.maxMembers,\n            level: metadata.level,\n            experience: metadata.experience,\n            treasury: metadata.treasury,\n            settings: metadata.settings,\n            features: metadata.features,\n            permissions: new Map(Object.entries(metadata.permissions || {}).map(([k, v]) => [k as ClanRank, v as ClanPermissions]))\n          }\n          \n          this.clans.set(clan.id, clan)\n          \n          // Rebuild player clan map\n          for (const [playerId] of clan.members) {\n            this.playerClans.set(playerId, clan.id)\n          }\n        }\n      }\n\n      console.log(`[ClanSystem] Loaded ${this.clans.size} clans`)\n    } catch (error) {\n      console.error(`[ClanSystem] Failed to load clan data:`, error)\n    }\n  }\n\n  /**\n   * Save a specific clan\n   */\n  private async saveClan(clanId: string): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    const clan = this.clans.get(clanId)\n    if (!clan) return\n\n    try {\n      const entity = {\n        entityId: clanId,\n        worldId: (this.world as any).id || 'default',\n        entityType: 'clan',\n        position: JSON.stringify({ x: 0, y: 0, z: 0 }),\n        metadata: {\n          name: clan.name,\n          tag: clan.tag,\n          description: clan.description,\n          owner: clan.owner,\n          created: new Date(clan.created).toISOString(),\n          members: Object.fromEntries(clan.members),\n          maxMembers: clan.maxMembers,\n          level: clan.level,\n          experience: clan.experience,\n          treasury: clan.treasury,\n          settings: clan.settings,\n          features: clan.features,\n          permissions: Object.fromEntries(clan.permissions)\n        }\n      }\n\n      await persistence.saveWorldEntities([entity])\n      console.log(`[ClanSystem] Saved clan ${clanId}`)\n    } catch (error) {\n      console.error(`[ClanSystem] Failed to save clan ${clanId}:`, error)\n    }\n  }\n\n  /**\n   * Save all pending clans\n   */\n  private async savePendingClans(): Promise<void> {\n    if (this.pendingSaves.size === 0) return\n\n    const toSave = Array.from(this.pendingSaves)\n    this.pendingSaves.clear()\n\n    for (const clanId of toSave) {\n      await this.saveClan(clanId)\n    }\n  }\n\n  /**\n   * Save all clans\n   */\n  private async saveAllClans(): Promise<void> {\n    const persistence = (this.world as any).getSystem('persistence')\n    if (!persistence) return\n\n    try {\n      const entities: any[] = []\n      \n      for (const [clanId, clan] of this.clans) {\n        entities.push({\n          entityId: clanId,\n          worldId: (this.world as any).id || 'default',\n          entityType: 'clan',\n          position: JSON.stringify({ x: 0, y: 0, z: 0 }),\n          metadata: {\n            name: clan.name,\n            tag: clan.tag,\n            description: clan.description,\n            owner: clan.owner,\n            created: new Date(clan.created).toISOString(),\n            members: Object.fromEntries(clan.members),\n            maxMembers: clan.maxMembers,\n            level: clan.level,\n            experience: clan.experience,\n            treasury: clan.treasury,\n            settings: clan.settings,\n            features: clan.features,\n            permissions: Object.fromEntries(clan.permissions)\n          }\n        })\n      }\n\n      await persistence.saveWorldEntities(entities)\n      console.log(`[ClanSystem] Saved ${entities.length} clans`)\n    } catch (error) {\n      console.error(`[ClanSystem] Failed to save clans:`, error)\n    }\n  }\n\n  /**\n   * Mark clan for saving\n   */\n  private markClanForSave(clanId: string): void {\n    this.pendingSaves.add(clanId)\n  }\n\n  /**\n   * Create a new clan\n   */\n  createClan(founderId: string, name: string, tag: string, description: string = ''): string | null {\n    // Validate inputs\n    if (!this.validateClanName(name)) {\n      this.emit('clan:error', {\n        playerId: founderId,\n        error: 'Invalid clan name',\n      })\n      return null\n    }\n\n    if (!this.validateClanTag(tag)) {\n      this.emit('clan:error', {\n        playerId: founderId,\n        error: 'Invalid clan tag',\n      })\n      return null\n    }\n\n    // Check if player is already in a clan\n    if (this.playerClans.has(founderId)) {\n      this.emit('clan:error', {\n        playerId: founderId,\n        error: 'You must leave your current clan first',\n      })\n      return null\n    }\n\n    // Check if clan name or tag already exists\n    for (const clan of this.clans.values()) {\n      if (clan.name.toLowerCase() === name.toLowerCase()) {\n        this.emit('clan:error', {\n          playerId: founderId,\n          error: 'Clan name already exists',\n        })\n        return null\n      }\n      if (clan.tag.toLowerCase() === tag.toLowerCase()) {\n        this.emit('clan:error', {\n          playerId: founderId,\n          error: 'Clan tag already exists',\n        })\n        return null\n      }\n    }\n\n    // Check founder has enough gold\n    const founder = this.world.entities.get(founderId)\n    if (!founder) {\n      return null\n    }\n\n    const inventory = founder.getComponent('inventory')\n    if (!inventory || !this.hasGold(inventory, this.CLAN_CREATION_COST)) {\n      this.emit('clan:error', {\n        playerId: founderId,\n        error: 'Insufficient gold',\n      })\n      return null\n    }\n\n    // Deduct gold\n    this.removeGold(inventory, this.CLAN_CREATION_COST)\n\n    // Create clan\n    const clanId = this.generateClanId()\n    const founderMember: ClanMember = {\n      playerId: founderId,\n      username: (founder as PlayerEntity).displayName || 'Unknown',\n      rank: ClanRank.OWNER,\n      joinedAt: Date.now(),\n      lastSeen: Date.now(),\n      contributions: this.CLAN_CREATION_COST,\n      clanXp: 0,\n    }\n\n    const clan: Clan = {\n      id: clanId,\n      name,\n      tag,\n      description,\n      owner: founderId,\n      created: Date.now(),\n      members: new Map([[founderId, founderMember]]),\n      maxMembers: 50, // Start with 50, can be upgraded\n      level: 1,\n      experience: 0,\n      treasury: 0,\n      settings: {\n        joinType: 'invite',\n        minCombatLevel: 3,\n        minTotalLevel: 50,\n        kickInactiveDays: this.INACTIVE_KICK_DAYS,\n        clanColor: '#ffffff',\n        motd: `Welcome to ${name}!`,\n      },\n      features: {\n        citadel: false,\n        clanWars: true,\n        clanChat: true,\n        events: true,\n      },\n      permissions: new Map(this.DEFAULT_PERMISSIONS),\n    }\n\n    // Store clan\n    this.clans.set(clanId, clan)\n    this.playerClans.set(founderId, clanId)\n\n    // Update player component\n    this.updatePlayerClanComponent(founderId, clanId, ClanRank.OWNER)\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:created', {\n      clanId,\n      name,\n      tag,\n      founderId,\n    })\n\n    return clanId\n  }\n\n  /**\n   * Invite a player to clan\n   */\n  invitePlayer(inviterId: string, targetPlayerId: string): boolean {\n    const inviterClanId = this.playerClans.get(inviterId)\n    if (!inviterClanId) {\n      return false\n    }\n\n    const clan = this.clans.get(inviterClanId)\n    if (!clan) {\n      return false\n    }\n\n    const inviterMember = clan.members.get(inviterId)\n    if (!inviterMember) {\n      return false\n    }\n\n    // Check permissions\n    const permissions = clan.permissions.get(inviterMember.rank)\n    if (!permissions?.invite) {\n      this.emit('clan:error', {\n        playerId: inviterId,\n        error: 'You do not have permission to invite',\n      })\n      return false\n    }\n\n    // Check if target is already in a clan\n    if (this.playerClans.has(targetPlayerId)) {\n      this.emit('clan:error', {\n        playerId: inviterId,\n        error: 'Player is already in a clan',\n      })\n      return false\n    }\n\n    // Check clan capacity\n    if (clan.members.size >= clan.maxMembers) {\n      this.emit('clan:error', {\n        playerId: inviterId,\n        error: 'Clan is full',\n      })\n      return false\n    }\n\n    // Add invite\n    let invites = this.clanInvites.get(targetPlayerId)\n    if (!invites) {\n      invites = new Set()\n      this.clanInvites.set(targetPlayerId, invites)\n    }\n    invites.add(inviterClanId)\n\n    // Update target player component\n    const targetPlayer = this.world.entities.get(targetPlayerId)\n    if (targetPlayer) {\n      const clanComponent = targetPlayer.getComponent('clan') as any\n      if (clanComponent) {\n        clanComponent.invites.push(inviterClanId)\n      }\n    }\n\n    // Emit event\n    this.emit('clan:invite-sent', {\n      clanId: inviterClanId,\n      inviterId,\n      targetPlayerId,\n      clanName: clan.name,\n    })\n\n    return true\n  }\n\n  /**\n   * Accept clan invite\n   */\n  acceptInvite(playerId: string, clanId: string): boolean {\n    const invites = this.clanInvites.get(playerId)\n    if (!invites || !invites.has(clanId)) {\n      this.emit('clan:error', {\n        playerId,\n        error: 'No invite from this clan',\n      })\n      return false\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return false\n    }\n\n    // Check requirements\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    if (!player) {\n      return false\n    }\n\n    const stats = player.getComponent('stats') as any\n    if (stats) {\n      if (stats.combatLevel < clan.settings.minCombatLevel) {\n        this.emit('clan:error', {\n          playerId,\n          error: `Combat level ${clan.settings.minCombatLevel} required`,\n        })\n        return false\n      }\n      if (stats.totalLevel < clan.settings.minTotalLevel) {\n        this.emit('clan:error', {\n          playerId,\n          error: `Total level ${clan.settings.minTotalLevel} required`,\n        })\n        return false\n      }\n    }\n\n    // Check capacity\n    if (clan.members.size >= clan.maxMembers) {\n      this.emit('clan:error', {\n        playerId,\n        error: 'Clan is full',\n      })\n      return false\n    }\n\n    // Add member\n    const member: ClanMember = {\n      playerId,\n      username: player.displayName || 'Unknown',\n      rank: ClanRank.RECRUIT,\n      joinedAt: Date.now(),\n      lastSeen: Date.now(),\n      contributions: 0,\n      clanXp: 0,\n    }\n\n    clan.members.set(playerId, member)\n    this.playerClans.set(playerId, clanId)\n\n    // Clear invites\n    this.clanInvites.delete(playerId)\n\n    // Update player component\n    this.updatePlayerClanComponent(playerId, clanId, ClanRank.RECRUIT)\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:member-joined', {\n      clanId,\n      playerId,\n      playerName: member.username,\n    })\n\n    // Broadcast to clan\n    this.broadcastToClan(clanId, `${member.username} has joined the clan!`)\n\n    return true\n  }\n\n  /**\n   * Leave clan\n   */\n  leaveClan(playerId: string): boolean {\n    const clanId = this.playerClans.get(playerId)\n    if (!clanId) {\n      return false\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return false\n    }\n\n    const member = clan.members.get(playerId)\n    if (!member) {\n      return false\n    }\n\n    // Check if owner\n    if (member.rank === ClanRank.OWNER) {\n      // Find deputy owner or highest ranked member\n      let newOwner: ClanMember | null = null\n      for (const m of clan.members.values()) {\n        if (m.playerId === playerId) {\n          continue\n        }\n        if (m.rank === ClanRank.DEPUTY_OWNER) {\n          newOwner = m\n          break\n        }\n        if (!newOwner || this.getRankLevel(m.rank) > this.getRankLevel(newOwner.rank)) {\n          newOwner = m\n        }\n      }\n\n      if (newOwner) {\n        // Transfer ownership\n        newOwner.rank = ClanRank.OWNER\n        clan.owner = newOwner.playerId\n        this.markClanForSave(clanId)\n        this.emit('clan:ownership-transferred', {\n          clanId,\n          oldOwnerId: playerId,\n          newOwnerId: newOwner.playerId,\n        })\n      } else {\n        // Disband clan if no other members\n        this.disbandClan(clanId)\n        return true\n      }\n    }\n\n    // Remove member\n    clan.members.delete(playerId)\n    this.playerClans.delete(playerId)\n\n    // Update player component\n    this.updatePlayerClanComponent(playerId, null, null)\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:member-left', {\n      clanId,\n      playerId,\n      playerName: member.username,\n    })\n\n    // Broadcast to clan\n    this.broadcastToClan(clanId, `${member.username} has left the clan.`)\n\n    return true\n  }\n\n  /**\n   * Kick member from clan\n   */\n  kickMember(kickerId: string, targetId: string): boolean {\n    const clanId = this.playerClans.get(kickerId)\n    if (!clanId) {\n      return false\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return false\n    }\n\n    const kicker = clan.members.get(kickerId)\n    const target = clan.members.get(targetId)\n\n    if (!kicker || !target) {\n      return false\n    }\n\n    // Check permissions\n    const permissions = clan.permissions.get(kicker.rank)\n    if (!permissions?.kick) {\n      this.emit('clan:error', {\n        playerId: kickerId,\n        error: 'You do not have permission to kick',\n      })\n      return false\n    }\n\n    // Check rank hierarchy\n    if (this.getRankLevel(target.rank) >= this.getRankLevel(kicker.rank)) {\n      this.emit('clan:error', {\n        playerId: kickerId,\n        error: 'Cannot kick members of equal or higher rank',\n      })\n      return false\n    }\n\n    // Remove member\n    clan.members.delete(targetId)\n    this.playerClans.delete(targetId)\n\n    // Update player component\n    this.updatePlayerClanComponent(targetId, null, null)\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:member-kicked', {\n      clanId,\n      kickerId,\n      targetId,\n      targetName: target.username,\n    })\n\n    // Notify kicked player\n    this.sendMessage(targetId, `You have been kicked from ${clan.name}`)\n\n    // Broadcast to clan\n    this.broadcastToClan(clanId, `${target.username} has been kicked from the clan.`)\n\n    return true\n  }\n\n  /**\n   * Promote clan member\n   */\n  promoteMember(promoterId: string, targetId: string): boolean {\n    const clanId = this.playerClans.get(promoterId)\n    if (!clanId) {\n      return false\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return false\n    }\n\n    const promoter = clan.members.get(promoterId)\n    const target = clan.members.get(targetId)\n\n    if (!promoter || !target) {\n      return false\n    }\n\n    // Check permissions\n    const permissions = clan.permissions.get(promoter.rank)\n    if (!permissions?.promote) {\n      this.emit('clan:error', {\n        playerId: promoterId,\n        error: 'You do not have permission to promote',\n      })\n      return false\n    }\n\n    // Get next rank\n    const nextRank = this.getNextRank(target.rank)\n    if (!nextRank) {\n      this.emit('clan:error', {\n        playerId: promoterId,\n        error: 'Member is already at highest rank',\n      })\n      return false\n    }\n\n    // Check if promoter can promote to this rank\n    if (this.getRankLevel(nextRank) >= this.getRankLevel(promoter.rank)) {\n      this.emit('clan:error', {\n        playerId: promoterId,\n        error: 'Cannot promote to equal or higher rank than yourself',\n      })\n      return false\n    }\n\n    // Promote\n    const oldRank = target.rank\n    target.rank = nextRank\n\n    // Update player component\n    this.updatePlayerClanComponent(targetId, clanId, nextRank)\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:member-promoted', {\n      clanId,\n      promoterId,\n      targetId,\n      oldRank,\n      newRank: nextRank,\n    })\n\n    // Notify target\n    this.sendMessage(targetId, `You have been promoted to ${nextRank}!`)\n\n    // Broadcast to clan\n    this.broadcastToClan(clanId, `${target.username} has been promoted to ${nextRank}.`)\n\n    return true\n  }\n\n  /**\n   * Start clan war\n   */\n  startClanWar(initiatorId: string, targetClanId: string, rules: ClanWarRules): string | null {\n    const initiatorClanId = this.playerClans.get(initiatorId)\n    if (!initiatorClanId) {\n      return null\n    }\n\n    const initiatorClan = this.clans.get(initiatorClanId)\n    const targetClan = this.clans.get(targetClanId)\n\n    if (!initiatorClan || !targetClan) {\n      return null\n    }\n\n    const initiator = initiatorClan.members.get(initiatorId)\n    if (!initiator) {\n      return null\n    }\n\n    // Check permissions\n    const permissions = initiatorClan.permissions.get(initiator.rank)\n    if (!permissions?.startWars) {\n      this.emit('clan:error', {\n        playerId: initiatorId,\n        error: 'You do not have permission to start wars',\n      })\n      return null\n    }\n\n    // Check if clans are already in war\n    for (const war of this.clanWars.values()) {\n      if (war.status === 'active' || war.status === 'pending') {\n        if (\n          war.clan1Id === initiatorClanId ||\n          war.clan2Id === initiatorClanId ||\n          war.clan1Id === targetClanId ||\n          war.clan2Id === targetClanId\n        ) {\n          this.emit('clan:error', {\n            playerId: initiatorId,\n            error: 'One or both clans are already in a war',\n          })\n          return null\n        }\n      }\n    }\n\n    // Create war\n    const warId = this.generateWarId()\n    const war: ClanWar = {\n      id: warId,\n      clan1Id: initiatorClanId,\n      clan2Id: targetClanId,\n      startTime: Date.now() + this.CLAN_WAR_PREPARATION_TIME,\n      endTime: 0,\n      status: 'pending',\n      participants: new Map(),\n      scores: {\n        clan1: 0,\n        clan2: 0,\n      },\n      rules,\n      winner: undefined,\n    }\n\n    this.clanWars.set(warId, war)\n\n    // Emit event\n    this.emit('clan:war-declared', {\n      warId,\n      clan1Id: initiatorClanId,\n      clan1Name: initiatorClan.name,\n      clan2Id: targetClanId,\n      clan2Name: targetClan.name,\n      startTime: war.startTime,\n    })\n\n    // Broadcast to both clans\n    this.broadcastToClan(initiatorClanId, `War declared against ${targetClan.name}! Prepare for battle!`)\n    this.broadcastToClan(targetClanId, `${initiatorClan.name} has declared war! Prepare for battle!`)\n\n    return warId\n  }\n\n  /**\n   * Join clan war\n   */\n  joinClanWar(playerId: string, warId: string): boolean {\n    const war = this.clanWars.get(warId)\n    if (!war || war.status !== 'pending') {\n      return false\n    }\n\n    const playerClanId = this.playerClans.get(playerId)\n    if (!playerClanId) {\n      return false\n    }\n\n    if (playerClanId !== war.clan1Id && playerClanId !== war.clan2Id) {\n      return false\n    }\n\n    // Check combat level requirements\n    const player = this.world.entities.get(playerId) as PlayerEntity\n    const stats = player?.getComponent('stats') as any\n    if (stats && stats.combatLevel && war.rules.combatLevelRange) {\n      const combatLevel = stats.combatLevel\n      if (combatLevel < war.rules.combatLevelRange[0] || combatLevel > war.rules.combatLevelRange[1]) {\n        this.emit('clan:error', {\n          playerId,\n          error: 'Your combat level does not meet the war requirements',\n        })\n        return false\n      }\n    }\n\n    // Add participant\n    const participant: ClanWarParticipant = {\n      playerId,\n      clanId: playerClanId,\n      kills: 0,\n      deaths: 0,\n      damageDealt: 0,\n      healingDone: 0,\n    }\n\n    war.participants.set(playerId, participant)\n\n    // Emit event\n    this.emit('clan:war-participant-joined', {\n      warId,\n      playerId,\n      clanId: playerClanId,\n    })\n\n    return true\n  }\n\n  /**\n   * Update clan war stats\n   */\n  updateWarStats(\n    warId: string,\n    playerId: string,\n    stat: 'kills' | 'deaths' | 'damage' | 'healing',\n    value: number\n  ): void {\n    const war = this.clanWars.get(warId)\n    if (!war || war.status !== 'active') {\n      return\n    }\n\n    const participant = war.participants.get(playerId)\n    if (!participant) {\n      return\n    }\n\n    participant[stat] += value\n\n    // Update clan score based on kills\n    if (stat === 'kills') {\n      if (participant.clanId === war.clan1Id) {\n        war.scores.clan1 += value\n      } else {\n        war.scores.clan2 += value\n      }\n\n      // Check win condition\n      this.checkWarWinCondition(war)\n    }\n  }\n\n  /**\n   * Get clan by ID\n   */\n  getClan(clanId: string): Clan | null {\n    return this.clans.get(clanId) || null\n  }\n\n  /**\n   * Get player's clan\n   */\n  getPlayerClan(playerId: string): Clan | null {\n    const clanId = this.playerClans.get(playerId)\n    if (!clanId) {\n      return null\n    }\n    return this.clans.get(clanId) || null\n  }\n\n  /**\n   * Search clans\n   */\n  searchClans(query: string): Clan[] {\n    const results: Clan[] = []\n    const lowerQuery = query.toLowerCase()\n\n    for (const clan of this.clans.values()) {\n      if (clan.settings.joinType === 'closed') {\n        continue\n      }\n\n      if (\n        clan.name.toLowerCase().includes(lowerQuery) ||\n        clan.tag.toLowerCase().includes(lowerQuery) ||\n        clan.description.toLowerCase().includes(lowerQuery)\n      ) {\n        results.push(clan)\n      }\n    }\n\n    return results.slice(0, 20) // Limit to 20 results\n  }\n\n  /**\n   * Update clan settings\n   */\n  updateClanSettings(playerId: string, settings: Partial<Clan['settings']>): boolean {\n    const clanId = this.playerClans.get(playerId)\n    if (!clanId) {\n      return false\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return false\n    }\n\n    const member = clan.members.get(playerId)\n    if (!member) {\n      return false\n    }\n\n    // Check permissions\n    const permissions = clan.permissions.get(member.rank)\n    if (!permissions?.editSettings) {\n      this.emit('clan:error', {\n        playerId,\n        error: 'You do not have permission to edit settings',\n      })\n      return false\n    }\n\n    // Update settings\n    Object.assign(clan.settings, settings)\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:settings-updated', {\n      clanId,\n      updatedBy: playerId,\n      settings,\n    })\n\n    return true\n  }\n\n  /**\n   * Deposit to clan treasury\n   */\n  depositToTreasury(playerId: string, amount: number): boolean {\n    const clanId = this.playerClans.get(playerId)\n    if (!clanId) {\n      return false\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return false\n    }\n\n    const member = clan.members.get(playerId)\n    if (!member) {\n      return false\n    }\n\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return false\n    }\n\n    const inventory = player.getComponent('inventory')\n    if (!inventory || !this.hasGold(inventory, amount)) {\n      this.emit('clan:error', {\n        playerId,\n        error: 'Insufficient gold',\n      })\n      return false\n    }\n\n    // Deduct gold\n    this.removeGold(inventory, amount)\n\n    // Update treasury and contributions\n    clan.treasury += amount\n    member.contributions += amount\n\n    // Grant clan XP\n    const xpGained = Math.floor(amount / 100) // 1 XP per 100 gold\n    this.grantClanXP(clanId, xpGained)\n    member.clanXp += xpGained\n    \n    // Mark clan for save (grantClanXP will also mark it)\n    this.markClanForSave(clanId)\n\n    // Emit event\n    this.emit('clan:treasury-deposit', {\n      clanId,\n      playerId,\n      amount,\n      newTotal: clan.treasury,\n    })\n\n    return true\n  }\n\n  /**\n   * Clan chat message\n   */\n  sendClanMessage(senderId: string, message: string): void {\n    const clanId = this.playerClans.get(senderId)\n    if (!clanId) {\n      return\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return\n    }\n\n    const member = clan.members.get(senderId)\n    if (!member) {\n      return\n    }\n\n    // Check chat settings\n    if (clan.settings.joinType === 'closed' && member.rank === ClanRank.RECRUIT) {\n      this.sendMessage(senderId, 'Recruits cannot talk in closed clans')\n      return\n    }\n\n    // Update last chat time\n    const playerComponent = this.getPlayerClanComponent(senderId)\n    if (playerComponent) {\n      playerComponent.lastClanChat = Date.now()\n    }\n\n    // Emit event\n    this.emit('clan:chat-message', {\n      clanId,\n      senderId,\n      senderName: member.username,\n      senderRank: member.rank,\n      message,\n      timestamp: Date.now(),\n    })\n  }\n\n  /**\n   * Update member activity\n   */\n  updateMemberActivity(playerId: string): void {\n    const clanId = this.playerClans.get(playerId)\n    if (!clanId) {\n      return\n    }\n\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return\n    }\n\n    const member = clan.members.get(playerId)\n    if (!member) {\n      return\n    }\n\n    member.lastSeen = Date.now()\n  }\n\n  /**\n   * Clean up inactive members\n   */\n  private cleanupInactiveMembers(): void {\n    const now = Date.now()\n    const _inactiveThreshold = this.INACTIVE_KICK_DAYS * 24 * 60 * 60 * 1000\n\n    for (const clan of this.clans.values()) {\n      if (clan.settings.kickInactiveDays <= 0) {\n        continue\n      }\n\n      const threshold = clan.settings.kickInactiveDays * 24 * 60 * 60 * 1000\n      const toKick: string[] = []\n\n      for (const [playerId, member] of clan.members) {\n        // Don't kick high-ranking members\n        if (this.getRankLevel(member.rank) >= this.getRankLevel(ClanRank.LIEUTENANT)) {\n          continue\n        }\n\n        if (now - member.lastSeen > threshold) {\n          toKick.push(playerId)\n        }\n      }\n\n      // Kick inactive members\n      for (const playerId of toKick) {\n        const member = clan.members.get(playerId)\n        if (member) {\n          clan.members.delete(playerId)\n          this.playerClans.delete(playerId)\n          this.updatePlayerClanComponent(playerId, null, null)\n\n          this.emit('clan:member-kicked', {\n            clanId: clan.id,\n            targetId: playerId,\n            targetName: member.username,\n            reason: 'inactivity',\n          })\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper methods\n   */\n  private validateClanName(name: string): boolean {\n    if (name.length < this.MIN_CLAN_NAME_LENGTH || name.length > this.MAX_CLAN_NAME_LENGTH) {\n      return false\n    }\n    return /^[a-zA-Z0-9 ]+$/.test(name)\n  }\n\n  private validateClanTag(tag: string): boolean {\n    if (tag.length < this.MIN_CLAN_TAG_LENGTH || tag.length > this.MAX_CLAN_TAG_LENGTH) {\n      return false\n    }\n    return /^[a-zA-Z0-9]+$/.test(tag)\n  }\n\n  private getRankLevel(rank: ClanRank): number {\n    const levels = {\n      [ClanRank.RECRUIT]: 0,\n      [ClanRank.CORPORAL]: 1,\n      [ClanRank.SERGEANT]: 2,\n      [ClanRank.LIEUTENANT]: 3,\n      [ClanRank.CAPTAIN]: 4,\n      [ClanRank.GENERAL]: 5,\n      [ClanRank.ADMIN]: 6,\n      [ClanRank.DEPUTY_OWNER]: 7,\n      [ClanRank.OWNER]: 8,\n    }\n    return levels[rank] || 0\n  }\n\n  private getNextRank(currentRank: ClanRank): ClanRank | null {\n    const progression = [\n      ClanRank.RECRUIT,\n      ClanRank.CORPORAL,\n      ClanRank.SERGEANT,\n      ClanRank.LIEUTENANT,\n      ClanRank.CAPTAIN,\n      ClanRank.GENERAL,\n      ClanRank.ADMIN,\n      ClanRank.DEPUTY_OWNER,\n    ]\n\n    const currentIndex = progression.indexOf(currentRank)\n    if (currentIndex === -1 || currentIndex === progression.length - 1) {\n      return null\n    }\n\n    return progression[currentIndex + 1]\n  }\n\n  private grantClanXP(clanId: string, xp: number): void {\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return\n    }\n\n    clan.experience += xp\n\n    // Check for level up\n    const newLevel = Math.floor(Math.sqrt(clan.experience / 100)) + 1\n    if (newLevel > clan.level) {\n      clan.level = newLevel\n\n      // Upgrade benefits\n      if (newLevel % 5 === 0) {\n        clan.maxMembers += 10 // +10 members every 5 levels\n      }\n\n      this.emit('clan:level-up', {\n        clanId,\n        newLevel,\n        benefits: {\n          maxMembers: clan.maxMembers,\n        },\n      })\n\n      this.broadcastToClan(clanId, `The clan has reached level ${newLevel}!`)\n    }\n    \n    // Mark clan for save\n    this.markClanForSave(clanId)\n  }\n\n  private updatePlayerClanComponent(playerId: string, clanId: string | null, rank: ClanRank | null): void {\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return\n    }\n\n    let component = player.getComponent('clan') as any\n    if (!component) {\n      component = {\n        type: 'clan',\n        entity: player,\n        data: {},\n        clanId,\n        rank,\n        invites: [],\n        joinDate: clanId ? Date.now() : 0,\n        contributions: 0,\n        clanXp: 0,\n        lastClanChat: 0,\n      }\n      player.addComponent('clan', component)\n    } else {\n      component.clanId = clanId\n      component.rank = rank\n      if (!clanId) {\n        component.joinDate = 0\n        component.contributions = 0\n        component.clanXp = 0\n      }\n    }\n  }\n\n  private getPlayerClanComponent(playerId: string): ClanComponent | null {\n    const player = this.world.entities.get(playerId)\n    if (!player) {\n      return null\n    }\n    return player.getComponent('clan') as any\n  }\n\n  private disbandClan(clanId: string): void {\n    const clan = this.clans.get(clanId)\n    if (!clan) {\n      return\n    }\n\n    // Remove all members\n    for (const playerId of clan.members.keys()) {\n      this.playerClans.delete(playerId)\n      this.updatePlayerClanComponent(playerId, null, null)\n    }\n\n    // Cancel any active wars\n    for (const [warId, war] of this.clanWars) {\n      if ((war.clan1Id === clanId || war.clan2Id === clanId) && (war.status === 'pending' || war.status === 'active')) {\n        war.status = 'completed'\n        this.emit('clan:war-cancelled', {\n          warId,\n          reason: 'clan_disbanded',\n        })\n      }\n    }\n\n    // Remove clan\n    this.clans.delete(clanId)\n\n    // Emit event\n    this.emit('clan:disbanded', {\n      clanId,\n      clanName: clan.name,\n    })\n  }\n\n  private checkWarWinCondition(war: ClanWar): void {\n    // Example: First to 100 kills wins\n    const winScore = 100\n\n    let winner: string | undefined\n    if (war.scores.clan1 >= winScore) {\n      winner = war.clan1Id\n    } else if (war.scores.clan2 >= winScore) {\n      winner = war.clan2Id\n    }\n\n    if (winner) {\n      war.status = 'completed'\n      war.endTime = Date.now()\n\n      const winnerClan = this.clans.get(winner)\n      const loserClan = this.clans.get(winner === war.clan1Id ? war.clan2Id : war.clan1Id)\n\n      this.emit('clan:war-ended', {\n        warId: war.id,\n        winnerId: winner,\n        winnerName: winnerClan?.name,\n        loserId: winner === war.clan1Id ? war.clan2Id : war.clan1Id,\n        loserName: loserClan?.name,\n        finalScore: war.scores,\n      })\n\n      // Grant rewards\n      if (winnerClan) {\n        this.grantClanXP(winner, 1000) // 1000 XP for winning\n        winnerClan.treasury += 50000 // 50k gold prize\n        this.markClanForSave(winner)\n      }\n\n      // Add final score\n      if (winner === war.clan1Id) {\n        war.scores.clan1 += 10\n      } else {\n        war.scores.clan2 += 10\n      }\n    }\n  }\n\n  private broadcastToClan(clanId: string, message: string): void {\n    this.emit('clan:broadcast', {\n      clanId,\n      message,\n      timestamp: Date.now(),\n    })\n  }\n\n  private sendMessage(playerId: string, message: string): void {\n    this.emit('chat:message', {\n      playerId,\n      message,\n      type: 'system',\n    })\n  }\n\n  private hasGold(inventory: any, amount: number): boolean {\n    return inventory.getItemCount(995) >= amount // 995 is gold ID\n  }\n\n  private removeGold(inventory: any, amount: number): void {\n    inventory.removeItem(995, amount)\n  }\n\n  private generateClanId(): string {\n    return `clan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private generateWarId(): string {\n    return `war_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * Update loop\n   */\n  update(_delta: number): void {\n    // Update active wars\n    const now = Date.now()\n    for (const war of this.clanWars.values()) {\n      if (war.status === 'pending' && war.startTime && now >= war.startTime) {\n        war.status = 'active'\n        this.emit('clan:war-started', {\n          warId: war.id,\n          clan1Id: war.clan1Id,\n          clan2Id: war.clan2Id,\n        })\n      }\n    }\n\n    // Periodic cleanup (every hour)\n    if (now % 3600000 < _delta) {\n      this.cleanupInactiveMembers()\n    }\n  }\n  \n  /**\n   * Serialize clan system data\n   */\n  serialize(): any {\n    return {\n      clans: Object.fromEntries(\n        Array.from(this.clans.entries()).map(([id, clan]) => [\n          id,\n          {\n            ...clan,\n            members: Object.fromEntries(clan.members),\n            permissions: Object.fromEntries(clan.permissions)\n          }\n        ])\n      ),\n      playerClans: Object.fromEntries(this.playerClans),\n      clanWars: Object.fromEntries(\n        Array.from(this.clanWars.entries()).map(([id, war]) => [\n          id,\n          {\n            ...war,\n            participants: Object.fromEntries(war.participants)\n          }\n        ])\n      ),\n      clanInvites: Object.fromEntries(\n        Array.from(this.clanInvites.entries()).map(([playerId, invites]) => [\n          playerId,\n          Array.from(invites)\n        ])\n      )\n    }\n  }\n\n  /**\n   * Deserialize clan system data\n   */\n  deserialize(data: any): void {\n    if (data.clans) {\n      this.clans = new Map(\n        Object.entries(data.clans).map(([id, clan]: [string, any]) => [\n          id,\n          {\n            ...clan,\n            members: new Map(Object.entries(clan.members || {})),\n            permissions: new Map(Object.entries(clan.permissions || {}).map(([k, v]) => [k as ClanRank, v as ClanPermissions]))\n          }\n        ])\n      )\n    }\n    \n    if (data.playerClans) {\n      this.playerClans = new Map(Object.entries(data.playerClans))\n    }\n    \n    if (data.clanWars) {\n      this.clanWars = new Map(\n        Object.entries(data.clanWars).map(([id, war]: [string, any]) => [\n          id,\n          {\n            ...war,\n            participants: new Map(Object.entries(war.participants || {}))\n          }\n        ])\n      )\n    }\n    \n    if (data.clanInvites) {\n      this.clanInvites = new Map(\n        Object.entries(data.clanInvites).map(([playerId, invites]: [string, any]) => [\n          playerId,\n          new Set(invites || [])\n        ])\n      )\n    }\n  }\n}\n", "/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n", "import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n", "import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n", "import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n", "import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n", "/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n", "import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]';\n\n/**\n * Checks if `value` is classified as a boolean primitive or object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n * @example\n *\n * _.isBoolean(false);\n * // => true\n *\n * _.isBoolean(null);\n * // => false\n */\nfunction isBoolean(value) {\n  return value === true || value === false ||\n    (isObjectLike(value) && baseGetTag(value) == boolTag);\n}\n\nexport default isBoolean;\n", "import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nexport default isNumber;\n", "import { THREE } from '../extras/three';\nimport { Vector3Enhanced } from '../extras/Vector3Enhanced';\n// Runtime instances use THREE namespace which provides the actual classes\n\n// Helper function to replace lodash\nfunction isBoolean(value: any): value is boolean {\n  return typeof value === 'boolean';\n}\n\nconst _v1 = new THREE.Vector3();\nconst _v2 = new THREE.Vector3();\nconst _q1 = new THREE.Quaternion();\nconst _m1 = new THREE.Matrix4();\n\nconst defaults = {\n  active: true,\n  position: [0, 0, 0],\n  quaternion: [0, 0, 0, 1],\n  scale: [1, 1, 1],\n};\n\nlet nodeIds = -1;\n\nconst EPSILON = 0.000000001;\n\nconst secure = { allowRef: false };\nexport function getRef(pNode: any): any {\n  if (!pNode || !pNode._isRef) {\n    return pNode;\n  }\n  secure.allowRef = true;\n  const node = pNode._ref;\n  secure.allowRef = false;\n  return node;\n}\n\nexport function secureRef(obj: any = {}, getRef: () => any): any {\n  const tpl = {\n    get _ref() {\n      if (!secure.allowRef) {\n        return null;\n      }\n      return getRef();\n    },\n  };\n  obj._isRef = true;\n  const descriptor = Object.getOwnPropertyDescriptor(tpl, '_ref');\n  if (descriptor) {\n    Object.defineProperty(obj, '_ref', descriptor);\n  }\n  return obj;\n}\n\nexport class Node {\n  id: string;\n  name: string;\n  parent: Node | null;\n  children: Node[];\n  ctx: any;\n  position: Vector3Enhanced;\n  quaternion: THREE.Quaternion;\n  rotation: THREE.Euler;\n  scale: THREE.Vector3;\n  matrix: THREE.Matrix4;\n  matrixWorld: THREE.Matrix4;\n  _onPointerEnter?: any;\n  _onPointerLeave?: any;\n  _onPointerDown?: any;\n  _onPointerUp?: any;\n  _cursor?: string;\n  _active: boolean;\n  isDirty: boolean;\n  isTransformed: boolean;\n  mounted: boolean;\n  proxy?: any;\n\n  constructor(data: any = {}) {\n    this.id = data.id || `${++nodeIds}`;\n    this.name = 'node';\n\n    this.parent = null\n    ;(this.children = []), (this.ctx = null);\n    this.position = new THREE.Vector3() as Vector3Enhanced;\n    this.position.fromArray(data.position || defaults.position);\n    this.quaternion = new THREE.Quaternion();\n    this.quaternion.fromArray(data.quaternion || defaults.quaternion);\n    this.rotation = new THREE.Euler().setFromQuaternion(this.quaternion);\n    this.rotation.reorder('YXZ');\n    this.scale = new THREE.Vector3();\n    this.scale.fromArray(data.scale || defaults.scale);\n    this.matrix = new THREE.Matrix4();\n    this.matrixWorld = new THREE.Matrix4()\n    ;(this.position as Vector3Enhanced)._onChange(() => {\n      this.setTransformed();\n    });\n    this.rotation._onChange(() => {\n      this.quaternion.setFromEuler(this.rotation, false);\n      this.setTransformed();\n    });\n    this.quaternion._onChange(() => {\n      this.rotation.setFromQuaternion(this.quaternion, undefined, false);\n      this.setTransformed();\n    });\n    this.scale._onChange(() => {\n      // scale set to exactly zero on any axis causes matrices to have NaN values.\n      // this causes our octrees to fail into an infinite loop\n      if (this.scale.x === 0 || this.scale.y === 0 || this.scale.z === 0) {\n        return this.scale.set(this.scale.x || EPSILON, this.scale.y || EPSILON, this.scale.z || EPSILON);\n      }\n      this.setTransformed();\n      return this.scale;\n    });\n    this._onPointerEnter = data.onPointerEnter;\n    this._onPointerLeave = data.onPointerLeave;\n    this._onPointerDown = data.onPointerDown;\n    this._onPointerUp = data.onPointerUp;\n    this._cursor = data.cursor;\n    this._active = isBoolean(data.active) ? data.active : defaults.active;\n    // this.scale._onChange?\n    this.isDirty = false;\n    this.isTransformed = true;\n    this.mounted = false;\n  }\n\n  activate(ctx?: any): void {\n    if (ctx) {\n      this.ctx = ctx;\n    }\n    if (!this._active) {\n      return;\n    }\n    // top down mount\n    if (this.mounted) {\n      return;\n    }\n    this.updateTransform();\n    this.mounted = true;\n    this.mount();\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const child = children[i];\n      if (child) {\n        child.activate(ctx);\n      }\n    }\n  }\n\n  deactivate() {\n    if (!this.mounted) {\n      return;\n    }\n    // bottom up unmount\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const child = children[i];\n      if (child) {\n        child.deactivate();\n      }\n    }\n    this.unmount();\n    this.isDirty = false;\n    this.isTransformed = true;\n    this.mounted = false;\n  }\n\n  add(node: Node) {\n    if (!node) {\n      return console.error('no node to add');\n    }\n    if (node.parent) {\n      node.parent.remove(node);\n    }\n    node.parent = this;\n    this.children.push(node);\n    if (this.mounted) {\n      node.activate(this.ctx);\n    }\n    return this;\n  }\n\n  remove(node: Node) {\n    const idx = this.children.indexOf(node);\n    if (idx === -1) {\n      return;\n    }\n    node.deactivate();\n    node.parent = null;\n    this.children.splice(idx, 1);\n    return this;\n  }\n\n  // detach(node) {\n  //   if (node) {\n  //     const idx = this.children.indexOf(node)\n  //     if (idx === -1) return\n  //     this.project()\n  //     node.parent = null\n  //     this.children.splice(idx, 1)\n  //     node.matrix.copy(node.matrixWorld)\n  //     node.matrix.decompose(node.position, node.quaternion, node.scale)\n  //     node.project()\n  //     node.update()\n  //   } else {\n  //     this.parent?.detach(this)\n  //   }\n  // }\n\n  setTransformed() {\n    // - ensure this is marked as transformed\n    // - ensure this and all descendants are dirty\n    // - ensure only this node is tracked dirty\n    if (this.isTransformed) {\n      return;\n    }\n    this.traverse((node: Node) => {\n      if (node === this) {\n        node.isTransformed = true;\n        node.setDirty();\n      } else if (node.isDirty) {\n        // if we come across an already dirty node we must ensure its not tracked\n        // as we will clean it via this one\n        this.ctx.world.stage.dirtyNodes.delete(node);\n      } else {\n        node.isDirty = true;\n      }\n    });\n  }\n\n  setDirty() {\n    // if we haven't mounted no track\n    if (!this.mounted) {\n      return;\n    }\n    // if already dirty, either this or a parent is being tracked so we're good\n    if (this.isDirty) {\n      return;\n    }\n    this.isDirty = true;\n    this.ctx.world.stage.dirtyNodes.add(this);\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(value) {\n    if (this._active === value) {\n      return;\n    }\n    this._active = value;\n    if (!this._active && this.mounted) {\n      this.deactivate();\n    } else if (this._active && this.parent?.mounted) {\n      this.activate(this.parent.ctx);\n    } else if (this._active && !this.parent) {\n      this.activate(this.ctx);\n    }\n  }\n\n  clean() {\n    if (!this.isDirty) {\n      return;\n    }\n    let top: Node = this;\n    while (top.parent && top.parent.isDirty) {\n      top = top.parent;\n    }\n    let didTransform: boolean | undefined;\n    top.traverse((node: Node) => {\n      if (node.isTransformed) {\n        didTransform = true;\n      }\n      if (didTransform) {\n        node.updateTransform();\n      }\n      if (node.mounted) {\n        node.commit(didTransform || false);\n      }\n      node.isDirty = false;\n    });\n  }\n\n  mount() {\n    // called when transforms are ready and this thing should be added to the scene\n  }\n\n  commit(_didTransform: boolean) {\n    // called when dirty (either transform changed or node-specific)\n    // if the transform changed it should be moved in the same (this.matrixWorld)\n  }\n\n  unmount() {\n    // called when this thing should be removed from scene\n  }\n\n  updateTransform() {\n    if (this.isTransformed) {\n      this.matrix.compose(this.position as any, this.quaternion, this.scale as any);\n      this.isTransformed = false;\n    }\n    if (this.parent) {\n      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n    } else {\n      this.matrixWorld.copy(this.matrix);\n    }\n    // const children = this.children\n    // for (let i = 0, l = children.length; i < l; i++) {\n    //   children[i].project()\n    // }\n  }\n\n  traverse(callback: (node: Node) => void) {\n    callback(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const child = children[i];\n      if (child) {\n        child.traverse(callback);\n      }\n    }\n  }\n\n  clone(recursive?: boolean): this {\n    return new (this.constructor as any)().copy(this, recursive);\n  }\n\n  copy(source: Node, recursive?: boolean) {\n    this.id = source.id;\n    this.position.copy(source.position);\n    this.quaternion.copy(source.quaternion);\n    this.scale.copy(source.scale);\n    this._onPointerEnter = source._onPointerEnter;\n    this._onPointerLeave = source._onPointerLeave;\n    this._onPointerDown = source._onPointerDown;\n    this._onPointerUp = source._onPointerUp;\n    this._cursor = source._cursor;\n    this._active = source._active;\n    if (recursive) {\n      for (let i = 0; i < source.children.length; i++) {\n        const child = source.children[i];\n        if (child) {\n          this.add(child.clone(recursive));\n        }\n      }\n    }\n    return this;\n  }\n\n  get(id: string): Node | null {\n    if (this.id === id) {\n      return this;\n    }\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      if (child) {\n        const found = child.get(id);\n        if (found) {\n          return found;\n        }\n      }\n    }\n    return null;\n  }\n\n  // todo: getWorldQuaternion etc\n  getWorldPosition(vec3 = _v1) {\n    this.matrixWorld.decompose(vec3 as any, _q1, _v2 as any);\n    return vec3;\n  }\n\n  getWorldMatrix(mat = _m1) {\n    return mat.copy(this.matrixWorld);\n  }\n\n  getStats(recursive?: boolean, stats?: any): any {\n    if (!stats) {\n      stats = {\n        geometries: new Set(),\n        materials: new Set(),\n        triangles: 0,\n        textureBytes: 0,\n      };\n    }\n    this.applyStats(stats);\n    if (recursive) {\n      for (const child of this.children) {\n        child.getStats(recursive, stats);\n      }\n    }\n    return stats;\n  }\n\n  applyStats(_stats: any) {\n    // nodes should override this and add their stats\n  }\n\n  get onPointerEnter() {\n    return this._onPointerEnter;\n  }\n\n  set onPointerEnter(value) {\n    this._onPointerEnter = value;\n  }\n\n  get onPointerLeave() {\n    return this._onPointerLeave;\n  }\n\n  set onPointerLeave(value) {\n    this._onPointerLeave = value;\n  }\n\n  get onPointerDown() {\n    return this._onPointerDown;\n  }\n\n  set onPointerDown(value) {\n    this._onPointerDown = value;\n  }\n\n  get onPointerUp() {\n    return this._onPointerUp;\n  }\n\n  set onPointerUp(value) {\n    this._onPointerUp = value;\n  }\n\n  get cursor() {\n    return this._cursor;\n  }\n\n  set cursor(value) {\n    this._cursor = value;\n  }\n\n  getProxy() {\n    if (!this.proxy) {\n      const self = this;\n      const proxy = {\n        get id() {\n          return self.id;\n        },\n        set id(_value) {\n          throw new Error('Setting ID not currently supported');\n        },\n        get name() {\n          return self.name;\n        },\n        get position() {\n          return self.position;\n        },\n        set position(_value) {\n          throw new Error('Cannot replace node position');\n        },\n        get quaternion() {\n          return self.quaternion;\n        },\n        set quaternion(_value) {\n          throw new Error('Cannot replace node quaternion');\n        },\n        get rotation() {\n          return self.rotation;\n        },\n        set rotation(_value) {\n          throw new Error('Cannot replace node position');\n        },\n        get scale() {\n          return self.scale;\n        },\n        set scale(_value) {\n          throw new Error('Cannot replace node scale');\n        },\n        get matrixWorld() {\n          return self.matrixWorld;\n        },\n        get active() {\n          return self.active;\n        },\n        set active(value) {\n          self.active = value;\n        },\n        get parent() {\n          return self.parent?.getProxy();\n        },\n        set parent(_value) {\n          throw new Error('Cannot set parent directly');\n        },\n        get children() {\n          return self.children.map(child => {\n            return child.getProxy();\n          });\n        },\n        get(id: string) {\n          const node = self.get(id);\n          return node?.getProxy() || null;\n        },\n        getWorldMatrix(mat: any) {\n          return self.getWorldMatrix(mat);\n        },\n        add(pNode: any) {\n          const node = getRef(pNode);\n          self.add(node);\n          return this;\n        },\n        remove(pNode: any) {\n          const node = getRef(pNode);\n          self.remove(node);\n          return this;\n        },\n        traverse(callback: (node: any) => void) {\n          self.traverse((node: Node) => {\n            callback(node.getProxy());\n          });\n        },\n        // detach(node) {\n        //   self.detach(node)\n        // },\n        clone(recursive?: boolean) {\n          const node = self.clone(recursive);\n          return node.getProxy();\n        },\n        clean() {\n          self.clean();\n        },\n        get _ref() {\n          if (!secure.allowRef) {\n            return null;\n          }\n          return self;\n        },\n        get _isRef() {\n          return true;\n        },\n        get onPointerEnter() {\n          return self.onPointerEnter;\n        },\n        set onPointerEnter(value) {\n          self.onPointerEnter = value;\n        },\n        get onPointerLeave() {\n          return self.onPointerLeave;\n        },\n        set onPointerLeave(value) {\n          self.onPointerLeave = value;\n        },\n        get onPointerDown() {\n          return self.onPointerDown;\n        },\n        set onPointerDown(value) {\n          self.onPointerDown = value;\n        },\n        get onPointerUp() {\n          return self.onPointerUp;\n        },\n        set onPointerUp(value) {\n          self.onPointerUp = value;\n        },\n        get cursor() {\n          return self.cursor;\n        },\n        set cursor(value) {\n          self.cursor = value;\n        },\n      };\n      this.proxy = proxy;\n    }\n    return this.proxy;\n  }\n}\n", "import { THREE } from './three';\n\nexport function getTrianglesFromGeometry(geometry: any | null | undefined): number {\n  if (!geometry) {\n    return 0;\n  }\n  return geometry.index !== null ? geometry.index.count / 3 : geometry.attributes.position.count / 3;\n}\n", "import { THREE } from './three';\n\nconst slots = [\n  'alphaMap',\n  'aoMap',\n  'bumpMap',\n  'displacementMap',\n  'emissiveMap',\n  'envMap',\n  'lightMap',\n  'map',\n  'metalnessMap',\n  'normalMap',\n  'roughnessMap',\n];\n\nexport function getTextureBytesFromMaterial(material: any | null | undefined): number {\n  let bytes = 0;\n  if (material) {\n    const checked = new Set<string>();\n    for (const slot of slots) {\n      const texture = (material as any)[slot] as any;\n      if (texture && texture.image && !checked.has(texture.uuid)) {\n        checked.add(texture.uuid);\n        const image = texture.image as any;\n        bytes += image.width * image.height * 4;\n      }\n    }\n  }\n  return bytes;\n}\n", "import { THREE } from '../extras/three';\nimport { isBoolean, isNumber } from 'lodash-es';\n\nimport { Node, secureRef } from './Node';\nimport { getTrianglesFromGeometry } from '../extras/getTrianglesFromGeometry';\nimport { getTextureBytesFromMaterial } from '../extras/getTextureBytesFromMaterial';\n\nconst defaults = {\n  type: 'box',\n  width: 1,\n  height: 1,\n  depth: 1,\n  radius: 0.5,\n  geometry: null,\n  material: null,\n  linked: true,\n  castShadow: true,\n  receiveShadow: true,\n  visible: true, // DEPRECATED: use Node.active\n};\n\nconst types = ['box', 'sphere', 'geometry'];\n\nconst boxes = {};\nconst getBox = (width, height, depth) => {\n  const key = `${width},${height},${depth}`;\n  if (!boxes[key]) {\n    boxes[key] = new THREE.BoxGeometry(width, height, depth);\n  }\n  return boxes[key];\n};\n\nconst spheres = {};\nconst getSphere = radius => {\n  const key = radius;\n  if (!spheres[key]) {\n    spheres[key] = new THREE.SphereGeometry(radius, 16, 12);\n  }\n  return spheres[key];\n};\n\nexport class Mesh extends Node {\n  needsRebuild: boolean = false;\n  _geometry: any = null;\n  _type: string = defaults.type;\n  _visible: any = defaults.visible;\n  handle: any = null;\n  _material: any = null;\n  _linked: any = defaults.linked;\n  _castShadow: any = defaults.castShadow;\n  _receiveShadow: any = defaults.receiveShadow;\n  sItem: any = null;\n  _width: number = defaults.width;\n  _height: number = defaults.height;\n  _depth: number = defaults.depth;\n  _radius: number = defaults.radius;\n\n  constructor(data: any = {}) {\n    super(data);\n    this.name = 'mesh';\n\n    this.type = data.type;\n    this.width = data.width;\n    this.height = data.height;\n    this.depth = data.depth;\n    this.radius = data.radius;\n    this.geometry = data.geometry;\n    this.material = data.material;\n    this.linked = data.linked;\n    this.castShadow = data.castShadow;\n    this.receiveShadow = data.receiveShadow;\n    this.visible = data.visible;\n  }\n\n  mount() {\n    this.needsRebuild = false;\n    if (!this._geometry) {\n      return;\n    }\n    let geometry;\n    if (this._type === 'box') {\n      geometry = getBox(this._width, this._height, this._depth);\n    } else if (this._type === 'sphere') {\n      geometry = getSphere(this._radius);\n    } else if (this._type === 'geometry') {\n      geometry = this._geometry;\n    }\n    if (this._visible) {\n      this.handle = this.ctx.world.stage.insert({\n        geometry,\n        material: this._material,\n        linked: this._linked,\n        castShadow: this._castShadow,\n        receiveShadow: this._receiveShadow,\n        matrix: this.matrixWorld,\n        node: this,\n      });\n    } else {\n      this.sItem = {\n        matrix: this.matrixWorld,\n        geometry,\n        material: this._material,\n        getEntity: () => this.ctx.entity,\n        node: this,\n      };\n      this.ctx.world.stage.octree.insert(this.sItem);\n    }\n  }\n\n  commit(didMove) {\n    if (this.needsRebuild) {\n      this.unmount();\n      this.mount();\n      return;\n    }\n    if (didMove) {\n      if (this.handle) {\n        this.handle.move(this.matrixWorld);\n      }\n      if (this.sItem) {\n        this.ctx.world.stage.octree.move(this.sItem);\n      }\n    }\n  }\n\n  unmount() {\n    this.handle?.destroy();\n    if (this.sItem) {\n      this.ctx.world.stage.octree.remove(this.sItem);\n      this.sItem = null;\n    }\n    this.handle = null;\n  }\n\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this._type = source._type;\n    this._width = source._width;\n    this._height = source._height;\n    this._depth = source._depth;\n    this._radius = source._radius;\n    this._geometry = source._geometry;\n    this._material = source._material;\n    this._linked = source._linked;\n    this._castShadow = source._castShadow;\n    this._receiveShadow = source._receiveShadow;\n    this._visible = source._visible;\n    return this;\n  }\n\n  applyStats(stats) {\n    if (this._geometry && !stats.geometries.has(this._geometry.uuid)) {\n      stats.geometries.add(this._geometry.uuid);\n      stats.triangles += getTrianglesFromGeometry(this._geometry);\n    }\n    if (this._material && !stats.materials.has(this._material.uuid)) {\n      stats.materials.add(this._material.uuid);\n      stats.textureBytes += getTextureBytesFromMaterial(this._material);\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    if (value === undefined) {\n      value = defaults.type;\n    }\n    if (!isType(value)) {\n      throw new Error('[mesh] type invalid');\n    }\n    if (this._type === value) {\n      return;\n    }\n    this._type = value;\n    if (this.handle) {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    if (value === undefined) {\n      value = defaults.width;\n    }\n    if (!isNumber(value)) {\n      throw new Error('[mesh] width not a number');\n    }\n    if (this._width === value) {\n      return;\n    }\n    this._width = value;\n    if (this.handle && this._type === 'box') {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    if (value === undefined) {\n      value = defaults.height;\n    }\n    if (!isNumber(value)) {\n      throw new Error('[mesh] height not a number');\n    }\n    if (this._height === value) {\n      return;\n    }\n    this._height = value;\n    if (this.handle && this._type === 'box') {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  get depth() {\n    return this._depth;\n  }\n\n  set depth(value) {\n    if (value === undefined) {\n      value = defaults.depth;\n    }\n    if (!isNumber(value)) {\n      throw new Error('[mesh] depth not a number');\n    }\n    if (this._depth === value) {\n      return;\n    }\n    this._depth = value;\n    if (this.handle && this._type === 'box') {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  setSize(width, height, depth) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n\n  get radius() {\n    return this._radius;\n  }\n\n  set radius(value) {\n    if (value === undefined) {\n      value = defaults.radius;\n    }\n    if (!isNumber(value)) {\n      throw new Error('[mesh] radius not a number');\n    }\n    if (this._radius === value) {\n      return;\n    }\n    this._radius = value;\n    if (this.handle && this._type === 'sphere') {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  get geometry() {\n    return secureRef({}, () => this._geometry);\n  }\n\n  set geometry(value) {\n    if (value === undefined) {\n      value = defaults.geometry;\n    }\n    if (value && !value.isBufferGeometry) {\n      throw new Error('[mesh] geometry invalid');\n    }\n    if (this._geometry === value) {\n      return;\n    }\n    this._geometry = value;\n    this.needsRebuild = true;\n    this.setDirty();\n  }\n\n  get material() {\n    return this.handle?.material;\n  }\n\n  set material(value) {\n    if (value === undefined) {\n      value = defaults.material;\n    }\n    if (value && !value.isMaterial) {\n      throw new Error('[mesh] material invalid');\n    }\n    if (this._material === value) {\n      return;\n    }\n    this._material = value;\n    this.needsRebuild = true;\n    this.setDirty();\n  }\n\n  get linked() {\n    return this._linked;\n  }\n\n  set linked(value) {\n    if (value === undefined) {\n      value = defaults.linked;\n    }\n    if (!isBoolean(value)) {\n      throw new Error('[mesh] linked not a boolean');\n    }\n    if (this._linked === value) {\n      return;\n    }\n    this._linked = value;\n    this.needsRebuild = true;\n    this.setDirty();\n  }\n\n  get castShadow() {\n    return this._castShadow;\n  }\n\n  set castShadow(value) {\n    if (value === undefined) {\n      value = defaults.castShadow;\n    }\n    if (!isBoolean(value)) {\n      throw new Error('[mesh] castShadow not a boolean');\n    }\n    if (this._castShadow === value) {\n      return;\n    }\n    this._castShadow = value;\n    if (this.handle) {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  get receiveShadow() {\n    return this._receiveShadow;\n  }\n\n  set receiveShadow(value) {\n    if (value === undefined) {\n      value = defaults.receiveShadow;\n    }\n    if (!isBoolean(value)) {\n      throw new Error('[mesh] receiveShadow not a boolean');\n    }\n    if (this._receiveShadow === value) {\n      return;\n    }\n    this._receiveShadow = value;\n    if (this.handle) {\n      this.needsRebuild = true;\n      this.setDirty();\n    }\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(value) {\n    if (value === undefined) {\n      value = defaults.visible;\n    }\n    if (!isBoolean(value)) {\n      throw new Error('[mesh] visible not a boolean');\n    }\n    if (this._visible === value) {\n      return;\n    }\n    this._visible = value;\n    this.needsRebuild = true;\n    this.setDirty();\n  }\n\n  getProxy() {\n    if (!this.proxy) {\n      const self = this;\n      let proxy = {\n        get type() {\n          return self.type;\n        },\n        set type(value) {\n          self.type = value;\n        },\n        get width() {\n          return self.width;\n        },\n        set width(value) {\n          self.width = value;\n        },\n        get height() {\n          return self.height;\n        },\n        set height(value) {\n          self.height = value;\n        },\n        get depth() {\n          return self.depth;\n        },\n        set depth(value) {\n          self.depth = value;\n        },\n        setSize(width, height, depth) {\n          self.setSize(width, height, depth);\n        },\n        get radius() {\n          return self.radius;\n        },\n        set radius(value) {\n          self.radius = value;\n        },\n        get geometry() {\n          return self.geometry;\n        },\n        set geometry(value) {\n          self.geometry = value;\n        },\n        get material() {\n          return self.material;\n        },\n        set material(value) {\n          throw new Error('[mesh] set material not supported');\n          // if (!value) throw new Error('[mesh] material cannot be unset')\n          // self.ctx.world._allowMaterial = true\n          // self.material = value._ref\n          // self.ctx.world._allowMaterial = false\n          // self.needsRebuild = true\n          // self.setDirty()\n        },\n        get linked() {\n          return self.linked;\n        },\n        set linked(value) {\n          self.linked = value;\n        },\n        get castShadow() {\n          return self.castShadow;\n        },\n        set castShadow(value) {\n          self.castShadow = value;\n        },\n        get receiveShadow() {\n          return self.receiveShadow;\n        },\n        set receiveShadow(value) {\n          self.receiveShadow = value;\n        },\n        get visible() {\n          return self.visible;\n        },\n        set visible(value) {\n          self.visible = value;\n        },\n      };\n      proxy = Object.defineProperties(proxy, Object.getOwnPropertyDescriptors(super.getProxy())); // inherit Node properties\n      this.proxy = proxy;\n    }\n    return this.proxy;\n  }\n}\n\nfunction isType(value) {\n  return types.includes(value);\n}\n", "// Remove direct three imports - use THREE namespace instead\nimport { THREE } from '../../core/extras/three.js'\nimport { World } from '../../types'\nimport { System } from '../../core/systems/System'\nimport { RPGEntity } from '../entities/RPGEntity'\nimport { Mesh } from '../../core/nodes/Mesh'\nimport { Group } from '../../core/nodes/Group'\nimport { VisualTemplate, AnimationState, VisualComponent, VisualSystemConfig } from '../types/visual.types'\nimport visualTemplatesConfig from '../config/visuals/templates.json'\nimport testTemplatesConfig from '../config/visuals/test-templates.json'\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: VisualSystemConfig = {\n  enableShadows: true,\n  maxViewDistance: 100,\n  lodDistances: [20, 50, 80],\n  debug: false,\n}\n\n/**\n * System that manages visual representations for all RPG entities\n */\nexport class VisualRepresentationSystem extends System {\n  private config: VisualSystemConfig\n  private templates: Map<string, VisualTemplate> = new Map()\n  private entityVisuals: Map<string, VisualComponent> = new Map()\n  private activeAnimations: Map<string, AnimationState> = new Map()\n  private scene: THREE.Scene | null = null\n  private sceneRoot: THREE.Group | null = null\n\n  constructor(world: World) {\n    super(world)\n    this.config = DEFAULT_CONFIG\n  }\n\n  /**\n   * Initialize the system\n   */\n  async init(options: any): Promise<void> {\n    const visualOptions = options as VisualSystemConfig\n    this.config = { ...DEFAULT_CONFIG, ...visualOptions }\n\n    // Load visual templates from configuration\n    this.loadTemplates()\n\n    // Get scene reference from world stage\n    if (this.world.stage?.scene) {\n      this.scene = this.world.stage.scene as unknown as THREE.Scene\n\n      // Create a Three.js group for all visual entities (not a Hyperfy Group)\n      this.sceneRoot = new THREE.Group()\n      this.sceneRoot.name = 'rpg-visuals'\n\n      // Add root to scene\n      if (this.scene && typeof this.scene.add === 'function' && this.sceneRoot) {\n        this.scene.add(this.sceneRoot)\n      }\n    } else {\n      console.warn('[VisualRepresentationSystem] No scene available, visuals will not be rendered')\n    }\n\n    // Subscribe to world update loop\n    if (this.world.events) {\n      this.world.events.on('update', this.update.bind(this))\n    }\n\n    console.log('[VisualRepresentationSystem] Initialized with config:', this.config)\n  }\n\n  /**\n   * Load templates from configuration\n   */\n  private loadTemplates(): void {\n    // Check if we're in test mode (for visual testing)\n    const isTestMode =\n      process.env.NODE_ENV === 'test' || process.env.VISUAL_TEST === 'true' || process.env.BUN_ENV?.includes('test')\n\n    if (isTestMode) {\n      // Load test templates for visual validation\n      const testCategories = ['quest_entities']\n      for (const category of testCategories) {\n        const categoryTemplates = (testTemplatesConfig as any)[category]\n        if (categoryTemplates) {\n          for (const [key, template] of Object.entries(categoryTemplates)) {\n            this.templates.set(key, template as VisualTemplate)\n          }\n        }\n      }\n      console.log(\n        `[VisualRepresentationSystem] Loaded ${this.templates.size} TEST visual templates for visual validation`\n      )\n    } else {\n      // Load normal templates\n      const categories = ['items', 'npcs', 'containers', 'resources', 'special']\n      for (const category of categories) {\n        const categoryTemplates = (visualTemplatesConfig as any)[category]\n        if (categoryTemplates) {\n          for (const [key, template] of Object.entries(categoryTemplates)) {\n            this.templates.set(key, template as VisualTemplate)\n          }\n        }\n      }\n      console.log(`[VisualRepresentationSystem] Loaded ${this.templates.size} visual templates`)\n    }\n  }\n\n  /**\n   * Add visual representation for an entity (alias for createVisual)\n   */\n  addVisual(entity: RPGEntity, templateName?: string): void {\n    this.createVisual(entity, templateName)\n  }\n\n  /**\n   * Create visual representation for an entity\n   */\n  createVisual(entity: RPGEntity, templateName?: string): void {\n    try {\n      // Remove existing visual if any\n      this.removeVisual(entity.id || entity.data?.id)\n\n      const entityId = entity.id || entity.data?.id\n      if (!entityId) {\n        console.error('[VisualRepresentationSystem] Entity has no ID')\n        return\n      }\n\n      // Determine template\n      const template = this.getTemplate(entity, templateName)\n      if (!template) {\n        console.warn(`[VisualRepresentationSystem] No template found for entity ${entityId}`)\n        return\n      }\n\n      // For Hyperfy entities, modify the existing entity.node instead of creating new objects\n      if (entity.node) {\n        this.applyVisualToEntityNode(entity, template, templateName)\n      } else {\n        console.warn(`[VisualRepresentationSystem] Entity ${entityId} has no node for visual modification`)\n      }\n\n      // Start idle animation if available\n      if (template.animations && template.animations.includes('idle')) {\n        this.playAnimation(entityId, 'idle', true)\n      }\n\n      // Sync position with entity\n      this.syncVisualWithEntity(entityId, entity)\n\n      console.log(\n        `[VisualRepresentationSystem] Created visual for ${entityId} using template ${templateName || 'auto-detected'}`\n      )\n    } catch (error) {\n      console.error('[VisualRepresentationSystem] Error creating visual:', error)\n    }\n  }\n\n  /**\n   * Apply visual template to entity's existing Three.js node\n   */\n  private applyVisualToEntityNode(entity: RPGEntity, template: VisualTemplate, templateName?: string): void {\n    const entityId = entity.id || entity.data?.id\n\n    // Clear existing children from the node\n    while (entity.node.children.length > 0) {\n      entity.node.remove(entity.node.children[0])\n    }\n\n    // Create Three.js geometry based on template\n    let threeGeometry: THREE.BufferGeometry\n\n    switch (template.geometryType) {\n      case 'sphere':\n        threeGeometry = new THREE.SphereGeometry(template.size.width / 2, 16, 16)\n        break\n      case 'cylinder':\n        threeGeometry = new THREE.CylinderGeometry(\n          template.size.width / 2,\n          template.size.width / 2,\n          template.size.height,\n          16\n        )\n        break\n      default:\n        // Default to box\n        threeGeometry = new THREE.BoxGeometry(template.size.width, template.size.height, template.size.depth)\n    }\n\n    // Create material with template color\n    const material = new THREE.MeshStandardMaterial({\n      color: template.color || 0xff0000, // Default red if no color\n      metalness: template.material?.metalness || 0.1,\n      roughness: template.material?.roughness || 0.8,\n      opacity: template.material?.opacity || 1,\n      transparent: (template.material?.opacity || 1) < 1,\n    })\n\n    // Add emissive if specified\n    if (template.material?.emissive) {\n      material.emissive.setHex(template.material.emissive)\n    }\n\n    // Create mesh and add to entity node\n    const mesh = new THREE.Mesh(threeGeometry, material)\n    mesh.name = `${templateName || 'npc'}-mesh`\n\n    // Position the mesh relative to entity\n    if (entity.position || entity.data?.position) {\n      const pos = entity.position || entity.data.position\n      entity.node.position.set(pos.x || 0, pos.y || 0, pos.z || 0)\n    }\n\n    entity.node.add(mesh)\n\n    // Store visual info for reference\n    const visual: VisualComponent = {\n      mesh,\n      group: entity.node, // Reference the entity's node\n      template,\n      visible: true,\n      lodLevel: 0,\n    }\n\n    this.entityVisuals.set(entityId, visual)\n\n    console.log(`[VisualRepresentationSystem] Applied ${templateName || 'default'} template to entity ${entityId} node`)\n  }\n\n  /**\n   * Create visual component from template\n   */\n  private createVisualComponent(template: VisualTemplate, entity: RPGEntity): VisualComponent {\n    // Create group node for the entity\n    const group = new THREE.Group()\n    group.name = `visual-${entity.id || entity.data?.id}`\n\n    // Create Three.js geometry based on template\n    let threeGeometry: THREE.BufferGeometry\n    let meshType: 'box' | 'sphere' | 'geometry' = 'box'\n\n    switch (template.geometryType) {\n      case 'sphere':\n        threeGeometry = new THREE.SphereGeometry(template.size.width / 2, 16, 16)\n        meshType = 'sphere'\n        break\n      case 'cylinder':\n        // Use cylinder geometry but wrap in box mesh type\n        threeGeometry = new THREE.CylinderGeometry(\n          template.size.width / 2,\n          template.size.width / 2,\n          template.size.height,\n          16\n        )\n        meshType = 'geometry'\n        break\n      case 'cone':\n        // Use cone geometry but wrap in box mesh type\n        threeGeometry = new THREE.ConeGeometry(template.size.width / 2, template.size.height, 16)\n        meshType = 'geometry'\n        break\n      default:\n        threeGeometry = new THREE.BoxGeometry(template.size.width, template.size.height, template.size.depth)\n        meshType = 'box'\n    }\n\n    // Create material\n    const material = this.createMaterial(template)\n\n    // Create Three.js mesh\n    const threeMesh = new THREE.Mesh(threeGeometry, material)\n\n    // Configure shadows\n    if (this.config.enableShadows) {\n      threeMesh.castShadow = true\n      threeMesh.receiveShadow = true\n    }\n\n    // Create Hyperfy mesh wrapper\n    const mesh = new Mesh({\n      type: meshType,\n      width: template.size.width,\n      height: template.size.height,\n      depth: template.size.depth,\n      radius: meshType === 'sphere' ? template.size.width / 2 : undefined,\n      geometry: meshType === 'geometry' ? threeGeometry : undefined,\n      material: material as any,\n    })\n\n    // Store Three.js mesh reference\n    ;(mesh as any)._threeMesh = threeMesh\n\n    // Add Three.js mesh to group\n    ;(group as any).add(threeMesh)\n\n    return {\n      mesh,\n      group,\n      template,\n      visible: true,\n      lodLevel: 0,\n    }\n  }\n\n  /**\n   * Get template for entity\n   */\n  private getTemplate(entity: RPGEntity, templateName?: string): VisualTemplate | undefined {\n    // Use provided template name\n    if (templateName && this.templates.has(templateName)) {\n      return this.templates.get(templateName)\n    }\n\n    // Try to determine from entity type/name\n    const entityType = (entity.type || entity.data?.type || '').toLowerCase()\n    const entityName = (entity.name || entity.data?.name || '').toLowerCase()\n\n    // Check for direct matches\n    for (const [key, template] of this.templates) {\n      if (entityType.includes(key) || entityName.includes(key)) {\n        return template\n      }\n    }\n\n    // Check components\n    if (entity.getComponent) {\n      // Check item component\n      const itemComponent = entity.getComponent('item') as any\n      if (itemComponent?.itemType) {\n        const itemType = itemComponent.itemType.toLowerCase()\n        for (const [key, template] of this.templates) {\n          if (itemType.includes(key) || key.includes(itemType)) {\n            return template\n          }\n        }\n      }\n\n      // Check NPC component\n      const npcComponent = entity.getComponent('npc') as any\n      if (npcComponent?.name) {\n        const npcName = npcComponent.name.toLowerCase()\n        for (const [key, template] of this.templates) {\n          if (npcName.includes(key) || key.includes(npcName)) {\n            return template\n          }\n        }\n      }\n    }\n\n    // Return default template\n    return this.templates.get('default')\n  }\n\n  /**\n   * Create material from template\n   */\n  private createMaterial(template: VisualTemplate): THREE.Material {\n    const materialProps: any = {\n      color: new THREE.Color(template.color),\n      transparent: true,\n      opacity: template.material?.opacity ?? 0.9,\n    }\n\n    // Use appropriate material type\n    if (template.material?.metalness !== undefined || template.material?.roughness !== undefined) {\n      // Use standard material for PBR properties\n      return new THREE.MeshStandardMaterial({\n        ...materialProps,\n        metalness: template.material.metalness ?? 0,\n        roughness: template.material.roughness ?? 1,\n        emissive: template.material?.emissive ? new THREE.Color(template.material.emissive) : undefined,\n        emissiveIntensity: (template.material as any)?.emissiveIntensity ?? 0,\n      })\n    } else {\n      // Use basic material for simple visuals\n      return new THREE.MeshBasicMaterial(materialProps)\n    }\n  }\n\n  /**\n   * Sync visual position with entity\n   */\n  private syncVisualWithEntity(entityId: string, entity: RPGEntity): void {\n    const visual = this.entityVisuals.get(entityId)\n    if (!visual) {\n      return\n    }\n\n    const position = entity.position || entity.data?.position\n    if (position) {\n      visual.group.position.set(position.x || 0, position.y || 0, position.z || 0)\n    }\n\n    const rotation = entity.rotation || entity.data?.rotation\n    if (rotation) {\n      visual.group.rotation.set(rotation.x || 0, rotation.y || 0, rotation.z || 0)\n    }\n  }\n\n  /**\n   * Play animation for entity\n   */\n  playAnimation(entityId: string, animationType: string, loop: boolean = false, duration: number = 1000): void {\n    const visual = this.entityVisuals.get(entityId)\n    if (!visual) {\n      return\n    }\n\n    // Cancel current animation\n    this.stopAnimation(entityId)\n\n    // Create animation state\n    const animationState: AnimationState = {\n      entityId,\n      animationType,\n      startTime: Date.now(),\n      duration,\n      loop,\n      originalPosition: {\n        x: visual.group.position.x,\n        y: visual.group.position.y,\n        z: visual.group.position.z,\n      },\n      originalRotation: {\n        x: visual.group.rotation.x,\n        y: visual.group.rotation.y,\n        z: visual.group.rotation.z,\n      },\n    }\n\n    this.activeAnimations.set(entityId, animationState)\n  }\n\n  /**\n   * Stop animation for entity\n   */\n  stopAnimation(entityId: string): void {\n    const animation = this.activeAnimations.get(entityId)\n    if (!animation) {\n      return\n    }\n\n    const visual = this.entityVisuals.get(entityId)\n    if (visual && animation.originalPosition && animation.originalRotation) {\n      // Reset to original position/rotation\n      visual.group.position.set(\n        animation.originalPosition.x,\n        animation.originalPosition.y,\n        animation.originalPosition.z\n      )\n      visual.group.rotation.set(\n        animation.originalRotation.x,\n        animation.originalRotation.y,\n        animation.originalRotation.z\n      )\n    }\n\n    this.activeAnimations.delete(entityId)\n  }\n\n  /**\n   * Update animations and sync with entities\n   */\n  update(_delta: number): void {\n    const currentTime = Date.now()\n\n    // Update animations\n    for (const [entityId, animation] of this.activeAnimations) {\n      const visual = this.entityVisuals.get(entityId)\n      if (!visual) {\n        this.activeAnimations.delete(entityId)\n        continue\n      }\n\n      const elapsed = currentTime - animation.startTime\n      const progress = Math.min(elapsed / animation.duration, 1)\n\n      // Apply animation\n      this.applyAnimation(visual, animation, progress)\n\n      // Check if animation is complete\n      if (progress >= 1) {\n        if (animation.loop) {\n          animation.startTime = currentTime\n        } else {\n          this.stopAnimation(entityId)\n        }\n      }\n    }\n\n    // Sync visuals with entity positions\n    for (const [entityId, _visual] of this.entityVisuals) {\n      const entity = (this.world.entities as any)?.items?.get(entityId)\n      if (entity) {\n        this.syncVisualWithEntity(entityId, entity)\n      }\n    }\n  }\n\n  /**\n   * Apply animation to visual\n   */\n  private applyAnimation(visual: VisualComponent, animation: AnimationState, progress: number): void {\n    const group = visual.group\n    const origPos = animation.originalPosition!\n    const origRot = animation.originalRotation!\n\n    switch (animation.animationType) {\n      case 'walk':\n        group.position.y = origPos.y + Math.sin(progress * Math.PI * 4) * 0.1\n        group.position.x = origPos.x + Math.sin(progress * Math.PI * 2) * 0.05\n        break\n\n      case 'attack':\n      case 'swing_down':\n        group.rotation.x = origRot.x - Math.sin(progress * Math.PI) * 0.5\n        group.position.y = origPos.y - Math.sin(progress * Math.PI) * 0.2\n        break\n\n      case 'die':\n        group.rotation.z = origRot.z + (progress * Math.PI) / 2\n        group.position.y = origPos.y - progress * 0.5\n        this.setOpacity(visual, 1 - progress * 0.5)\n        break\n\n      case 'open':\n        group.rotation.x = origRot.x - progress * 0.3\n        break\n\n      case 'close':\n        group.rotation.x = origRot.x + (1 - progress) * 0.3\n        break\n\n      case 'pulse':\n        const scale = 1 + Math.sin(progress * Math.PI * 2) * 0.2\n        group.scale.set(scale, scale, scale)\n        break\n\n      case 'rotate':\n        group.rotation.y = origRot.y + progress * Math.PI * 2\n        break\n\n      case 'bounce':\n        group.position.y = origPos.y + Math.abs(Math.sin(progress * Math.PI * 2)) * 0.3\n        break\n\n      case 'shimmer':\n        const shimmer = 0.7 + Math.sin(progress * Math.PI * 4) * 0.3\n        this.setOpacity(visual, shimmer)\n        break\n\n      case 'sparkle':\n        const sparkleScale = 1 + Math.sin(progress * Math.PI * 8) * 0.1\n        group.scale.set(sparkleScale, sparkleScale, sparkleScale)\n        group.rotation.y = origRot.y + progress * Math.PI\n        break\n\n      case 'idle':\n        group.position.y = origPos.y + Math.sin(progress * Math.PI * 2) * 0.05\n        break\n\n      case 'sway':\n        group.rotation.z = origRot.z + Math.sin(progress * Math.PI * 2) * 0.1\n        break\n\n      case 'ripple':\n        const rippleScale = 1 + Math.sin(progress * Math.PI * 4) * 0.1\n        group.scale.set(rippleScale, 1, rippleScale)\n        break\n\n      // Add more animation types as needed\n      default:\n        break\n    }\n  }\n\n  /**\n   * Set opacity for visual\n   */\n  private setOpacity(visual: VisualComponent, opacity: number): void {\n    const threeMesh = (visual.mesh as any)._threeMesh\n    if (threeMesh?.material) {\n      threeMesh.material.opacity = Math.max(0, Math.min(1, opacity))\n    }\n  }\n\n  /**\n   * Remove visual representation\n   */\n  removeVisual(entityId: string): void {\n    if (!entityId) {\n      return\n    }\n\n    this.stopAnimation(entityId)\n\n    const visual = this.entityVisuals.get(entityId)\n    if (visual) {\n      // Remove from scene\n      if (this.sceneRoot && visual.group.parent) {\n        this.sceneRoot.remove(visual.group)\n      }\n\n      // Dispose of Three.js resources\n      const threeMesh = (visual.mesh as any)._threeMesh\n      if (threeMesh) {\n        if (threeMesh.geometry) {\n          threeMesh.geometry.dispose()\n        }\n        if (threeMesh.material) {\n          if (Array.isArray(threeMesh.material)) {\n            threeMesh.material.forEach((m: any) => m.dispose())\n          } else {\n            threeMesh.material.dispose()\n          }\n        }\n      }\n\n      // Deactivate hyperfy nodes\n      if (visual.group.deactivate) {\n        visual.group.deactivate()\n      }\n\n      this.entityVisuals.delete(entityId)\n    }\n  }\n\n  /**\n   * Get visual for entity\n   */\n  getVisual(entityId: string): VisualComponent | undefined {\n    return this.entityVisuals.get(entityId)\n  }\n\n  /**\n   * Clean up\n   */\n  override destroy(): void {\n    // Unsubscribe from events\n    if (this.world.events) {\n      this.world.events.off('update', this.update.bind(this))\n    }\n\n    // Remove all visuals\n    for (const entityId of Array.from(this.entityVisuals.keys())) {\n      this.removeVisual(entityId)\n    }\n\n    // Remove scene root\n    if (this.sceneRoot && this.scene) {\n      this.scene.remove(this.sceneRoot)\n      // Three.js groups don't have deactivate method - just remove from scene\n    }\n\n    this.entityVisuals.clear()\n    this.activeAnimations.clear()\n    this.templates.clear()\n\n    super.destroy()\n  }\n}\n", "import { System } from '../../core/systems/System'\nimport type { World } from '../../types'\nimport type { Vector3 } from '../types'\nimport { RPGEntity } from '../entities/RPGEntity'\nimport { NavigationSystem } from './NavigationSystem'\nimport { QuestSystem } from './QuestSystem'\n\nexport interface AgentAction {\n  type: 'move' | 'interact' | 'pickup' | 'attack' | 'wait'\n  target?: Vector3 | string // Position or entity ID\n  duration?: number // For wait actions\n  description: string\n  completed: boolean\n  callback?: () => void\n  startTime?: number\n  navigationStarted?: boolean\n}\n\nexport interface AgentTask {\n  id: string\n  name: string\n  actions: AgentAction[]\n  currentAction: number\n  completed: boolean\n  callback?: () => void\n}\n\n/**\n * Automated agent player system for testing quests\n * Creates and controls an AI player that can perform quest actions\n */\nexport class AgentPlayerSystem extends System {\n  private testModeTimeout?: NodeJS.Timeout\n  private readonly TEST_MODE_DURATION = 60000 // 1 minute for testing\n\n  private agent: RPGEntity | null = null\n  private navigationSystem: NavigationSystem | null = null\n  private questSystem: QuestSystem | null = null\n  private currentTask: AgentTask | null = null\n  private actionTimer: number = 0\n  private updateInterval: NodeJS.Timeout | null = null\n\n  // Quest locations (simple coordinates for testing)\n  private readonly LOCATIONS = {\n    SPAWN: { x: 0, y: 0, z: 0 },\n    QUEST_NPC: { x: 0, y: 0, z: 5 },\n    SWORD: { x: 0, y: 0, z: 0 },\n    GOBLIN_AREA: { x: 5, y: 0, z: 5 },\n  }\n\n  constructor(world: World) {\n    super(world)\n  }\n\n  override async init(_options: any): Promise<void> {\n    console.log('[AgentPlayerSystem] Initializing...')\n\n    // Get required systems\n    this.navigationSystem = (this.world as any).getSystem?.('navigation')\n    this.questSystem = (this.world as any).getSystem?.('quest')\n\n    if (!this.navigationSystem) {\n      console.warn('[AgentPlayerSystem] Navigation system not found')\n    }\n    if (!this.questSystem) {\n      console.warn('[AgentPlayerSystem] Quest system not found')\n    }\n\n    // Create agent player after a delay to ensure other systems are ready\n    // Set test mode timeout\n    if (process.env.TEST_MODE === 'true') {\n      this.testModeTimeout = setTimeout(() => {\n        console.log('[AgentPlayerSystem] Test mode timeout reached, shutting down...')\n        this.destroy()\n        process.exit(0)\n      }, this.TEST_MODE_DURATION)\n    }\n    \n    setTimeout(() => {\n      console.log('[AgentPlayerSystem] Creating agent player...')\n      this.createAgentPlayer()\n      console.log('[AgentPlayerSystem] Starting quest demo...')\n      this.startQuestDemo()\n\n      // Start continuous update loop\n      setTimeout(() => {\n        console.log('[AgentPlayerSystem] Starting continuous update loop...')\n        this.startUpdateLoop()\n      }, 1000)\n    }, 3000)\n  }\n\n  /**\n   * Start the continuous update loop for agent actions\n   */\n  private startUpdateLoop(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval)\n    }\n\n    // Update every 100ms (10 FPS)\n    this.updateInterval = setInterval(() => {\n      this.fixedUpdate(100) // 100ms delta\n    }, 100)\n\n    console.log('[AgentPlayerSystem] Update loop started')\n  }\n\n  /**\n   * Create the automated agent player\n   */\n  private createAgentPlayer(): void {\n    const agentId = `agent_player_${Date.now()}`\n\n    // Create agent entity\n    this.agent = new RPGEntity(this.world, 'player', {\n      id: agentId,\n      type: 'player',\n      name: 'Agent Player',\n      position: this.LOCATIONS.SPAWN,\n      isAgent: true,\n    })\n\n    // Add player components\n    this.agent.components.set('stats', {\n      type: 'stats',\n      hitpoints: { current: 100, max: 100, level: 10, xp: 1200 },\n      attack: { level: 5, xp: 300 },\n      strength: { level: 5, xp: 300 },\n      defense: { level: 5, xp: 300 },\n      combatLevel: 5,\n      totalLevel: 20,\n    } as any)\n\n    this.agent.components.set('inventory', {\n      type: 'inventory',\n      items: new Map(),\n      capacity: 28,\n      gold: 0,\n    } as any)\n\n    this.agent.components.set('movement', {\n      type: 'movement',\n      position: this.LOCATIONS.SPAWN,\n      moveSpeed: 3,\n      isMoving: false,\n      canMove: true,\n    } as any)\n\n    // Add to world\n    if ((this.world as any).entities?.items) {\n      ;(this.world as any).entities.items.set(agentId, this.agent)\n    } else {\n      ;(this.world as any).entities = new Map()\n      ;(this.world as any).entities.set(agentId, this.agent)\n    }\n\n    // Create visual representation\n    const visualSystem = (this.world as any).getSystem?.('visualRepresentation')\n    if (visualSystem) {\n      visualSystem.createVisual(this.agent, 'player')\n    }\n\n    console.log(`[AgentPlayerSystem] Created agent player at spawn ${JSON.stringify(this.LOCATIONS.SPAWN)}`)\n  }\n\n  /**\n   * Start the quest demonstration\n   */\n  private startQuestDemo(): void {\n    if (!this.agent) {\n      console.error('[AgentPlayerSystem] No agent player created')\n      return\n    }\n\n    console.log('[AgentPlayerSystem] Starting quest demonstration...')\n\n    // Create quest completion task\n    const questTask: AgentTask = {\n      id: 'complete_goblin_quest',\n      name: 'Complete Kill Goblin Quest',\n      currentAction: 0,\n      completed: false,\n      actions: [\n        {\n          type: 'wait',\n          duration: 2000,\n          description: 'Wait for world to stabilize',\n          completed: false,\n        },\n        {\n          type: 'move',\n          target: this.LOCATIONS.QUEST_NPC,\n          description: 'Walk to Quest NPC',\n          completed: false,\n          callback: () => console.log('[Agent] Arrived at Quest NPC'),\n        },\n        {\n          type: 'interact',\n          target: 'quest_giver_1',\n          description: 'Talk to Quest NPC and accept quest',\n          completed: false,\n          callback: () => console.log('[Agent] Accepted quest'),\n        },\n        {\n          type: 'move',\n          target: this.LOCATIONS.SWORD,\n          description: 'Walk to sword location',\n          completed: false,\n          callback: () => console.log('[Agent] Arrived at sword'),\n        },\n        {\n          type: 'pickup',\n          target: 'sword',\n          description: 'Pick up sword',\n          completed: false,\n          callback: () => console.log('[Agent] Picked up sword'),\n        },\n        {\n          type: 'move',\n          target: this.LOCATIONS.GOBLIN_AREA,\n          description: 'Walk to goblin area',\n          completed: false,\n          callback: () => console.log('[Agent] Arrived at goblin area'),\n        },\n        {\n          type: 'attack',\n          target: 'goblin',\n          description: 'Attack and kill goblin',\n          completed: false,\n          callback: () => console.log('[Agent] Killed goblin'),\n        },\n        {\n          type: 'move',\n          target: this.LOCATIONS.QUEST_NPC,\n          description: 'Return to Quest NPC',\n          completed: false,\n          callback: () => console.log('[Agent] Returned to Quest NPC'),\n        },\n        {\n          type: 'interact',\n          target: 'quest_giver_1',\n          description: 'Complete quest with NPC',\n          completed: false,\n          callback: () => console.log('[Agent] Completed quest!'),\n        },\n      ],\n    }\n\n    this.currentTask = questTask\n    console.log('[AgentPlayerSystem] Quest task created with', questTask.actions.length, 'actions')\n  }\n\n  /**\n   * Update agent behavior\n   */\n  override fixedUpdate(delta: number): void {\n    if (!this.agent || !this.currentTask || this.currentTask.completed) {\n      return\n    }\n\n    this.actionTimer += delta\n\n    // Execute current action\n    const currentAction = this.currentTask.actions[this.currentTask.currentAction]\n    if (!currentAction) {\n      return\n    }\n\n    if (currentAction.completed) {\n      this.moveToNextAction()\n      return\n    }\n\n    // Add periodic status logging\n    if (this.actionTimer % 5000 < delta) {\n      // Every 5 seconds\n      console.log(\n        `[AgentPlayerSystem] Current action: ${currentAction.description} (${this.currentTask.currentAction + 1}/${this.currentTask.actions.length})`\n      )\n    }\n\n    this.executeAction(currentAction, delta)\n  }\n\n  /**\n   * Execute a specific action\n   */\n  private executeAction(action: AgentAction, delta: number): void {\n    switch (action.type) {\n      case 'wait':\n        this.executeWaitAction(action, delta)\n        break\n      case 'move':\n        this.executeMoveAction(action)\n        break\n      case 'interact':\n        this.executeInteractAction(action)\n        break\n      case 'pickup':\n        this.executePickupAction(action)\n        break\n      case 'attack':\n        this.executeAttackAction(action)\n        break\n    }\n  }\n\n  /**\n   * Execute wait action\n   */\n  private executeWaitAction(action: AgentAction, delta: number): void {\n    if (!action.duration) {\n      action.completed = true\n      return\n    }\n\n    action.duration -= delta\n    if (action.duration <= 0) {\n      action.completed = true\n      console.log(`[Agent] ${action.description} - completed`)\n      if (action.callback) {\n        action.callback()\n      }\n    }\n  }\n\n  /**\n   * Execute move action\n   */\n  private executeMoveAction(action: AgentAction): void {\n    if (!this.navigationSystem || !this.agent) {\n      console.error('[Agent] No navigation system or agent available')\n      action.completed = true\n      return\n    }\n\n    // Check if already navigating - validate agent ID first\n    const agentId = this.agent.id || this.agent.data?.id\n    if (!agentId) {\n      console.error('[Agent] Cannot check navigation - agent ID is undefined')\n      action.completed = true\n      return\n    }\n\n    // Add timeout to prevent infinite loops\n    if (!action.startTime) {\n      action.startTime = Date.now()\n    }\n\n    const elapsedTime = Date.now() - action.startTime\n    if (elapsedTime > 30000) { // 30 second timeout\n      console.warn(`[Agent] Navigation timeout for action: ${action.description}`)\n      action.completed = true\n      if (action.callback) {\n        action.callback()\n      }\n      return\n    }\n\n    // Check if we're close enough to the target (within 1 unit)\n    const target = action.target as Vector3\n    const agentPos = this.agent.position || (this.agent.components.get('movement') as any)?.position\n    if (agentPos) {\n      const distance = Math.sqrt(\n        Math.pow(agentPos.x - target.x, 2) + \n        Math.pow(agentPos.z - target.z, 2)\n      )\n      \n      if (distance < 1) {\n        console.log(`[Agent] Reached destination for: ${action.description}`)\n        action.completed = true\n        if (action.callback) {\n          action.callback()\n        }\n        return\n      }\n    }\n\n    // Check if navigation system reports we're navigating\n    const isNavigating = this.navigationSystem.isNavigating(agentId)\n    \n    // Start navigation if not started or if navigation stopped\n    if (!action.navigationStarted || !isNavigating) {\n      console.log(`[Agent] ${action.description} - starting/restarting navigation to [${target.x}, ${target.y}, ${target.z}]`)\n      \n      action.navigationStarted = true\n      \n      // Try to navigate\n      try {\n        this.navigationSystem.navigateTo({\n          _entityId: agentId,\n          destination: target,\n          speed: 3,\n          callback: () => {\n            console.log(`[Agent] Navigation callback triggered for: ${action.description}`)\n            action.completed = true\n            if (action.callback) {\n              action.callback()\n            }\n          }\n        })\n      } catch (error) {\n        console.error(`[Agent] Failed to start navigation for: ${action.description}`, error)\n        action.completed = true\n        if (action.callback) {\n          action.callback()\n        }\n      }\n    }\n  }\n\n  /**\n   * Execute interact action\n   */\n  private executeInteractAction(action: AgentAction): void {\n    console.log(`[Agent] ${action.description} - simulating interaction`)\n\n    // Simulate quest interaction\n    if (this.questSystem && this.agent && action.target === 'quest_giver_1') {\n      const agentId = this.agent.id || this.agent.data?.id\n\n      if (agentId) {\n        // Try to start a quest\n        const availableQuests = this.questSystem.getAvailableQuests(agentId)\n        const cookQuest = availableQuests.find(q => q.id === 'cooks_assistant')\n\n        if (cookQuest) {\n          console.log('[Agent] Starting quest: cooks_assistant')\n          this.questSystem.startQuest(agentId, 'cooks_assistant')\n        } else {\n          console.log('[Agent] No available quests from this NPC')\n        }\n      }\n    }\n\n    action.completed = true\n    if (action.callback) {\n      action.callback()\n    }\n  }\n\n  /**\n   * Execute pickup action\n   */\n  private executePickupAction(action: AgentAction): void {\n    console.log(`[Agent] ${action.description} - looking for item`)\n\n    // Find nearest sword item\n    const entities = (this.world as any).entities?.items || new Map()\n    let swordEntity = null\n\n    for (const [_id, entity] of entities) {\n      if (entity.data?.type === 'item' && entity.data?.itemType === 'sword') {\n        swordEntity = entity\n        break\n      }\n    }\n\n    if (swordEntity) {\n      console.log('[Agent] Found sword, picking up')\n      // Simulate pickup by adding to inventory\n      const inventory = this.agent?.getComponent('inventory') as any\n      if (inventory) {\n        inventory.items.set('sword', { itemId: 1001, name: 'Bronze Sword', quantity: 1 })\n        console.log('[Agent] Added sword to inventory')\n      }\n\n      // Remove from world (simulate pickup)\n      entities.delete((swordEntity as any).id || (swordEntity as any).data?.id)\n      console.log('[Agent] Removed sword from world')\n    } else {\n      console.log('[Agent] No sword found nearby')\n    }\n\n    action.completed = true\n    if (action.callback) {\n      action.callback()\n    }\n  }\n\n  /**\n   * Execute attack action\n   */\n  private executeAttackAction(action: AgentAction): void {\n    console.log(`[Agent] ${action.description} - looking for goblin`)\n\n    // Find nearest goblin\n    const entities = (this.world as any).entities?.items || new Map()\n    let goblinEntity = null\n\n    for (const [_id, entity] of entities) {\n      const npcComponent = entity.getComponent?.('npc')\n      if (npcComponent && (npcComponent.npcId === 1 || npcComponent.name?.toLowerCase().includes('goblin'))) {\n        goblinEntity = entity as any\n        break\n      }\n    }\n\n    if (goblinEntity) {\n      console.log('[Agent] Found goblin, attacking!')\n\n      // Simulate combat and goblin death\n      setTimeout(() => {\n        // Remove goblin from world\n        entities.delete((goblinEntity as any).id || (goblinEntity as any).data?.id)\n        console.log('[Agent] Goblin defeated!')\n\n        // Add loot to inventory\n        const inventory = this.agent?.getComponent('inventory') as any\n        if (inventory) {\n          inventory.gold = (inventory.gold || 0) + 25\n          console.log('[Agent] Gained 25 gold from goblin')\n        }\n\n        action.completed = true\n        if (action.callback) {\n          action.callback()\n        }\n      }, 2000) // 2 second combat\n    } else {\n      console.log('[Agent] No goblin found, retrying...')\n      // Don't mark as completed, will retry\n    }\n  }\n\n  /**\n   * Move to next action in task\n   */\n  private moveToNextAction(): void {\n    if (!this.currentTask) {\n      return\n    }\n\n    this.currentTask.currentAction++\n\n    if (this.currentTask.currentAction >= this.currentTask.actions.length) {\n      this.currentTask.completed = true\n      console.log(`[AgentPlayerSystem] Task \"${this.currentTask.name}\" completed!`)\n\n      if (this.currentTask.callback) {\n        this.currentTask.callback()\n      }\n    } else {\n      const nextAction = this.currentTask.actions[this.currentTask.currentAction]\n      console.log(`[AgentPlayerSystem] Starting next action: ${nextAction.description}`)\n    }\n  }\n\n  /**\n   * Get current task status\n   */\n  getTaskStatus(): { task: string; action: string; progress: string } | null {\n    if (!this.currentTask) {\n      return null\n    }\n\n    const currentAction = this.currentTask.actions[this.currentTask.currentAction]\n    const progress = `${this.currentTask.currentAction + 1}/${this.currentTask.actions.length}`\n\n    return {\n      task: this.currentTask.name,\n      action: currentAction?.description || 'None',\n      progress,\n    }\n  }\n\n  override destroy(): void {\n    // Clear test mode timeout\n    if (this.testModeTimeout) {\n      clearTimeout(this.testModeTimeout)\n      this.testModeTimeout = undefined\n    }\n\n    // Stop update loop\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval)\n      this.updateInterval = null\n    }\n\n    // Clean up agent\n    if (this.agent) {\n      const agentId = this.agent.id || this.agent.data?.id\n      const entities = (this.world as any).entities?.items\n      if (entities) {\n        entities.delete(agentId)\n      }\n    }\n\n    super.destroy()\n  }\n}\n", "/**\r\n * Item Spawn System - Manages ground items and their persistence\r\n * Handles item drops, despawn timers, and pickup\r\n */\r\n\r\nimport { System } from '../../core/systems/System'\r\nimport type { World, Entity } from '../../types'\r\nimport type { Vector3 } from '../types'\r\n\r\nexport interface GroundItem {\r\n  id: string\r\n  itemId: string | number\r\n  quantity: number\r\n  position: Vector3\r\n  droppedBy?: string // Player ID who dropped it\r\n  droppedAt: number\r\n  despawnAt: number\r\n  visibleTo: string[] // Players who can see this item (empty = everyone)\r\n}\r\n\r\nexport interface ItemSpawnComponent {\r\n  type: 'item_spawn'\r\n  items: Map<string, GroundItem>\r\n}\r\n\r\nexport class ItemSpawnSystem extends System {\r\n  private groundItems: Map<string, GroundItem> = new Map()\r\n  private itemCounter: number = 0\r\n  private readonly DEFAULT_DESPAWN_TIME = 300000 // 5 minutes\r\n  private readonly PLAYER_DROP_VISIBLE_TIME = 60000 // 1 minute private to dropper\r\n  \r\n  // Persistence\r\n  private pendingSaves: boolean = false\r\n  private saveTimer?: NodeJS.Timeout\r\n\r\n  constructor(world: World) {\r\n    super(world)\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    console.log('[ItemSpawnSystem] Initializing...')\r\n\r\n    // Listen for item events\r\n    this.world.events.on('item:drop', this.handleItemDrop.bind(this))\r\n    this.world.events.on('item:pickup', this.handleItemPickup.bind(this))\r\n    this.world.events.on('player:death', this.handlePlayerDeath.bind(this))\r\n    this.world.events.on('world:shutdown', this.handleShutdown.bind(this))\r\n\r\n    // Start auto-save timer\r\n    this.startAutoSave()\r\n    \r\n    // Load existing ground items\r\n    await this.loadGroundItems()\r\n\r\n    console.log('[ItemSpawnSystem] Initialized with ground item management')\r\n  }\r\n\r\n  /**\r\n   * Start auto-save timer\r\n   */\r\n  private startAutoSave(): void {\r\n    // Save ground items every 30 seconds\r\n    this.saveTimer = setInterval(() => {\r\n      if (this.pendingSaves) {\r\n        this.saveGroundItems()\r\n      }\r\n    }, 30000)\r\n  }\r\n\r\n  /**\r\n   * Handle world shutdown\r\n   */\r\n  private async handleShutdown(): Promise<void> {\r\n    // Save immediately on shutdown\r\n    await this.saveGroundItems()\r\n    if (this.saveTimer) {\r\n      clearInterval(this.saveTimer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load ground items from persistence\r\n   */\r\n  private async loadGroundItems(): Promise<void> {\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (!persistence) return\r\n\r\n    try {\r\n      const items = await persistence.loadWorldItems()\r\n      \r\n      for (const itemData of items) {\r\n        const groundItem: GroundItem = {\r\n          id: itemData.itemId,\r\n          itemId: itemData.itemType,\r\n          quantity: itemData.quantity,\r\n          position: JSON.parse(itemData.position),\r\n          droppedBy: itemData.droppedBy || undefined,\r\n          droppedAt: new Date(itemData.droppedAt).getTime(),\r\n          despawnAt: new Date(itemData.despawnAt).getTime(),\r\n          visibleTo: itemData.visibleTo ? JSON.parse(itemData.visibleTo) : []\r\n        }\r\n        \r\n        // Only load if not expired\r\n        if (groundItem.despawnAt > Date.now()) {\r\n          this.groundItems.set(groundItem.id, groundItem)\r\n        }\r\n      }\r\n\r\n      console.log(`[ItemSpawnSystem] Loaded ${this.groundItems.size} ground items`)\r\n    } catch (error) {\r\n      console.error(`[ItemSpawnSystem] Failed to load ground items:`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save ground items to persistence\r\n   */\r\n  private async saveGroundItems(): Promise<void> {\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (!persistence) return\r\n\r\n    try {\r\n      const items: any[] = []\r\n      \r\n      for (const [id, item] of this.groundItems) {\r\n        items.push({\r\n          itemId: id,\r\n          worldId: (this.world as any).id || 'default',\r\n          itemType: item.itemId.toString(),\r\n          quantity: item.quantity,\r\n          position: JSON.stringify(item.position),\r\n          droppedBy: item.droppedBy,\r\n          droppedAt: new Date(item.droppedAt).toISOString(),\r\n          despawnAt: new Date(item.despawnAt).toISOString(),\r\n          visibleTo: JSON.stringify(item.visibleTo)\r\n        })\r\n      }\r\n\r\n      await persistence.saveWorldItems(items)\r\n      this.pendingSaves = false\r\n      console.log(`[ItemSpawnSystem] Saved ${items.length} ground items`)\r\n    } catch (error) {\r\n      console.error(`[ItemSpawnSystem] Failed to save ground items:`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark for save\r\n   */\r\n  private markForSave(): void {\r\n    this.pendingSaves = true\r\n  }\r\n\r\n  private handleItemDrop(data: any): void {\r\n    const { playerId, itemId, quantity, position } = data\r\n    this.dropItem(playerId, itemId, quantity, position)\r\n  }\r\n\r\n  private handleItemPickup(data: any): void {\r\n    const { playerId, groundItemId } = data\r\n    this.pickupItem(playerId, groundItemId)\r\n  }\r\n\r\n  private handlePlayerDeath(data: any): void {\r\n    const { playerId, position, items } = data\r\n    // Drop all items on death\r\n    if (items && Array.isArray(items)) {\r\n      for (const item of items) {\r\n        this.dropItem(playerId, item.itemId, item.quantity, position, false)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop an item on the ground\r\n   */\r\n  public dropItem(\r\n    droppedBy: string, \r\n    itemId: string | number, \r\n    quantity: number, \r\n    position: Vector3,\r\n    privateToDropper: boolean = true\r\n  ): string {\r\n    const groundItemId = `ground_item_${this.itemCounter++}_${Date.now()}`\r\n    const now = Date.now()\r\n\r\n    const groundItem: GroundItem = {\r\n      id: groundItemId,\r\n      itemId,\r\n      quantity,\r\n      position: { ...position }, // Clone position\r\n      droppedBy,\r\n      droppedAt: now,\r\n      despawnAt: now + this.DEFAULT_DESPAWN_TIME,\r\n      visibleTo: privateToDropper ? [droppedBy] : []\r\n    }\r\n\r\n    this.groundItems.set(groundItemId, groundItem)\r\n    this.markForSave()\r\n\r\n    // Schedule visibility change if private\r\n    if (privateToDropper) {\r\n      setTimeout(() => {\r\n        const item = this.groundItems.get(groundItemId)\r\n        if (item) {\r\n          item.visibleTo = [] // Make visible to all\r\n          this.markForSave()\r\n          this.world.events.emit('item:visibility_changed', {\r\n            groundItemId,\r\n            visibleToAll: true\r\n          })\r\n        }\r\n      }, this.PLAYER_DROP_VISIBLE_TIME)\r\n    }\r\n\r\n    // Emit drop event\r\n    this.world.events.emit('item:dropped', {\r\n      groundItemId,\r\n      itemId,\r\n      quantity,\r\n      position,\r\n      droppedBy,\r\n      visibleTo: groundItem.visibleTo\r\n    })\r\n\r\n    return groundItemId\r\n  }\r\n\r\n  /**\r\n   * Pickup a ground item\r\n   */\r\n  public pickupItem(playerId: string, groundItemId: string): boolean {\r\n    const groundItem = this.groundItems.get(groundItemId)\r\n    if (!groundItem) {\r\n      this.world.events.emit('item:error', {\r\n        playerId,\r\n        message: 'Item not found'\r\n      })\r\n      return false\r\n    }\r\n\r\n    // Check visibility\r\n    if (groundItem.visibleTo.length > 0 && !groundItem.visibleTo.includes(playerId)) {\r\n      this.world.events.emit('item:error', {\r\n        playerId,\r\n        message: 'You cannot see this item yet'\r\n      })\r\n      return false\r\n    }\r\n\r\n    // Try to add to inventory\r\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\r\n    if (!inventorySystem) {\r\n      return false\r\n    }\r\n\r\n    const added = (inventorySystem as any).addItem(playerId, groundItem.itemId, groundItem.quantity)\r\n    if (!added) {\r\n      this.world.events.emit('item:error', {\r\n        playerId,\r\n        message: 'Inventory full'\r\n      })\r\n      return false\r\n    }\r\n\r\n    // Remove from ground\r\n    this.groundItems.delete(groundItemId)\r\n    this.markForSave()\r\n\r\n    this.world.events.emit('item:picked_up', {\r\n      playerId,\r\n      groundItemId,\r\n      itemId: groundItem.itemId,\r\n      quantity: groundItem.quantity\r\n    })\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Get visible ground items for a player\r\n   */\r\n  public getVisibleItems(playerId: string, position: Vector3, range: number = 50): GroundItem[] {\r\n    const visibleItems: GroundItem[] = []\r\n\r\n    for (const item of this.groundItems.values()) {\r\n      // Check visibility\r\n      if (item.visibleTo.length > 0 && !item.visibleTo.includes(playerId)) {\r\n        continue\r\n      }\r\n\r\n      // Check range\r\n      const dx = item.position.x - position.x\r\n      const dz = item.position.z - position.z\r\n      const distance = Math.sqrt(dx * dx + dz * dz)\r\n\r\n      if (distance <= range) {\r\n        visibleItems.push(item)\r\n      }\r\n    }\r\n\r\n    return visibleItems\r\n  }\r\n\r\n  /**\r\n   * Spawn an item at a position (not player-dropped)\r\n   */\r\n  public spawnItem(itemId: string | number, quantity: number, position: Vector3, despawnTime?: number): string {\r\n    const groundItemId = `spawn_item_${this.itemCounter++}_${Date.now()}`\r\n    const now = Date.now()\r\n\r\n    const groundItem: GroundItem = {\r\n      id: groundItemId,\r\n      itemId,\r\n      quantity,\r\n      position: { ...position },\r\n      droppedAt: now,\r\n      despawnAt: now + (despawnTime || this.DEFAULT_DESPAWN_TIME),\r\n      visibleTo: [] // Visible to all\r\n    }\r\n\r\n    this.groundItems.set(groundItemId, groundItem)\r\n    this.markForSave()\r\n\r\n    this.world.events.emit('item:spawned', {\r\n      groundItemId,\r\n      itemId,\r\n      quantity,\r\n      position\r\n    })\r\n\r\n    return groundItemId\r\n  }\r\n\r\n  /**\r\n   * Update system - clean up despawned items\r\n   */\r\n  update(_deltaTime: number): void {\r\n    const now = Date.now()\r\n    const itemsToRemove: string[] = []\r\n\r\n    for (const [id, item] of this.groundItems) {\r\n      if (now >= item.despawnAt) {\r\n        itemsToRemove.push(id)\r\n      }\r\n    }\r\n\r\n    if (itemsToRemove.length > 0) {\r\n      for (const id of itemsToRemove) {\r\n        this.groundItems.delete(id)\r\n        this.world.events.emit('item:despawned', { groundItemId: id })\r\n      }\r\n      this.markForSave()\r\n    }\r\n  }\r\n\r\n  serialize(): any {\r\n    return {\r\n      groundItems: Object.fromEntries(this.groundItems),\r\n      itemCounter: this.itemCounter\r\n    }\r\n  }\r\n\r\n  deserialize(data: any): void {\r\n    if (data.groundItems) {\r\n      this.groundItems = new Map(Object.entries(data.groundItems))\r\n    }\r\n    if (data.itemCounter) {\r\n      this.itemCounter = data.itemCounter\r\n    }\r\n  }\r\n} ", "/**\r\n * Resource Spawn System - Manages harvestable resources like trees, rocks, etc.\r\n * Handles resource state, respawn timers, and persistence\r\n */\r\n\r\nimport { System } from '../../core/systems/System'\r\nimport type { World, Entity } from '../../types'\r\nimport type { Vector3 } from '../types'\r\n\r\nexport enum ResourceType {\r\n  TREE = 'tree',\r\n  ROCK = 'rock',\r\n  FISHING_SPOT = 'fishing_spot',\r\n  HERB_PATCH = 'herb_patch'\r\n}\r\n\r\nexport interface ResourceDefinition {\r\n  id: string\r\n  name: string\r\n  type: ResourceType\r\n  skillRequired: string // e.g., 'woodcutting', 'mining'\r\n  levelRequired: number\r\n  toolRequired?: string // e.g., 'axe', 'pickaxe'\r\n  harvestTime: number // ms\r\n  respawnTime: number // ms\r\n  yields: Array<{\r\n    itemId: string | number\r\n    quantity: number\r\n    chance: number // 0-1\r\n  }>\r\n  experience: number\r\n}\r\n\r\nexport interface ResourceSpawn {\r\n  id: string\r\n  definitionId: string\r\n  position: Vector3\r\n  currentState: 'available' | 'depleted'\r\n  depletedAt?: number\r\n  respawnsAt?: number\r\n}\r\n\r\nexport interface ResourceComponent {\r\n  type: 'resource'\r\n  definitionId: string\r\n  state: 'available' | 'depleted'\r\n  harvestedBy?: Set<string> // Player IDs currently harvesting\r\n}\r\n\r\nexport class ResourceSpawnSystem extends System {\r\n  private resourceDefinitions: Map<string, ResourceDefinition> = new Map()\r\n  private resourceSpawns: Map<string, ResourceSpawn> = new Map()\r\n  private harvestingPlayers: Map<string, string> = new Map() // playerId -> resourceId\r\n  \r\n  // Persistence\r\n  private pendingSaves: boolean = false\r\n  private saveTimer?: NodeJS.Timeout\r\n\r\n  constructor(world: World) {\r\n    super(world)\r\n    this.registerDefaultResources()\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    console.log('[ResourceSpawnSystem] Initializing...')\r\n\r\n    // Listen for resource events\r\n    this.world.events.on('resource:harvest', this.handleHarvestResource.bind(this))\r\n    this.world.events.on('resource:stop_harvest', this.handleStopHarvest.bind(this))\r\n    this.world.events.on('world:shutdown', this.handleShutdown.bind(this))\r\n\r\n    // Start auto-save timer\r\n    this.startAutoSave()\r\n    \r\n    // Load existing resource states\r\n    await this.loadResourceStates()\r\n    \r\n    // Create default resource spawns\r\n    this.createDefaultSpawns()\r\n\r\n    console.log('[ResourceSpawnSystem] Initialized with resource management')\r\n  }\r\n\r\n  /**\r\n   * Register default resource definitions\r\n   */\r\n  private registerDefaultResources(): void {\r\n    // Trees\r\n    this.registerResource({\r\n      id: 'tree_normal',\r\n      name: 'Tree',\r\n      type: ResourceType.TREE,\r\n      skillRequired: 'woodcutting',\r\n      levelRequired: 1,\r\n      toolRequired: 'axe',\r\n      harvestTime: 3000,\r\n      respawnTime: 30000,\r\n      yields: [{ itemId: 'logs', quantity: 1, chance: 1 }],\r\n      experience: 25\r\n    })\r\n\r\n    this.registerResource({\r\n      id: 'tree_oak',\r\n      name: 'Oak tree',\r\n      type: ResourceType.TREE,\r\n      skillRequired: 'woodcutting',\r\n      levelRequired: 15,\r\n      toolRequired: 'axe',\r\n      harvestTime: 4000,\r\n      respawnTime: 45000,\r\n      yields: [{ itemId: 'oak_logs', quantity: 1, chance: 1 }],\r\n      experience: 37.5\r\n    })\r\n\r\n    this.registerResource({\r\n      id: 'tree_willow',\r\n      name: 'Willow tree',\r\n      type: ResourceType.TREE,\r\n      skillRequired: 'woodcutting',\r\n      levelRequired: 30,\r\n      toolRequired: 'axe',\r\n      harvestTime: 5000,\r\n      respawnTime: 60000,\r\n      yields: [{ itemId: 'willow_logs', quantity: 1, chance: 1 }],\r\n      experience: 67.5\r\n    })\r\n\r\n    // Rocks\r\n    this.registerResource({\r\n      id: 'rock_copper',\r\n      name: 'Copper rock',\r\n      type: ResourceType.ROCK,\r\n      skillRequired: 'mining',\r\n      levelRequired: 1,\r\n      toolRequired: 'pickaxe',\r\n      harvestTime: 3000,\r\n      respawnTime: 5000,\r\n      yields: [{ itemId: 'copper_ore', quantity: 1, chance: 1 }],\r\n      experience: 17.5\r\n    })\r\n\r\n    this.registerResource({\r\n      id: 'rock_tin',\r\n      name: 'Tin rock',\r\n      type: ResourceType.ROCK,\r\n      skillRequired: 'mining',\r\n      levelRequired: 1,\r\n      toolRequired: 'pickaxe',\r\n      harvestTime: 3000,\r\n      respawnTime: 5000,\r\n      yields: [{ itemId: 'tin_ore', quantity: 1, chance: 1 }],\r\n      experience: 17.5\r\n    })\r\n\r\n    this.registerResource({\r\n      id: 'rock_iron',\r\n      name: 'Iron rock',\r\n      type: ResourceType.ROCK,\r\n      skillRequired: 'mining',\r\n      levelRequired: 15,\r\n      toolRequired: 'pickaxe',\r\n      harvestTime: 5000,\r\n      respawnTime: 10000,\r\n      yields: [{ itemId: 'iron_ore', quantity: 1, chance: 1 }],\r\n      experience: 35\r\n    })\r\n\r\n    // Fishing spots\r\n    this.registerResource({\r\n      id: 'fishing_shrimp',\r\n      name: 'Fishing spot',\r\n      type: ResourceType.FISHING_SPOT,\r\n      skillRequired: 'fishing',\r\n      levelRequired: 1,\r\n      toolRequired: 'small_net',\r\n      harvestTime: 4000,\r\n      respawnTime: 0, // Fishing spots don't deplete\r\n      yields: [\r\n        { itemId: 'raw_shrimps', quantity: 1, chance: 0.7 },\r\n        { itemId: 'raw_anchovies', quantity: 1, chance: 0.3 }\r\n      ],\r\n      experience: 10\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Register a resource definition\r\n   */\r\n  public registerResource(definition: ResourceDefinition): void {\r\n    this.resourceDefinitions.set(definition.id, definition)\r\n  }\r\n\r\n  /**\r\n   * Start auto-save timer\r\n   */\r\n  private startAutoSave(): void {\r\n    // Save resource states every 30 seconds\r\n    this.saveTimer = setInterval(() => {\r\n      if (this.pendingSaves) {\r\n        this.saveResourceStates()\r\n      }\r\n    }, 30000)\r\n  }\r\n\r\n  /**\r\n   * Handle world shutdown\r\n   */\r\n  private async handleShutdown(): Promise<void> {\r\n    // Save immediately on shutdown\r\n    await this.saveResourceStates()\r\n    if (this.saveTimer) {\r\n      clearInterval(this.saveTimer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load resource states from persistence\r\n   */\r\n  private async loadResourceStates(): Promise<void> {\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (!persistence) return\r\n\r\n    try {\r\n      const entities = await persistence.loadWorldEntities()\r\n      \r\n      for (const entity of entities) {\r\n        if (entity.entityType === 'resource_spawn') {\r\n          const metadata = entity.metadata || {}\r\n          const spawn: ResourceSpawn = {\r\n            id: entity.entityId,\r\n            definitionId: metadata.definitionId,\r\n            position: JSON.parse(entity.position),\r\n            currentState: metadata.state || 'available',\r\n            depletedAt: metadata.depletedAt ? new Date(metadata.depletedAt).getTime() : undefined,\r\n            respawnsAt: metadata.respawnsAt ? new Date(metadata.respawnsAt).getTime() : undefined\r\n          }\r\n          \r\n          this.resourceSpawns.set(spawn.id, spawn)\r\n          \r\n          // Create entity if depleted (to show depleted state)\r\n          if (spawn.currentState === 'depleted') {\r\n            this.createResourceEntity(spawn)\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(`[ResourceSpawnSystem] Loaded ${this.resourceSpawns.size} resource spawns`)\r\n    } catch (error) {\r\n      console.error(`[ResourceSpawnSystem] Failed to load resource states:`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save resource states to persistence\r\n   */\r\n  private async saveResourceStates(): Promise<void> {\r\n    const persistence = (this.world as any).getSystem('persistence')\r\n    if (!persistence) return\r\n\r\n    try {\r\n      const entities: any[] = []\r\n      \r\n      for (const [id, spawn] of this.resourceSpawns) {\r\n        entities.push({\r\n          entityId: id,\r\n          worldId: (this.world as any).id || 'default',\r\n          entityType: 'resource_spawn',\r\n          position: JSON.stringify(spawn.position),\r\n          metadata: {\r\n            definitionId: spawn.definitionId,\r\n            state: spawn.currentState,\r\n            depletedAt: spawn.depletedAt ? new Date(spawn.depletedAt).toISOString() : null,\r\n            respawnsAt: spawn.respawnsAt ? new Date(spawn.respawnsAt).toISOString() : null\r\n          }\r\n        })\r\n      }\r\n\r\n      await persistence.saveWorldEntities(entities)\r\n      this.pendingSaves = false\r\n      console.log(`[ResourceSpawnSystem] Saved ${entities.length} resource states`)\r\n    } catch (error) {\r\n      console.error(`[ResourceSpawnSystem] Failed to save resource states:`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark for save\r\n   */\r\n  private markForSave(): void {\r\n    this.pendingSaves = true\r\n  }\r\n\r\n  /**\r\n   * Create default resource spawns\r\n   */\r\n  private createDefaultSpawns(): void {\r\n    // Trees around spawn\r\n    this.createResourceSpawn('tree_normal', { x: 10, y: 0, z: 10 })\r\n    this.createResourceSpawn('tree_normal', { x: 15, y: 0, z: 8 })\r\n    this.createResourceSpawn('tree_normal', { x: 12, y: 0, z: 15 })\r\n    this.createResourceSpawn('tree_oak', { x: 20, y: 0, z: 10 })\r\n    this.createResourceSpawn('tree_oak', { x: 25, y: 0, z: 15 })\r\n    this.createResourceSpawn('tree_willow', { x: 30, y: 0, z: 20 })\r\n\r\n    // Mining area\r\n    this.createResourceSpawn('rock_copper', { x: -20, y: 0, z: 20 })\r\n    this.createResourceSpawn('rock_copper', { x: -22, y: 0, z: 22 })\r\n    this.createResourceSpawn('rock_tin', { x: -18, y: 0, z: 22 })\r\n    this.createResourceSpawn('rock_tin', { x: -20, y: 0, z: 24 })\r\n    this.createResourceSpawn('rock_iron', { x: -25, y: 0, z: 25 })\r\n    this.createResourceSpawn('rock_iron', { x: -27, y: 0, z: 23 })\r\n\r\n    // Fishing spots by water\r\n    this.createResourceSpawn('fishing_shrimp', { x: 0, y: 0, z: 30 })\r\n    this.createResourceSpawn('fishing_shrimp', { x: 5, y: 0, z: 32 })\r\n  }\r\n\r\n  /**\r\n   * Create a resource spawn\r\n   */\r\n  public createResourceSpawn(definitionId: string, position: Vector3): string {\r\n    const definition = this.resourceDefinitions.get(definitionId)\r\n    if (!definition) {\r\n      console.error(`[ResourceSpawnSystem] Unknown resource definition: ${definitionId}`)\r\n      return ''\r\n    }\r\n\r\n    const spawnId = `resource_${definitionId}_${Date.now()}_${Math.random()}`\r\n    \r\n    // Check if spawn already exists at this position\r\n    const existingSpawn = Array.from(this.resourceSpawns.values()).find(\r\n      spawn => spawn.position.x === position.x && spawn.position.z === position.z\r\n    )\r\n    \r\n    if (existingSpawn) {\r\n      return existingSpawn.id\r\n    }\r\n\r\n    const spawn: ResourceSpawn = {\r\n      id: spawnId,\r\n      definitionId,\r\n      position: { ...position },\r\n      currentState: 'available'\r\n    }\r\n\r\n    this.resourceSpawns.set(spawnId, spawn)\r\n    this.createResourceEntity(spawn)\r\n    this.markForSave()\r\n\r\n    return spawnId\r\n  }\r\n\r\n  /**\r\n   * Create visual entity for resource\r\n   */\r\n  private createResourceEntity(spawn: ResourceSpawn): Entity | null {\r\n    const definition = this.resourceDefinitions.get(spawn.definitionId)\r\n    if (!definition) return null\r\n\r\n    const entity = this.world.entities.create(spawn.id)\r\n    if (!entity) return null\r\n\r\n    entity.position = spawn.position\r\n\r\n    // Add resource component\r\n    entity.addComponent<ResourceComponent>({\r\n      type: 'resource',\r\n      definitionId: spawn.definitionId,\r\n      state: spawn.currentState,\r\n      harvestedBy: new Set()\r\n    })\r\n\r\n    // Add visual representation based on state\r\n    this.updateResourceVisual(entity, definition, spawn.currentState)\r\n\r\n    return entity\r\n  }\r\n\r\n  /**\r\n   * Update resource visual based on state\r\n   */\r\n  private updateResourceVisual(entity: Entity, definition: ResourceDefinition, state: 'available' | 'depleted'): void {\r\n    // Remove existing mesh if any\r\n    entity.removeComponent('mesh')\r\n\r\n    if (state === 'available') {\r\n      // Full resource visual\r\n      switch (definition.type) {\r\n        case ResourceType.TREE:\r\n          entity.addComponent('mesh', {\r\n            type: 'box',\r\n            size: { x: 1, y: 3, z: 1 },\r\n            material: {\r\n              type: 'basic',\r\n              color: '#228B22',\r\n              emissive: '#0F4F0F'\r\n            }\r\n          })\r\n          break\r\n        case ResourceType.ROCK:\r\n          entity.addComponent('mesh', {\r\n            type: 'box',\r\n            size: { x: 1.5, y: 1, z: 1.5 },\r\n            material: {\r\n              type: 'basic',\r\n              color: '#696969',\r\n              emissive: '#2F2F2F'\r\n            }\r\n          })\r\n          break\r\n        case ResourceType.FISHING_SPOT:\r\n          entity.addComponent('mesh', {\r\n            type: 'box',\r\n            size: { x: 2, y: 0.1, z: 2 },\r\n            material: {\r\n              type: 'basic',\r\n              color: '#1E90FF',\r\n              emissive: '#0F4F8F',\r\n              opacity: 0.7\r\n            }\r\n          })\r\n          break\r\n      }\r\n    } else {\r\n      // Depleted visual\r\n      switch (definition.type) {\r\n        case ResourceType.TREE:\r\n          entity.addComponent('mesh', {\r\n            type: 'box',\r\n            size: { x: 0.8, y: 0.5, z: 0.8 },\r\n            material: {\r\n              type: 'basic',\r\n              color: '#8B4513'\r\n            }\r\n          })\r\n          break\r\n        case ResourceType.ROCK:\r\n          entity.addComponent('mesh', {\r\n            type: 'box',\r\n            size: { x: 1.2, y: 0.3, z: 1.2 },\r\n            material: {\r\n              type: 'basic',\r\n              color: '#3F3F3F'\r\n            }\r\n          })\r\n          break\r\n      }\r\n    }\r\n\r\n    // Add name tag\r\n    entity.addComponent('nameTag', {\r\n      text: definition.name + (state === 'depleted' ? ' (Depleted)' : ''),\r\n      offset: { x: 0, y: 2, z: 0 },\r\n      size: 0.5,\r\n      color: '#ffffff',\r\n      backgroundColor: 'rgba(0,0,0,0.5)'\r\n    })\r\n  }\r\n\r\n  private handleHarvestResource(data: any): void {\r\n    const { playerId, resourceId } = data\r\n    this.startHarvesting(playerId, resourceId)\r\n  }\r\n\r\n  private handleStopHarvest(data: any): void {\r\n    const { playerId } = data\r\n    this.stopHarvesting(playerId)\r\n  }\r\n\r\n  /**\r\n   * Start harvesting a resource\r\n   */\r\n  public startHarvesting(playerId: string, resourceId: string): boolean {\r\n    const spawn = this.resourceSpawns.get(resourceId)\r\n    if (!spawn || spawn.currentState === 'depleted') {\r\n      this.world.events.emit('resource:error', {\r\n        playerId,\r\n        message: 'Resource is not available'\r\n      })\r\n      return false\r\n    }\r\n\r\n    const definition = this.resourceDefinitions.get(spawn.definitionId)\r\n    if (!definition) return false\r\n\r\n    // Check skill level\r\n    const skillsSystem = this.world.systems.find(s => s.constructor.name === 'SkillsSystem')\r\n    if (skillsSystem) {\r\n      const level = (skillsSystem as any).getSkillLevel(playerId, definition.skillRequired)\r\n      if (level < definition.levelRequired) {\r\n        this.world.events.emit('resource:error', {\r\n          playerId,\r\n          message: `You need level ${definition.levelRequired} ${definition.skillRequired} to harvest this`\r\n        })\r\n        return false\r\n      }\r\n    }\r\n\r\n    // Check tool\r\n    if (definition.toolRequired) {\r\n      const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\r\n      if (inventorySystem && !(inventorySystem as any).hasItemEquipped(playerId, definition.toolRequired)) {\r\n        this.world.events.emit('resource:error', {\r\n          playerId,\r\n          message: `You need a ${definition.toolRequired} to harvest this`\r\n        })\r\n        return false\r\n      }\r\n    }\r\n\r\n    // Start harvesting\r\n    this.harvestingPlayers.set(playerId, resourceId)\r\n\r\n    // Get entity and update component\r\n    const entity = this.world.getEntityById(resourceId)\r\n    if (entity) {\r\n      const resourceComp = entity.getComponent('resource') as ResourceComponent\r\n      if (resourceComp) {\r\n        resourceComp.harvestedBy?.add(playerId)\r\n      }\r\n    }\r\n\r\n    // Schedule harvest completion\r\n    setTimeout(() => {\r\n      if (this.harvestingPlayers.get(playerId) === resourceId) {\r\n        this.completeHarvest(playerId, resourceId)\r\n      }\r\n    }, definition.harvestTime)\r\n\r\n    this.world.events.emit('resource:harvest_started', {\r\n      playerId,\r\n      resourceId,\r\n      resourceName: definition.name,\r\n      duration: definition.harvestTime\r\n    })\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Stop harvesting\r\n   */\r\n  public stopHarvesting(playerId: string): void {\r\n    const resourceId = this.harvestingPlayers.get(playerId)\r\n    if (!resourceId) return\r\n\r\n    this.harvestingPlayers.delete(playerId)\r\n\r\n    // Update entity component\r\n    const entity = this.world.getEntityById(resourceId)\r\n    if (entity) {\r\n      const resourceComp = entity.getComponent('resource') as ResourceComponent\r\n      if (resourceComp) {\r\n        resourceComp.harvestedBy?.delete(playerId)\r\n      }\r\n    }\r\n\r\n    this.world.events.emit('resource:harvest_cancelled', {\r\n      playerId,\r\n      resourceId\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Complete harvest\r\n   */\r\n  private completeHarvest(playerId: string, resourceId: string): void {\r\n    const spawn = this.resourceSpawns.get(resourceId)\r\n    if (!spawn || spawn.currentState === 'depleted') return\r\n\r\n    const definition = this.resourceDefinitions.get(spawn.definitionId)\r\n    if (!definition) return\r\n\r\n    // Remove from harvesting\r\n    this.harvestingPlayers.delete(playerId)\r\n\r\n    // Give resources to player\r\n    const inventorySystem = this.world.systems.find(s => s.constructor.name === 'InventorySystem')\r\n    if (inventorySystem) {\r\n      for (const resourceYield of definition.yields) {\r\n        if (Math.random() <= resourceYield.chance) {\r\n          (inventorySystem as any).addItem(playerId, resourceYield.itemId, resourceYield.quantity)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Give experience\r\n    const skillsSystem = this.world.systems.find(s => s.constructor.name === 'SkillsSystem')\r\n    if (skillsSystem) {\r\n      (skillsSystem as any).addExperience(playerId, definition.skillRequired, definition.experience)\r\n    }\r\n\r\n    // Deplete resource if it respawns\r\n    if (definition.respawnTime > 0) {\r\n      spawn.currentState = 'depleted'\r\n      spawn.depletedAt = Date.now()\r\n      spawn.respawnsAt = Date.now() + definition.respawnTime\r\n      this.markForSave()\r\n\r\n      // Update visual\r\n      const entity = this.world.getEntityById(resourceId)\r\n      if (entity) {\r\n        this.updateResourceVisual(entity, definition, 'depleted')\r\n        const resourceComp = entity.getComponent('resource') as ResourceComponent\r\n        if (resourceComp) {\r\n          resourceComp.state = 'depleted'\r\n          resourceComp.harvestedBy?.clear()\r\n        }\r\n      }\r\n    }\r\n\r\n    this.world.events.emit('resource:harvested', {\r\n      playerId,\r\n      resourceId,\r\n      resourceName: definition.name,\r\n      experience: definition.experience\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update system - handle respawns\r\n   */\r\n  update(_deltaTime: number): void {\r\n    const now = Date.now()\r\n    let hasChanges = false\r\n\r\n    for (const [id, spawn] of this.resourceSpawns) {\r\n      if (spawn.currentState === 'depleted' && spawn.respawnsAt && now >= spawn.respawnsAt) {\r\n        // Respawn resource\r\n        spawn.currentState = 'available'\r\n        spawn.depletedAt = undefined\r\n        spawn.respawnsAt = undefined\r\n        hasChanges = true\r\n\r\n        // Update visual\r\n        const entity = this.world.getEntityById(id)\r\n        if (entity) {\r\n          const definition = this.resourceDefinitions.get(spawn.definitionId)\r\n          if (definition) {\r\n            this.updateResourceVisual(entity, definition, 'available')\r\n            const resourceComp = entity.getComponent('resource') as ResourceComponent\r\n            if (resourceComp) {\r\n              resourceComp.state = 'available'\r\n            }\r\n          }\r\n        }\r\n\r\n        this.world.events.emit('resource:respawned', {\r\n          resourceId: id,\r\n          definitionId: spawn.definitionId\r\n        })\r\n      }\r\n    }\r\n\r\n    if (hasChanges) {\r\n      this.markForSave()\r\n    }\r\n  }\r\n\r\n  serialize(): any {\r\n    return {\r\n      resourceSpawns: Object.fromEntries(this.resourceSpawns),\r\n      harvestingPlayers: Object.fromEntries(this.harvestingPlayers)\r\n    }\r\n  }\r\n\r\n  deserialize(data: any): void {\r\n    if (data.resourceSpawns) {\r\n      this.resourceSpawns = new Map(Object.entries(data.resourceSpawns))\r\n    }\r\n    if (data.harvestingPlayers) {\r\n      this.harvestingPlayers = new Map(Object.entries(data.harvestingPlayers))\r\n    }\r\n  }\r\n} ", "/**\r\n * UI Renderer - Handles rendering of all UI elements to the screen\r\n * Works with the UISystem to draw interfaces\r\n */\r\n\r\nimport type { World } from '../../types'\r\nimport type { UIElement, UITheme } from './UISystem'\r\nimport type { Vector2 } from '../types'\r\n\r\nexport interface RenderContext {\r\n  canvas: HTMLCanvasElement\r\n  ctx: CanvasRenderingContext2D\r\n  width: number\r\n  height: number\r\n  scale: number\r\n}\r\n\r\nexport class UIRenderer {\r\n  private world: World\r\n  private context: RenderContext | null = null\r\n  private theme: UITheme\r\n  private imageCache: Map<string, HTMLImageElement> = new Map()\r\n  private fontLoaded: boolean = false\r\n  \r\n  constructor(world: World, theme: UITheme) {\r\n    this.world = world\r\n    this.theme = theme\r\n  }\r\n\r\n  /**\r\n   * Initialize renderer with canvas\r\n   */\r\n  async initialize(canvas: HTMLCanvasElement): Promise<void> {\r\n    const ctx = canvas.getContext('2d')\r\n    if (!ctx) {\r\n      throw new Error('Failed to get 2D context')\r\n    }\r\n\r\n    this.context = {\r\n      canvas,\r\n      ctx,\r\n      width: canvas.width,\r\n      height: canvas.height,\r\n      scale: window.devicePixelRatio || 1\r\n    }\r\n\r\n    // Load fonts\r\n    await this.loadFonts()\r\n\r\n    // Load UI images\r\n    await this.loadImages()\r\n\r\n    console.log('[UIRenderer] Initialized')\r\n  }\r\n\r\n  /**\r\n   * Load custom fonts\r\n   */\r\n  private async loadFonts(): Promise<void> {\r\n    try {\r\n      // Load RuneScape-style fonts\r\n      const fonts = [\r\n        new FontFace('RuneScape', 'url(/assets/fonts/runescape.ttf)'),\r\n        new FontFace('RuneScape Bold', 'url(/assets/fonts/runescape-bold.ttf)'),\r\n        new FontFace('RuneScape Chat', 'url(/assets/fonts/runescape-chat.ttf)')\r\n      ]\r\n\r\n      await Promise.all(fonts.map(font => font.load()))\r\n      fonts.forEach(font => document.fonts.add(font))\r\n      \r\n      this.fontLoaded = true\r\n    } catch (error) {\r\n      console.warn('[UIRenderer] Failed to load custom fonts, using fallback', error)\r\n      // Use fallback fonts\r\n      this.theme.fonts = {\r\n        main: 'Arial',\r\n        heading: 'Arial Black',\r\n        chat: 'Courier New'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load UI images\r\n   */\r\n  private async loadImages(): Promise<void> {\r\n    const imagePaths = {\r\n      // Skill icons\r\n      'skill_attack': '/assets/icons/skills/attack.png',\r\n      'skill_strength': '/assets/icons/skills/strength.png',\r\n      'skill_defence': '/assets/icons/skills/defence.png',\r\n      'skill_ranged': '/assets/icons/skills/ranged.png',\r\n      'skill_prayer': '/assets/icons/skills/prayer.png',\r\n      'skill_magic': '/assets/icons/skills/magic.png',\r\n      'skill_runecraft': '/assets/icons/skills/runecraft.png',\r\n      'skill_construction': '/assets/icons/skills/construction.png',\r\n      'skill_hitpoints': '/assets/icons/skills/hitpoints.png',\r\n      'skill_agility': '/assets/icons/skills/agility.png',\r\n      'skill_herblore': '/assets/icons/skills/herblore.png',\r\n      'skill_thieving': '/assets/icons/skills/thieving.png',\r\n      'skill_crafting': '/assets/icons/skills/crafting.png',\r\n      'skill_fletching': '/assets/icons/skills/fletching.png',\r\n      'skill_slayer': '/assets/icons/skills/slayer.png',\r\n      'skill_hunter': '/assets/icons/skills/hunter.png',\r\n      'skill_mining': '/assets/icons/skills/mining.png',\r\n      'skill_smithing': '/assets/icons/skills/smithing.png',\r\n      'skill_fishing': '/assets/icons/skills/fishing.png',\r\n      'skill_cooking': '/assets/icons/skills/cooking.png',\r\n      'skill_firemaking': '/assets/icons/skills/firemaking.png',\r\n      'skill_woodcutting': '/assets/icons/skills/woodcutting.png',\r\n      'skill_farming': '/assets/icons/skills/farming.png',\r\n      \r\n      // UI elements\r\n      'ui_close': '/assets/icons/ui/close.png',\r\n      'ui_minimize': '/assets/icons/ui/minimize.png',\r\n      'ui_settings': '/assets/icons/ui/settings.png',\r\n      'ui_inventory': '/assets/icons/ui/inventory.png',\r\n      'ui_quest': '/assets/icons/ui/quest.png',\r\n      'ui_skills': '/assets/icons/ui/skills.png',\r\n      'ui_prayer': '/assets/icons/ui/prayer.png',\r\n      'ui_magic': '/assets/icons/ui/magic.png',\r\n      'ui_clan': '/assets/icons/ui/clan.png',\r\n      'ui_friends': '/assets/icons/ui/friends.png',\r\n      'ui_logout': '/assets/icons/ui/logout.png',\r\n      \r\n      // Inventory slot\r\n      'slot_empty': '/assets/icons/ui/slot_empty.png',\r\n      'slot_hover': '/assets/icons/ui/slot_hover.png',\r\n      'slot_selected': '/assets/icons/ui/slot_selected.png'\r\n    }\r\n\r\n    // Load images in parallel\r\n    const loadPromises = Object.entries(imagePaths).map(async ([key, path]) => {\r\n      try {\r\n        const img = new Image()\r\n        img.src = path\r\n        await new Promise((resolve, reject) => {\r\n          img.onload = resolve\r\n          img.onerror = reject\r\n        })\r\n        this.imageCache.set(key, img)\r\n      } catch (error) {\r\n        console.warn(`[UIRenderer] Failed to load image: ${path}`)\r\n      }\r\n    })\r\n\r\n    await Promise.all(loadPromises)\r\n  }\r\n\r\n  /**\r\n   * Render all UI elements\r\n   */\r\n  render(elements: UIElement[]): void {\r\n    if (!this.context) return\r\n\r\n    const { ctx } = this.context\r\n\r\n    // Sort elements by layer\r\n    const sortedElements = [...elements].sort((a, b) => a.layer - b.layer)\r\n\r\n    // Render each element\r\n    for (const element of sortedElements) {\r\n      if (!element.visible) continue\r\n      \r\n      this.renderElement(element)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render individual UI element\r\n   */\r\n  private renderElement(element: UIElement): void {\r\n    if (!this.context) return\r\n\r\n    const { ctx } = this.context\r\n    const pos = this.calculatePosition(element.position)\r\n\r\n    switch (element.type) {\r\n      case 'panel':\r\n        this.renderPanel(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'button':\r\n        this.renderButton(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'text':\r\n        this.renderText(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'icon':\r\n        this.renderIcon(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'progress_bar':\r\n        this.renderProgressBar(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'inventory_slot':\r\n        this.renderInventorySlot(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'chat_box':\r\n        this.renderChatBox(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'minimap':\r\n        this.renderMinimap(ctx, pos, element.size, element.data)\r\n        break\r\n      case 'context_menu':\r\n        this.renderContextMenu(ctx, pos, element.size, element.data)\r\n        break\r\n    }\r\n\r\n    // Render children\r\n    if (element.children) {\r\n      for (const child of element.children) {\r\n        this.renderElement(child)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate absolute position (handle negative values for right/bottom alignment)\r\n   */\r\n  private calculatePosition(position: Vector2): Vector2 {\r\n    if (!this.context) return position\r\n\r\n    const { width, height } = this.context\r\n\r\n    return {\r\n      x: position.x < 0 ? width + position.x : position.x,\r\n      y: position.y < 0 ? height + position.y : position.y\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render panel\r\n   */\r\n  private renderPanel(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Background\r\n    ctx.fillStyle = data.backgroundColor || this.theme.colors.background\r\n    ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Border\r\n    if (data.border !== false) {\r\n      ctx.strokeStyle = data.borderColor || this.theme.colors.border\r\n      ctx.lineWidth = data.borderWidth || 2\r\n      ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n    }\r\n\r\n    // Title bar\r\n    if (data.title) {\r\n      ctx.fillStyle = this.theme.colors.primary\r\n      ctx.fillRect(pos.x, pos.y, size.x, 30)\r\n      \r\n      ctx.fillStyle = this.theme.colors.text\r\n      ctx.font = `16px ${this.theme.fonts.heading}`\r\n      ctx.textAlign = 'center'\r\n      ctx.textBaseline = 'middle'\r\n      ctx.fillText(data.title, pos.x + size.x / 2, pos.y + 15)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render button\r\n   */\r\n  private renderButton(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Background\r\n    const isHovered = data.hovered || false\r\n    const isPressed = data.pressed || false\r\n    \r\n    if (isPressed) {\r\n      ctx.fillStyle = this.theme.colors.active\r\n    } else if (isHovered) {\r\n      ctx.fillStyle = this.theme.colors.hover\r\n    } else {\r\n      ctx.fillStyle = this.theme.colors.secondary\r\n    }\r\n    \r\n    ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Border\r\n    ctx.strokeStyle = this.theme.colors.border\r\n    ctx.lineWidth = 2\r\n    ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Icon or text\r\n    if (data.icon) {\r\n      const icon = this.imageCache.get(`ui_${data.icon}`)\r\n      if (icon) {\r\n        const iconSize = Math.min(size.x, size.y) - 8\r\n        ctx.drawImage(\r\n          icon,\r\n          pos.x + (size.x - iconSize) / 2,\r\n          pos.y + (size.y - iconSize) / 2,\r\n          iconSize,\r\n          iconSize\r\n        )\r\n      }\r\n    } else if (data.text) {\r\n      ctx.fillStyle = this.theme.colors.text\r\n      ctx.font = `${this.theme.sizes.text}px ${this.theme.fonts.main}`\r\n      ctx.textAlign = 'center'\r\n      ctx.textBaseline = 'middle'\r\n      ctx.fillText(data.text, pos.x + size.x / 2, pos.y + size.y / 2)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render text\r\n   */\r\n  private renderText(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    ctx.fillStyle = data.color || this.theme.colors.text\r\n    ctx.font = `${data.fontSize || this.theme.sizes.text}px ${data.font || this.theme.fonts.main}`\r\n    ctx.textAlign = data.align || 'left'\r\n    ctx.textBaseline = data.baseline || 'top'\r\n    \r\n    if (data.editable) {\r\n      // Draw input field background\r\n      ctx.fillStyle = this.theme.colors.background\r\n      ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n      ctx.strokeStyle = this.theme.colors.border\r\n      ctx.lineWidth = 1\r\n      ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n      \r\n      // Draw text with padding\r\n      ctx.fillStyle = data.color || this.theme.colors.text\r\n      ctx.fillText(data.text || data.placeholder || '', pos.x + 5, pos.y + size.y / 2)\r\n    } else {\r\n      ctx.fillText(data.text || '', pos.x, pos.y)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render icon\r\n   */\r\n  private renderIcon(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    if (data.skill) {\r\n      const icon = this.imageCache.get(`skill_${data.skill}`)\r\n      if (icon) {\r\n        // Draw skill icon\r\n        ctx.drawImage(icon, pos.x, pos.y, this.theme.sizes.iconMedium, this.theme.sizes.iconMedium)\r\n        \r\n        // Draw level\r\n        ctx.fillStyle = this.theme.colors.text\r\n        ctx.font = `12px ${this.theme.fonts.main}`\r\n        ctx.textAlign = 'right'\r\n        ctx.textBaseline = 'bottom'\r\n        ctx.fillText(`${data.level}`, pos.x + size.x - 5, pos.y + size.y - 5)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render progress bar\r\n   */\r\n  private renderProgressBar(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Background\r\n    ctx.fillStyle = this.theme.colors.background\r\n    ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Progress\r\n    const progress = Math.min(1, Math.max(0, data.current / data.max))\r\n    ctx.fillStyle = data.color || this.theme.colors.primary\r\n    ctx.fillRect(pos.x, pos.y, size.x * progress, size.y)\r\n\r\n    // Border\r\n    ctx.strokeStyle = this.theme.colors.border\r\n    ctx.lineWidth = 2\r\n    ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Label\r\n    if (data.label) {\r\n      ctx.fillStyle = this.theme.colors.text\r\n      ctx.font = `${this.theme.sizes.text}px ${this.theme.fonts.main}`\r\n      ctx.textAlign = 'center'\r\n      ctx.textBaseline = 'middle'\r\n      ctx.fillText(\r\n        `${data.label}: ${data.current}/${data.max}`,\r\n        pos.x + size.x / 2,\r\n        pos.y + size.y / 2\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render inventory slot\r\n   */\r\n  private renderInventorySlot(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Slot background\r\n    const slotImage = data.hovered \r\n      ? this.imageCache.get('slot_hover')\r\n      : data.selected \r\n        ? this.imageCache.get('slot_selected')\r\n        : this.imageCache.get('slot_empty')\r\n    \r\n    if (slotImage) {\r\n      ctx.drawImage(slotImage, pos.x, pos.y, size.x, size.y)\r\n    } else {\r\n      // Fallback to simple rectangle\r\n      ctx.fillStyle = data.hovered ? this.theme.colors.hover : this.theme.colors.background\r\n      ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n      ctx.strokeStyle = this.theme.colors.border\r\n      ctx.lineWidth = 1\r\n      ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n    }\r\n\r\n    // Item\r\n    if (data.item) {\r\n      // Draw item icon (placeholder for now)\r\n      ctx.fillStyle = '#888'\r\n      ctx.fillRect(pos.x + 8, pos.y + 8, size.x - 16, size.y - 16)\r\n      \r\n      // Draw quantity\r\n      if (data.item.quantity > 1) {\r\n        ctx.fillStyle = this.theme.colors.text\r\n        ctx.font = `10px ${this.theme.fonts.main}`\r\n        ctx.textAlign = 'right'\r\n        ctx.textBaseline = 'bottom'\r\n        ctx.fillText(`${data.item.quantity}`, pos.x + size.x - 2, pos.y + size.y - 2)\r\n      }\r\n    }\r\n\r\n    // Price (for shop slots)\r\n    if (data.showPrice && data.item) {\r\n      ctx.fillStyle = '#ffff00'\r\n      ctx.font = `10px ${this.theme.fonts.main}`\r\n      ctx.textAlign = 'center'\r\n      ctx.textBaseline = 'bottom'\r\n      ctx.fillText(`${data.item.price}gp`, pos.x + size.x / 2, pos.y + size.y + 12)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render chat box\r\n   */\r\n  private renderChatBox(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'\r\n    ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Messages\r\n    const messages = data.messages || []\r\n    const lineHeight = 16\r\n    const maxLines = Math.floor(size.y / lineHeight)\r\n    const startIndex = Math.max(0, messages.length - maxLines)\r\n\r\n    ctx.font = `${this.theme.sizes.text}px ${this.theme.fonts.chat}`\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n\r\n    for (let i = 0; i < maxLines && startIndex + i < messages.length; i++) {\r\n      const message = messages[startIndex + i]\r\n      ctx.fillStyle = message.color || this.theme.colors.text\r\n      \r\n      const text = message.sender \r\n        ? `${message.sender}: ${message.text}`\r\n        : message.text\r\n      \r\n      ctx.fillText(text, pos.x + 5, pos.y + 5 + i * lineHeight)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render minimap\r\n   */\r\n  private renderMinimap(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Background\r\n    ctx.fillStyle = '#1a1a1a'\r\n    ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Border\r\n    ctx.strokeStyle = this.theme.colors.border\r\n    ctx.lineWidth = 2\r\n    ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n\r\n    // Minimap content would be rendered here\r\n    // For now, just show a placeholder\r\n    ctx.fillStyle = '#333'\r\n    ctx.fillRect(pos.x + 10, pos.y + 10, size.x - 20, size.y - 20)\r\n\r\n    // Player position (center)\r\n    ctx.fillStyle = '#ffffff'\r\n    ctx.beginPath()\r\n    ctx.arc(pos.x + size.x / 2, pos.y + size.y / 2, 3, 0, Math.PI * 2)\r\n    ctx.fill()\r\n  }\r\n\r\n  /**\r\n   * Render context menu\r\n   */\r\n  private renderContextMenu(ctx: CanvasRenderingContext2D, pos: Vector2, size: Vector2, data: any): void {\r\n    // Background with shadow\r\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)'\r\n    ctx.shadowBlur = 5\r\n    ctx.shadowOffsetX = 2\r\n    ctx.shadowOffsetY = 2\r\n    \r\n    ctx.fillStyle = this.theme.colors.background\r\n    ctx.fillRect(pos.x, pos.y, size.x, size.y)\r\n    \r\n    ctx.shadowColor = 'transparent'\r\n    \r\n    // Border\r\n    ctx.strokeStyle = this.theme.colors.border\r\n    ctx.lineWidth = 1\r\n    ctx.strokeRect(pos.x, pos.y, size.x, size.y)\r\n  }\r\n\r\n  /**\r\n   * Update theme\r\n   */\r\n  updateTheme(theme: UITheme): void {\r\n    this.theme = theme\r\n  }\r\n\r\n  /**\r\n   * Resize canvas\r\n   */\r\n  resize(width: number, height: number): void {\r\n    if (!this.context) return\r\n\r\n    this.context.canvas.width = width\r\n    this.context.canvas.height = height\r\n    this.context.width = width\r\n    this.context.height = height\r\n  }\r\n\r\n  /**\r\n   * Clear canvas\r\n   */\r\n  clear(): void {\r\n    if (!this.context) return\r\n    this.context.ctx.clearRect(0, 0, this.context.width, this.context.height)\r\n  }\r\n} ", "/**\r\n * Input Handler - Manages mouse and keyboard input for the UI\r\n * Translates browser events to game events\r\n */\r\n\r\nimport type { World } from '../../types'\r\nimport type { Vector2 } from '../types'\r\n\r\nexport interface InputState {\r\n  mouse: {\r\n    position: Vector2\r\n    buttons: boolean[]\r\n    wheel: number\r\n  }\r\n  keyboard: {\r\n    keys: Set<string>\r\n    shift: boolean\r\n    ctrl: boolean\r\n    alt: boolean\r\n  }\r\n  touch: {\r\n    touches: TouchPoint[]\r\n  }\r\n}\r\n\r\nexport interface TouchPoint {\r\n  id: number\r\n  position: Vector2\r\n  startPosition: Vector2\r\n  startTime: number\r\n}\r\n\r\nexport interface InputEvent {\r\n  type: InputEventType\r\n  playerId: string\r\n  data: any\r\n  timestamp: number\r\n}\r\n\r\nexport enum InputEventType {\r\n  MOUSE_MOVE = 'mouse_move',\r\n  MOUSE_DOWN = 'mouse_down',\r\n  MOUSE_UP = 'mouse_up',\r\n  MOUSE_WHEEL = 'mouse_wheel',\r\n  KEY_DOWN = 'key_down',\r\n  KEY_UP = 'key_up',\r\n  TOUCH_START = 'touch_start',\r\n  TOUCH_MOVE = 'touch_move',\r\n  TOUCH_END = 'touch_end'\r\n}\r\n\r\nexport class InputHandler {\r\n  private world: World\r\n  private canvas: HTMLCanvasElement | null = null\r\n  private state: InputState\r\n  private playerId: string\r\n  \r\n  // Input configuration\r\n  private mouseSensitivity: number = 1.0\r\n  private keyBindings: Map<string, string> = new Map()\r\n  private preventDefaultKeys: Set<string> = new Set()\r\n  \r\n  // Drag tracking\r\n  private dragStart: Vector2 | null = null\r\n  private isDragging: boolean = false\r\n  private dragThreshold: number = 5\r\n  \r\n  constructor(world: World, playerId: string) {\r\n    this.world = world\r\n    this.playerId = playerId\r\n    \r\n    this.state = {\r\n      mouse: {\r\n        position: { x: 0, y: 0 },\r\n        buttons: [false, false, false],\r\n        wheel: 0\r\n      },\r\n      keyboard: {\r\n        keys: new Set(),\r\n        shift: false,\r\n        ctrl: false,\r\n        alt: false\r\n      },\r\n      touch: {\r\n        touches: []\r\n      }\r\n    }\r\n    \r\n    this.setupDefaultKeyBindings()\r\n  }\r\n\r\n  /**\r\n   * Initialize input handler with canvas\r\n   */\r\n  initialize(canvas: HTMLCanvasElement): void {\r\n    this.canvas = canvas\r\n    \r\n    // Mouse events\r\n    canvas.addEventListener('mousemove', this.handleMouseMove.bind(this))\r\n    canvas.addEventListener('mousedown', this.handleMouseDown.bind(this))\r\n    canvas.addEventListener('mouseup', this.handleMouseUp.bind(this))\r\n    canvas.addEventListener('wheel', this.handleMouseWheel.bind(this))\r\n    canvas.addEventListener('contextmenu', (e) => e.preventDefault())\r\n    \r\n    // Keyboard events\r\n    window.addEventListener('keydown', this.handleKeyDown.bind(this))\r\n    window.addEventListener('keyup', this.handleKeyUp.bind(this))\r\n    \r\n    // Touch events\r\n    canvas.addEventListener('touchstart', this.handleTouchStart.bind(this))\r\n    canvas.addEventListener('touchmove', this.handleTouchMove.bind(this))\r\n    canvas.addEventListener('touchend', this.handleTouchEnd.bind(this))\r\n    \r\n    // Prevent text selection\r\n    canvas.style.userSelect = 'none'\r\n    canvas.style.touchAction = 'none'\r\n    \r\n    console.log('[InputHandler] Initialized')\r\n  }\r\n\r\n  /**\r\n   * Setup default key bindings\r\n   */\r\n  private setupDefaultKeyBindings(): void {\r\n    // Movement\r\n    this.keyBindings.set('w', 'move_north')\r\n    this.keyBindings.set('s', 'move_south')\r\n    this.keyBindings.set('a', 'move_west')\r\n    this.keyBindings.set('d', 'move_east')\r\n    this.keyBindings.set('ArrowUp', 'camera_up')\r\n    this.keyBindings.set('ArrowDown', 'camera_down')\r\n    this.keyBindings.set('ArrowLeft', 'camera_left')\r\n    this.keyBindings.set('ArrowRight', 'camera_right')\r\n    \r\n    // UI shortcuts\r\n    this.keyBindings.set('i', 'toggle_inventory')\r\n    this.keyBindings.set('Tab', 'toggle_inventory')\r\n    this.keyBindings.set('q', 'toggle_quest')\r\n    this.keyBindings.set('p', 'toggle_prayer')\r\n    this.keyBindings.set('m', 'toggle_magic')\r\n    this.keyBindings.set('k', 'toggle_skills')\r\n    this.keyBindings.set('f', 'toggle_friends')\r\n    this.keyBindings.set('c', 'toggle_clan')\r\n    this.keyBindings.set('Escape', 'close_interface')\r\n    this.keyBindings.set('Enter', 'focus_chat')\r\n    \r\n    // Actions\r\n    this.keyBindings.set(' ', 'interact')\r\n    this.keyBindings.set('Shift', 'modifier_shift')\r\n    this.keyBindings.set('Control', 'modifier_ctrl')\r\n    this.keyBindings.set('Alt', 'modifier_alt')\r\n    \r\n    // F-keys for quick prayers/magic\r\n    for (let i = 1; i <= 12; i++) {\r\n      this.keyBindings.set(`F${i}`, `quick_slot_${i}`)\r\n    }\r\n    \r\n    // Prevent default for game keys\r\n    this.preventDefaultKeys = new Set([\r\n      'Tab', 'Enter', 'Escape', ' ',\r\n      'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight',\r\n      ...Array.from({ length: 12 }, (_, i) => `F${i + 1}`)\r\n    ])\r\n  }\r\n\r\n  /**\r\n   * Handle mouse move\r\n   */\r\n  private handleMouseMove(event: MouseEvent): void {\r\n    if (!this.canvas) return\r\n    \r\n    const rect = this.canvas.getBoundingClientRect()\r\n    const x = (event.clientX - rect.left) * this.mouseSensitivity\r\n    const y = (event.clientY - rect.top) * this.mouseSensitivity\r\n    \r\n    const oldPosition = { ...this.state.mouse.position }\r\n    this.state.mouse.position = { x, y }\r\n    \r\n    // Check for drag\r\n    if (this.dragStart && !this.isDragging) {\r\n      const distance = Math.sqrt(\r\n        Math.pow(x - this.dragStart.x, 2) + \r\n        Math.pow(y - this.dragStart.y, 2)\r\n      )\r\n      \r\n      if (distance > this.dragThreshold) {\r\n        this.isDragging = true\r\n        this.world.events.emit('ui:drag_start', {\r\n          playerId: this.playerId,\r\n          start: this.dragStart,\r\n          current: { x, y }\r\n        })\r\n      }\r\n    }\r\n    \r\n    // Emit events\r\n    this.world.events.emit('input:mouse_move', {\r\n      playerId: this.playerId,\r\n      position: { x, y },\r\n      delta: { x: x - oldPosition.x, y: y - oldPosition.y },\r\n      buttons: this.state.mouse.buttons,\r\n      isDragging: this.isDragging\r\n    })\r\n    \r\n    // Find hovered UI element\r\n    this.updateHoveredElement({ x, y })\r\n  }\r\n\r\n  /**\r\n   * Handle mouse down\r\n   */\r\n  private handleMouseDown(event: MouseEvent): void {\r\n    if (!this.canvas) return\r\n    \r\n    const rect = this.canvas.getBoundingClientRect()\r\n    const x = (event.clientX - rect.left) * this.mouseSensitivity\r\n    const y = (event.clientY - rect.top) * this.mouseSensitivity\r\n    \r\n    this.state.mouse.buttons[event.button] = true\r\n    this.dragStart = { x, y }\r\n    \r\n    this.world.events.emit('input:mouse_down', {\r\n      playerId: this.playerId,\r\n      position: { x, y },\r\n      button: event.button,\r\n      shift: event.shiftKey,\r\n      ctrl: event.ctrlKey,\r\n      alt: event.altKey\r\n    })\r\n    \r\n    // Find clicked element\r\n    this.handleElementClick({ x, y }, event.button)\r\n  }\r\n\r\n  /**\r\n   * Handle mouse up\r\n   */\r\n  private handleMouseUp(event: MouseEvent): void {\r\n    if (!this.canvas) return\r\n    \r\n    const rect = this.canvas.getBoundingClientRect()\r\n    const x = (event.clientX - rect.left) * this.mouseSensitivity\r\n    const y = (event.clientY - rect.top) * this.mouseSensitivity\r\n    \r\n    this.state.mouse.buttons[event.button] = false\r\n    \r\n    // Handle drag end\r\n    if (this.isDragging && this.dragStart) {\r\n      this.world.events.emit('ui:drag_end', {\r\n        playerId: this.playerId,\r\n        start: this.dragStart,\r\n        end: { x, y }\r\n      })\r\n    }\r\n    \r\n    this.dragStart = null\r\n    this.isDragging = false\r\n    \r\n    this.world.events.emit('input:mouse_up', {\r\n      playerId: this.playerId,\r\n      position: { x, y },\r\n      button: event.button\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle mouse wheel\r\n   */\r\n  private handleMouseWheel(event: WheelEvent): void {\r\n    event.preventDefault()\r\n    \r\n    const delta = event.deltaY > 0 ? -1 : 1\r\n    this.state.mouse.wheel = delta\r\n    \r\n    this.world.events.emit('input:mouse_wheel', {\r\n      playerId: this.playerId,\r\n      delta,\r\n      position: { ...this.state.mouse.position }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle key down\r\n   */\r\n  private handleKeyDown(event: KeyboardEvent): void {\r\n    // Prevent default for game keys\r\n    if (this.preventDefaultKeys.has(event.key)) {\r\n      event.preventDefault()\r\n    }\r\n    \r\n    // Ignore if already pressed\r\n    if (this.state.keyboard.keys.has(event.key)) return\r\n    \r\n    this.state.keyboard.keys.add(event.key)\r\n    this.state.keyboard.shift = event.shiftKey\r\n    this.state.keyboard.ctrl = event.ctrlKey\r\n    this.state.keyboard.alt = event.altKey\r\n    \r\n    // Get action from key binding\r\n    const action = this.keyBindings.get(event.key)\r\n    \r\n    this.world.events.emit('input:key_down', {\r\n      playerId: this.playerId,\r\n      key: event.key,\r\n      action,\r\n      shift: event.shiftKey,\r\n      ctrl: event.ctrlKey,\r\n      alt: event.altKey\r\n    })\r\n    \r\n    // Handle UI shortcuts\r\n    if (action) {\r\n      this.handleKeyAction(action)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle key up\r\n   */\r\n  private handleKeyUp(event: KeyboardEvent): void {\r\n    this.state.keyboard.keys.delete(event.key)\r\n    this.state.keyboard.shift = event.shiftKey\r\n    this.state.keyboard.ctrl = event.ctrlKey\r\n    this.state.keyboard.alt = event.altKey\r\n    \r\n    const action = this.keyBindings.get(event.key)\r\n    \r\n    this.world.events.emit('input:key_up', {\r\n      playerId: this.playerId,\r\n      key: event.key,\r\n      action\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle touch start\r\n   */\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    \r\n    for (const touch of event.changedTouches) {\r\n      const rect = this.canvas!.getBoundingClientRect()\r\n      const x = touch.clientX - rect.left\r\n      const y = touch.clientY - rect.top\r\n      \r\n      const touchPoint: TouchPoint = {\r\n        id: touch.identifier,\r\n        position: { x, y },\r\n        startPosition: { x, y },\r\n        startTime: Date.now()\r\n      }\r\n      \r\n      this.state.touch.touches.push(touchPoint)\r\n      \r\n      this.world.events.emit('input:touch_start', {\r\n        playerId: this.playerId,\r\n        touchId: touch.identifier,\r\n        position: { x, y },\r\n        touches: this.state.touch.touches.length\r\n      })\r\n      \r\n      // Simulate mouse down for primary touch\r\n      if (this.state.touch.touches.length === 1) {\r\n        this.state.mouse.position = { x, y }\r\n        this.state.mouse.buttons[0] = true\r\n        this.dragStart = { x, y }\r\n        this.handleElementClick({ x, y }, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle touch move\r\n   */\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    \r\n    for (const touch of event.changedTouches) {\r\n      const rect = this.canvas!.getBoundingClientRect()\r\n      const x = touch.clientX - rect.left\r\n      const y = touch.clientY - rect.top\r\n      \r\n      const touchPoint = this.state.touch.touches.find(t => t.id === touch.identifier)\r\n      if (touchPoint) {\r\n        touchPoint.position = { x, y }\r\n        \r\n        // Simulate mouse move for primary touch\r\n        if (this.state.touch.touches[0]?.id === touch.identifier) {\r\n          this.state.mouse.position = { x, y }\r\n          this.updateHoveredElement({ x, y })\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.world.events.emit('input:touch_move', {\r\n      playerId: this.playerId,\r\n      touches: this.state.touch.touches\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle touch end\r\n   */\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    event.preventDefault()\r\n    \r\n    for (const touch of event.changedTouches) {\r\n      const index = this.state.touch.touches.findIndex(t => t.id === touch.identifier)\r\n      if (index !== -1) {\r\n        const touchPoint = this.state.touch.touches[index]\r\n        const duration = Date.now() - touchPoint.startTime\r\n        \r\n        // Check for tap vs drag\r\n        const distance = Math.sqrt(\r\n          Math.pow(touchPoint.position.x - touchPoint.startPosition.x, 2) +\r\n          Math.pow(touchPoint.position.y - touchPoint.startPosition.y, 2)\r\n        )\r\n        \r\n        if (distance < this.dragThreshold && duration < 500) {\r\n          // It's a tap\r\n          this.world.events.emit('input:tap', {\r\n            playerId: this.playerId,\r\n            position: touchPoint.position,\r\n            duration\r\n          })\r\n        }\r\n        \r\n        this.state.touch.touches.splice(index, 1)\r\n        \r\n        // Simulate mouse up for primary touch\r\n        if (index === 0) {\r\n          this.state.mouse.buttons[0] = false\r\n          this.dragStart = null\r\n          this.isDragging = false\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.world.events.emit('input:touch_end', {\r\n      playerId: this.playerId,\r\n      remainingTouches: this.state.touch.touches.length\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle key action\r\n   */\r\n  private handleKeyAction(action: string): void {\r\n    switch (action) {\r\n      case 'toggle_inventory':\r\n        this.world.events.emit('ui:toggle_interface', {\r\n          playerId: this.playerId,\r\n          interface: 'inventory'\r\n        })\r\n        break\r\n      case 'toggle_quest':\r\n        this.world.events.emit('ui:toggle_interface', {\r\n          playerId: this.playerId,\r\n          interface: 'quest'\r\n        })\r\n        break\r\n      case 'toggle_skills':\r\n        this.world.events.emit('ui:toggle_interface', {\r\n          playerId: this.playerId,\r\n          interface: 'skills'\r\n        })\r\n        break\r\n      case 'close_interface':\r\n        this.world.events.emit('ui:close_all', {\r\n          playerId: this.playerId\r\n        })\r\n        break\r\n      case 'focus_chat':\r\n        this.world.events.emit('ui:focus_chat', {\r\n          playerId: this.playerId\r\n        })\r\n        break\r\n      default:\r\n        // Emit generic action event\r\n        this.world.events.emit('input:action', {\r\n          playerId: this.playerId,\r\n          action\r\n        })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update hovered element\r\n   */\r\n  private updateHoveredElement(position: Vector2): void {\r\n    // This would check against UI elements to find what's hovered\r\n    // For now, just emit the position\r\n    this.world.events.emit('ui:hover', {\r\n      playerId: this.playerId,\r\n      position,\r\n      elementId: null // Would be determined by checking UI elements\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle element click\r\n   */\r\n  private handleElementClick(position: Vector2, button: number): void {\r\n    // This would check against UI elements to find what was clicked\r\n    // For now, just emit the position\r\n    this.world.events.emit('ui:click', {\r\n      playerId: this.playerId,\r\n      position,\r\n      button,\r\n      elementId: null // Would be determined by checking UI elements\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set key binding\r\n   */\r\n  setKeyBinding(key: string, action: string): void {\r\n    this.keyBindings.set(key, action)\r\n  }\r\n\r\n  /**\r\n   * Remove key binding\r\n   */\r\n  removeKeyBinding(key: string): void {\r\n    this.keyBindings.delete(key)\r\n  }\r\n\r\n  /**\r\n   * Get current input state\r\n   */\r\n  getState(): InputState {\r\n    return this.state\r\n  }\r\n\r\n  /**\r\n   * Is key pressed\r\n   */\r\n  isKeyPressed(key: string): boolean {\r\n    return this.state.keyboard.keys.has(key)\r\n  }\r\n\r\n  /**\r\n   * Is mouse button pressed\r\n   */\r\n  isMouseButtonPressed(button: number): boolean {\r\n    return this.state.mouse.buttons[button] || false\r\n  }\r\n\r\n  /**\r\n   * Get mouse position\r\n   */\r\n  getMousePosition(): Vector2 {\r\n    return { ...this.state.mouse.position }\r\n  }\r\n\r\n  /**\r\n   * Set mouse sensitivity\r\n   */\r\n  setMouseSensitivity(sensitivity: number): void {\r\n    this.mouseSensitivity = Math.max(0.1, Math.min(2.0, sensitivity))\r\n  }\r\n\r\n  /**\r\n   * Cleanup\r\n   */\r\n  destroy(): void {\r\n    if (this.canvas) {\r\n      // Remove all event listeners\r\n      this.canvas.removeEventListener('mousemove', this.handleMouseMove.bind(this))\r\n      this.canvas.removeEventListener('mousedown', this.handleMouseDown.bind(this))\r\n      this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this))\r\n      this.canvas.removeEventListener('wheel', this.handleMouseWheel.bind(this))\r\n      this.canvas.removeEventListener('touchstart', this.handleTouchStart.bind(this))\r\n      this.canvas.removeEventListener('touchmove', this.handleTouchMove.bind(this))\r\n      this.canvas.removeEventListener('touchend', this.handleTouchEnd.bind(this))\r\n    }\r\n    \r\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this))\r\n    window.removeEventListener('keyup', this.handleKeyUp.bind(this))\r\n  }\r\n} ", "/**\r\n * Keybinding System - Maps keyboard inputs to game actions\r\n * Provides a complete set of controls for all RPG features\r\n */\r\n\r\nexport interface Keybinding {\r\n  key: string\r\n  ctrl?: boolean\r\n  shift?: boolean\r\n  alt?: boolean\r\n  action: string\r\n  description: string\r\n  category: string\r\n}\r\n\r\nexport class KeybindingSystem {\r\n  private bindings: Map<string, Keybinding> = new Map()\r\n  private activeKeys: Set<string> = new Set()\r\n  private enabled: boolean = true\r\n\r\n  constructor() {\r\n    this.setupDefaultBindings()\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * Set up all default keybindings\r\n   */\r\n  private setupDefaultBindings(): void {\r\n    // Movement\r\n    this.addBinding({ key: 'w', action: 'move_forward', description: 'Move forward', category: 'Movement' })\r\n    this.addBinding({ key: 's', action: 'move_backward', description: 'Move backward', category: 'Movement' })\r\n    this.addBinding({ key: 'a', action: 'move_left', description: 'Move left', category: 'Movement' })\r\n    this.addBinding({ key: 'd', action: 'move_right', description: 'Move right', category: 'Movement' })\r\n    this.addBinding({ key: 'shift', action: 'run', description: 'Run/Walk toggle', category: 'Movement' })\r\n    this.addBinding({ key: ' ', action: 'jump', description: 'Jump', category: 'Movement' })\r\n\r\n    // Camera\r\n    this.addBinding({ key: 'q', action: 'rotate_camera_left', description: 'Rotate camera left', category: 'Camera' })\r\n    this.addBinding({ key: 'e', action: 'rotate_camera_right', description: 'Rotate camera right', category: 'Camera' })\r\n    this.addBinding({ key: 'r', action: 'reset_camera', description: 'Reset camera', category: 'Camera' })\r\n\r\n    // Combat\r\n    this.addBinding({ key: '1', action: 'combat_style_accurate', description: 'Accurate combat style', category: 'Combat' })\r\n    this.addBinding({ key: '2', action: 'combat_style_aggressive', description: 'Aggressive combat style', category: 'Combat' })\r\n    this.addBinding({ key: '3', action: 'combat_style_defensive', description: 'Defensive combat style', category: 'Combat' })\r\n    this.addBinding({ key: '4', action: 'combat_style_controlled', description: 'Controlled combat style', category: 'Combat' })\r\n    this.addBinding({ key: 'f', action: 'auto_retaliate', description: 'Toggle auto-retaliate', category: 'Combat' })\r\n\r\n    // UI Windows\r\n    this.addBinding({ key: 'i', action: 'toggle_inventory', description: 'Toggle inventory', category: 'Interface' })\r\n    this.addBinding({ key: 'b', action: 'toggle_bank', description: 'Toggle bank', category: 'Interface' })\r\n    this.addBinding({ key: 'k', action: 'toggle_skills', description: 'Toggle skills', category: 'Interface' })\r\n    this.addBinding({ key: 'j', action: 'toggle_quest_journal', description: 'Toggle quest journal', category: 'Interface' })\r\n    this.addBinding({ key: 'm', action: 'toggle_world_map', description: 'Toggle world map', category: 'Interface' })\r\n    this.addBinding({ key: 'p', action: 'toggle_prayer', description: 'Toggle prayer', category: 'Interface' })\r\n    this.addBinding({ key: 'o', action: 'toggle_options', description: 'Toggle options', category: 'Interface' })\r\n    this.addBinding({ key: 'escape', action: 'close_all_windows', description: 'Close all windows', category: 'Interface' })\r\n\r\n    // Quick Actions\r\n    this.addBinding({ key: 'x', action: 'examine', description: 'Examine target', category: 'Actions' })\r\n    this.addBinding({ key: 'g', action: 'pickup_item', description: 'Pick up nearest item', category: 'Actions' })\r\n    this.addBinding({ key: 't', action: 'talk_to_npc', description: 'Talk to nearest NPC', category: 'Actions' })\r\n    this.addBinding({ key: 'u', action: 'use_item', description: 'Use selected item', category: 'Actions' })\r\n\r\n    // Skills\r\n    this.addBinding({ key: 'c', action: 'skill_woodcutting', description: 'Chop nearest tree', category: 'Skills' })\r\n    this.addBinding({ key: 'v', action: 'skill_mining', description: 'Mine nearest rock', category: 'Skills' })\r\n    this.addBinding({ key: 'n', action: 'skill_fishing', description: 'Fish at nearest spot', category: 'Skills' })\r\n\r\n    // Magic\r\n    this.addBinding({ key: 'F1', action: 'quick_prayer_1', description: 'Quick prayer 1', category: 'Magic' })\r\n    this.addBinding({ key: 'F2', action: 'quick_prayer_2', description: 'Quick prayer 2', category: 'Magic' })\r\n    this.addBinding({ key: 'F3', action: 'quick_prayer_3', description: 'Quick prayer 3', category: 'Magic' })\r\n    this.addBinding({ key: 'F4', action: 'quick_prayer_4', description: 'Quick prayer 4', category: 'Magic' })\r\n\r\n    // Chat\r\n    this.addBinding({ key: 'enter', action: 'open_chat', description: 'Open chat', category: 'Communication' })\r\n    this.addBinding({ key: '/', action: 'quick_chat', description: 'Quick chat', category: 'Communication' })\r\n    this.addBinding({ key: 'tab', action: 'reply_last', description: 'Reply to last PM', category: 'Communication' })\r\n\r\n    // Function Keys\r\n    this.addBinding({ key: 'F5', action: 'toggle_run', description: 'Toggle run mode', category: 'Settings' })\r\n    this.addBinding({ key: 'F6', action: 'toggle_music', description: 'Toggle music', category: 'Settings' })\r\n    this.addBinding({ key: 'F7', action: 'toggle_effects', description: 'Toggle sound effects', category: 'Settings' })\r\n    this.addBinding({ key: 'F12', action: 'screenshot', description: 'Take screenshot', category: 'Settings' })\r\n\r\n    // Debug (Development only)\r\n    this.addBinding({ key: '`', action: 'toggle_debug', description: 'Toggle debug info', category: 'Debug' })\r\n    this.addBinding({ key: 'F9', action: 'spawn_test_npc', description: 'Spawn test NPC', category: 'Debug' })\r\n    this.addBinding({ key: 'F10', action: 'spawn_test_item', description: 'Spawn test item', category: 'Debug' })\r\n    this.addBinding({ key: 'F11', action: 'teleport_home', description: 'Teleport to home', category: 'Debug' })\r\n  }\r\n\r\n  /**\r\n   * Add a keybinding\r\n   */\r\n  private addBinding(binding: Keybinding): void {\r\n    const key = this.getBindingKey(binding)\r\n    this.bindings.set(key, binding)\r\n  }\r\n\r\n  /**\r\n   * Get unique key for binding\r\n   */\r\n  private getBindingKey(binding: Keybinding): string {\r\n    let key = binding.key.toLowerCase()\r\n    if (binding.ctrl) key = 'ctrl+' + key\r\n    if (binding.shift && binding.key !== 'shift') key = 'shift+' + key\r\n    if (binding.alt) key = 'alt+' + key\r\n    return key\r\n  }\r\n\r\n  /**\r\n   * Set up event listeners\r\n   */\r\n  private setupEventListeners(): void {\r\n    window.addEventListener('keydown', this.handleKeyDown.bind(this))\r\n    window.addEventListener('keyup', this.handleKeyUp.bind(this))\r\n    window.addEventListener('blur', this.handleBlur.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Handle key down event\r\n   */\r\n  private handleKeyDown(event: KeyboardEvent): void {\r\n    if (!this.enabled) return\r\n\r\n    // Don't handle if typing in input\r\n    if (this.isTypingInInput(event)) return\r\n\r\n    const key = this.getEventKey(event)\r\n    \r\n    // Prevent repeat events\r\n    if (this.activeKeys.has(key)) return\r\n    \r\n    this.activeKeys.add(key)\r\n    \r\n    const binding = this.bindings.get(key)\r\n    if (binding) {\r\n      event.preventDefault()\r\n      this.executeAction(binding.action, true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle key up event\r\n   */\r\n  private handleKeyUp(event: KeyboardEvent): void {\r\n    if (!this.enabled) return\r\n\r\n    const key = this.getEventKey(event)\r\n    this.activeKeys.delete(key)\r\n    \r\n    const binding = this.bindings.get(key)\r\n    if (binding) {\r\n      // Some actions need key up events (like movement)\r\n      if (this.isHoldAction(binding.action)) {\r\n        this.executeAction(binding.action, false)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle window blur\r\n   */\r\n  private handleBlur(): void {\r\n    // Clear all active keys when window loses focus\r\n    this.activeKeys.clear()\r\n  }\r\n\r\n  /**\r\n   * Get key from event\r\n   */\r\n  private getEventKey(event: KeyboardEvent): string {\r\n    let key = event.key.toLowerCase()\r\n    \r\n    // Normalize special keys\r\n    if (key === ' ') key = 'space'\r\n    if (key === 'arrowup') key = 'up'\r\n    if (key === 'arrowdown') key = 'down'\r\n    if (key === 'arrowleft') key = 'left'\r\n    if (key === 'arrowright') key = 'right'\r\n    \r\n    // Add modifiers\r\n    if (event.ctrlKey && key !== 'control') key = 'ctrl+' + key\r\n    if (event.shiftKey && key !== 'shift') key = 'shift+' + key\r\n    if (event.altKey && key !== 'alt') key = 'alt+' + key\r\n    \r\n    return key\r\n  }\r\n\r\n  /**\r\n   * Check if typing in input\r\n   */\r\n  private isTypingInInput(event: KeyboardEvent): boolean {\r\n    const target = event.target as HTMLElement\r\n    return target.tagName === 'INPUT' || \r\n           target.tagName === 'TEXTAREA' || \r\n           target.contentEditable === 'true'\r\n  }\r\n\r\n  /**\r\n   * Check if action is hold-based\r\n   */\r\n  private isHoldAction(action: string): boolean {\r\n    return action.startsWith('move_') || \r\n           action === 'run' ||\r\n           action.startsWith('rotate_camera_')\r\n  }\r\n\r\n  /**\r\n   * Execute an action\r\n   */\r\n  private executeAction(action: string, pressed: boolean): void {\r\n    // Emit event for other systems to handle\r\n    window.dispatchEvent(new CustomEvent('rpg:keybinding', {\r\n      detail: { action, pressed }\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Get all bindings\r\n   */\r\n  getBindings(): Keybinding[] {\r\n    return Array.from(this.bindings.values())\r\n  }\r\n\r\n  /**\r\n   * Get bindings by category\r\n   */\r\n  getBindingsByCategory(category: string): Keybinding[] {\r\n    return this.getBindings().filter(b => b.category === category)\r\n  }\r\n\r\n  /**\r\n   * Get categories\r\n   */\r\n  getCategories(): string[] {\r\n    const categories = new Set<string>()\r\n    this.bindings.forEach(b => categories.add(b.category))\r\n    return Array.from(categories)\r\n  }\r\n\r\n  /**\r\n   * Update binding\r\n   */\r\n  updateBinding(oldKey: string, newBinding: Keybinding): void {\r\n    this.bindings.delete(oldKey)\r\n    this.addBinding(newBinding)\r\n  }\r\n\r\n  /**\r\n   * Enable/disable system\r\n   */\r\n  setEnabled(enabled: boolean): void {\r\n    this.enabled = enabled\r\n    if (!enabled) {\r\n      this.activeKeys.clear()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if key is active\r\n   */\r\n  isKeyActive(key: string): boolean {\r\n    return this.activeKeys.has(key)\r\n  }\r\n\r\n  /**\r\n   * Get active movement keys\r\n   */\r\n  getActiveMovement(): { forward: boolean; backward: boolean; left: boolean; right: boolean; run: boolean } {\r\n    return {\r\n      forward: this.activeKeys.has('w'),\r\n      backward: this.activeKeys.has('s'),\r\n      left: this.activeKeys.has('a'),\r\n      right: this.activeKeys.has('d'),\r\n      run: this.activeKeys.has('shift')\r\n    }\r\n  }\r\n} ", "/**\r\n * UI System - Manages all user interface elements for human players\r\n * Provides HUD, inventory, chat, and other game interfaces\r\n */\r\n\r\nimport { System } from '../../core/systems/System'\r\nimport type { World, Entity } from '../../types'\r\nimport type { Vector2 } from '../types'\r\nimport { UIRenderer } from './UIRenderer'\r\nimport { InputHandler } from './InputHandler'\r\nimport { KeybindingSystem } from './KeybindingSystem'\r\n\r\nexport interface UIElement {\r\n  id: string\r\n  type: UIElementType\r\n  position: Vector2\r\n  size: Vector2\r\n  visible: boolean\r\n  interactive: boolean\r\n  layer: number\r\n  children?: UIElement[]\r\n  data?: any\r\n}\r\n\r\nexport enum UIElementType {\r\n  PANEL = 'panel',\r\n  BUTTON = 'button',\r\n  TEXT = 'text',\r\n  ICON = 'icon',\r\n  PROGRESS_BAR = 'progress_bar',\r\n  INVENTORY_SLOT = 'inventory_slot',\r\n  CHAT_BOX = 'chat_box',\r\n  MINIMAP = 'minimap',\r\n  CONTEXT_MENU = 'context_menu'\r\n}\r\n\r\nexport interface UIComponent {\r\n  type: 'ui'\r\n  elements: Map<string, UIElement>\r\n  activeInterface?: string\r\n  hoveredElement?: string\r\n  focusedElement?: string\r\n}\r\n\r\nexport interface UITheme {\r\n  colors: {\r\n    primary: string\r\n    secondary: string\r\n    background: string\r\n    text: string\r\n    border: string\r\n    hover: string\r\n    active: string\r\n    disabled: string\r\n  }\r\n  fonts: {\r\n    main: string\r\n    heading: string\r\n    chat: string\r\n  }\r\n  sizes: {\r\n    text: number\r\n    iconSmall: number\r\n    iconMedium: number\r\n    iconLarge: number\r\n    borderRadius: number\r\n    padding: number\r\n  }\r\n}\r\n\r\nexport class UISystem extends System {\r\n  private interfaces: Map<string, UIInterface> = new Map()\r\n  private theme: UITheme\r\n  private elementIdCounter: number = 0\r\n  \r\n  // UI state\r\n  private activeInterfaces: Set<string> = new Set()\r\n  private draggedElement: UIElement | null = null\r\n  private tooltipElement: UIElement | null = null\r\n  \r\n  private canvas: HTMLCanvasElement | null = null\r\n  private renderer: UIRenderer | null = null\r\n  private inputHandler: InputHandler | null = null\r\n  private keybindingSystem: KeybindingSystem | null = null\r\n  \r\n  constructor(world: World) {\r\n    super(world)\r\n    this.theme = this.getDefaultTheme()\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    console.log('[UISystem] Initializing...')\r\n    \r\n    // Create canvas\r\n    this.canvas = document.createElement('canvas')\r\n    this.canvas.id = 'rpg-ui-canvas'\r\n    this.canvas.style.position = 'absolute'\r\n    this.canvas.style.top = '0'\r\n    this.canvas.style.left = '0'\r\n    this.canvas.style.width = '100%'\r\n    this.canvas.style.height = '100%'\r\n    this.canvas.style.pointerEvents = 'auto'\r\n    this.canvas.style.zIndex = '1000'\r\n    \r\n    // Add to body\r\n    if (typeof document !== 'undefined') {\r\n      document.body.appendChild(this.canvas)\r\n      \r\n      // Initialize renderer\r\n      this.renderer = new UIRenderer(this.canvas)\r\n      \r\n      // Initialize input handler\r\n      this.inputHandler = new InputHandler(this.canvas, this)\r\n      \r\n      // Initialize keybinding system\r\n      this.keybindingSystem = new KeybindingSystem()\r\n      \r\n      // Set up keybinding listener\r\n      this.setupKeybindingListener()\r\n    }\r\n    \r\n    // Create default interfaces\r\n    this.createHUD()\r\n    this.createInventoryInterface()\r\n    this.createChatInterface()\r\n    this.createBankInterface()\r\n    this.createShopInterface()\r\n    this.createQuestInterface()\r\n    this.createSkillsInterface()\r\n    this.createContextMenu()\r\n    this.createSettingsInterface()\r\n    \r\n    // Listen for events\r\n    this.world.events.on('player:connect', this.handlePlayerConnect.bind(this))\r\n    this.world.events.on('player:disconnect', this.handlePlayerDisconnect.bind(this))\r\n    this.world.events.on('ui:click', this.handleClick.bind(this))\r\n    this.world.events.on('ui:hover', this.handleHover.bind(this))\r\n    this.world.events.on('ui:drag', this.handleDrag.bind(this))\r\n    \r\n    console.log('[UISystem] Initialized with game interfaces')\r\n  }\r\n\r\n  /**\r\n   * Get default theme\r\n   */\r\n  private getDefaultTheme(): UITheme {\r\n    return {\r\n      colors: {\r\n        primary: '#4a3c28',\r\n        secondary: '#8b7355',\r\n        background: '#2c2416',\r\n        text: '#f4e4bc',\r\n        border: '#6b5d54',\r\n        hover: '#5a4a3a',\r\n        active: '#7a6a5a',\r\n        disabled: '#3a3026'\r\n      },\r\n      fonts: {\r\n        main: 'RuneScape',\r\n        heading: 'RuneScape Bold',\r\n        chat: 'RuneScape Chat'\r\n      },\r\n      sizes: {\r\n        text: 14,\r\n        iconSmall: 24,\r\n        iconMedium: 32,\r\n        iconLarge: 48,\r\n        borderRadius: 4,\r\n        padding: 8\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create HUD interface\r\n   */\r\n  private createHUD(): void {\r\n    const hud: UIInterface = {\r\n      id: 'hud',\r\n      name: 'HUD',\r\n      elements: new Map(),\r\n      layout: 'fixed',\r\n      visible: true,\r\n      alwaysVisible: true\r\n    }\r\n\r\n    // Health bar\r\n    const healthBar = this.createElement({\r\n      type: UIElementType.PROGRESS_BAR,\r\n      position: { x: 10, y: 10 },\r\n      size: { x: 200, y: 30 },\r\n      data: {\r\n        current: 10,\r\n        max: 10,\r\n        color: '#ff0000',\r\n        label: 'Health'\r\n      }\r\n    })\r\n    hud.elements.set(healthBar.id, healthBar)\r\n\r\n    // Prayer bar\r\n    const prayerBar = this.createElement({\r\n      type: UIElementType.PROGRESS_BAR,\r\n      position: { x: 10, y: 45 },\r\n      size: { x: 200, y: 30 },\r\n      data: {\r\n        current: 1,\r\n        max: 1,\r\n        color: '#00ff00',\r\n        label: 'Prayer'\r\n      }\r\n    })\r\n    hud.elements.set(prayerBar.id, prayerBar)\r\n\r\n    // Run energy\r\n    const runEnergy = this.createElement({\r\n      type: UIElementType.PROGRESS_BAR,\r\n      position: { x: 10, y: 80 },\r\n      size: { x: 200, y: 30 },\r\n      data: {\r\n        current: 100,\r\n        max: 100,\r\n        color: '#ffff00',\r\n        label: 'Run Energy'\r\n      }\r\n    })\r\n    hud.elements.set(runEnergy.id, runEnergy)\r\n\r\n    // Minimap\r\n    const minimap = this.createElement({\r\n      type: UIElementType.MINIMAP,\r\n      position: { x: -220, y: 10 }, // Negative x for right alignment\r\n      size: { x: 200, y: 200 },\r\n      data: {\r\n        zoom: 2,\r\n        showPlayers: true,\r\n        showNPCs: true,\r\n        showItems: false\r\n      }\r\n    })\r\n    hud.elements.set(minimap.id, minimap)\r\n\r\n    // Combat level\r\n    const combatLevel = this.createElement({\r\n      type: UIElementType.TEXT,\r\n      position: { x: 220, y: 10 },\r\n      size: { x: 100, y: 30 },\r\n      data: {\r\n        text: 'Combat: 3',\r\n        fontSize: 16,\r\n        color: this.theme.colors.text\r\n      }\r\n    })\r\n    hud.elements.set(combatLevel.id, combatLevel)\r\n\r\n    this.interfaces.set('hud', hud)\r\n  }\r\n\r\n  /**\r\n   * Create inventory interface\r\n   */\r\n  private createInventoryInterface(): void {\r\n    const inventory: UIInterface = {\r\n      id: 'inventory',\r\n      name: 'Inventory',\r\n      elements: new Map(),\r\n      layout: 'grid',\r\n      visible: false,\r\n      position: { x: -280, y: 220 },\r\n      size: { x: 260, y: 340 }\r\n    }\r\n\r\n    // Create inventory slots (7x4 grid)\r\n    for (let row = 0; row < 7; row++) {\r\n      for (let col = 0; col < 4; col++) {\r\n        const slot = this.createElement({\r\n          type: UIElementType.INVENTORY_SLOT,\r\n          position: { \r\n            x: 10 + col * 62,\r\n            y: 40 + row * 44\r\n          },\r\n          size: { x: 56, y: 40 },\r\n          data: {\r\n            slotIndex: row * 4 + col,\r\n            item: null\r\n          }\r\n        })\r\n        inventory.elements.set(slot.id, slot)\r\n      }\r\n    }\r\n\r\n    // Close button\r\n    const closeBtn = this.createElement({\r\n      type: UIElementType.BUTTON,\r\n      position: { x: 230, y: 5 },\r\n      size: { x: 24, y: 24 },\r\n      data: {\r\n        icon: 'close',\r\n        action: 'toggle_inventory'\r\n      }\r\n    })\r\n    inventory.elements.set(closeBtn.id, closeBtn)\r\n\r\n    this.interfaces.set('inventory', inventory)\r\n  }\r\n\r\n  /**\r\n   * Create chat interface\r\n   */\r\n  private createChatInterface(): void {\r\n    const chat: UIInterface = {\r\n      id: 'chat',\r\n      name: 'Chat',\r\n      elements: new Map(),\r\n      layout: 'fixed',\r\n      visible: true,\r\n      alwaysVisible: true,\r\n      position: { x: 10, y: -200 }, // Bottom left\r\n      size: { x: 500, y: 180 }\r\n    }\r\n\r\n    // Chat box\r\n    const chatBox = this.createElement({\r\n      type: UIElementType.CHAT_BOX,\r\n      position: { x: 0, y: 0 },\r\n      size: { x: 500, y: 150 },\r\n      data: {\r\n        messages: [],\r\n        maxMessages: 100,\r\n        tabs: ['All', 'Game', 'Public', 'Private', 'Clan', 'Trade']\r\n      }\r\n    })\r\n    chat.elements.set(chatBox.id, chatBox)\r\n\r\n    // Input field\r\n    const inputField = this.createElement({\r\n      type: UIElementType.TEXT,\r\n      position: { x: 0, y: 155 },\r\n      size: { x: 500, y: 25 },\r\n      interactive: true,\r\n      data: {\r\n        placeholder: 'Press Enter to chat...',\r\n        maxLength: 128,\r\n        editable: true\r\n      }\r\n    })\r\n    chat.elements.set(inputField.id, inputField)\r\n\r\n    this.interfaces.set('chat', chat)\r\n  }\r\n\r\n  /**\r\n   * Create bank interface\r\n   */\r\n  private createBankInterface(): void {\r\n    const bank: UIInterface = {\r\n      id: 'bank',\r\n      name: 'Bank',\r\n      elements: new Map(),\r\n      layout: 'tabs',\r\n      visible: false,\r\n      position: { x: 100, y: 50 },\r\n      size: { x: 600, y: 400 }\r\n    }\r\n\r\n    // Bank tabs\r\n    for (let i = 0; i < 9; i++) {\r\n      const tab = this.createElement({\r\n        type: UIElementType.BUTTON,\r\n        position: { x: 10 + i * 60, y: 10 },\r\n        size: { x: 50, y: 30 },\r\n        data: {\r\n          text: i === 0 ? 'All' : `Tab ${i}`,\r\n          tabIndex: i,\r\n          action: 'switch_bank_tab'\r\n        }\r\n      })\r\n      bank.elements.set(tab.id, tab)\r\n    }\r\n\r\n    // Bank slots (8x6 grid per tab)\r\n    for (let row = 0; row < 6; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n        const slot = this.createElement({\r\n          type: UIElementType.INVENTORY_SLOT,\r\n          position: { \r\n            x: 10 + col * 70,\r\n            y: 50 + row * 50\r\n          },\r\n          size: { x: 64, y: 44 },\r\n          data: {\r\n            slotIndex: row * 8 + col,\r\n            item: null,\r\n            isBank: true\r\n          }\r\n        })\r\n        bank.elements.set(slot.id, slot)\r\n      }\r\n    }\r\n\r\n    // Close button\r\n    const closeBtn = this.createElement({\r\n      type: UIElementType.BUTTON,\r\n      position: { x: 560, y: 10 },\r\n      size: { x: 30, y: 30 },\r\n      data: {\r\n        icon: 'close',\r\n        action: 'close_bank'\r\n      }\r\n    })\r\n    bank.elements.set(closeBtn.id, closeBtn)\r\n\r\n    this.interfaces.set('bank', bank)\r\n  }\r\n\r\n  /**\r\n   * Create shop interface\r\n   */\r\n  private createShopInterface(): void {\r\n    const shop: UIInterface = {\r\n      id: 'shop',\r\n      name: 'Shop',\r\n      elements: new Map(),\r\n      layout: 'fixed',\r\n      visible: false,\r\n      position: { x: 150, y: 100 },\r\n      size: { x: 500, y: 350 }\r\n    }\r\n\r\n    // Shop title\r\n    const title = this.createElement({\r\n      type: UIElementType.TEXT,\r\n      position: { x: 10, y: 10 },\r\n      size: { x: 480, y: 30 },\r\n      data: {\r\n        text: 'General Store',\r\n        fontSize: 20,\r\n        align: 'center'\r\n      }\r\n    })\r\n    shop.elements.set(title.id, title)\r\n\r\n    // Shop items (5x8 grid)\r\n    for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 5; col++) {\r\n        const slot = this.createElement({\r\n          type: UIElementType.INVENTORY_SLOT,\r\n          position: { \r\n            x: 10 + col * 95,\r\n            y: 50 + row * 35\r\n          },\r\n          size: { x: 90, y: 30 },\r\n          data: {\r\n            slotIndex: row * 5 + col,\r\n            item: null,\r\n            isShop: true,\r\n            showPrice: true\r\n          }\r\n        })\r\n        shop.elements.set(slot.id, slot)\r\n      }\r\n    }\r\n\r\n    // Close button\r\n    const closeBtn = this.createElement({\r\n      type: UIElementType.BUTTON,\r\n      position: { x: 460, y: 10 },\r\n      size: { x: 30, y: 30 },\r\n      data: {\r\n        icon: 'close',\r\n        action: 'close_shop'\r\n      }\r\n    })\r\n    shop.elements.set(closeBtn.id, closeBtn)\r\n\r\n    this.interfaces.set('shop', shop)\r\n  }\r\n\r\n  /**\r\n   * Create quest interface\r\n   */\r\n  private createQuestInterface(): void {\r\n    const quest: UIInterface = {\r\n      id: 'quest',\r\n      name: 'Quest Journal',\r\n      elements: new Map(),\r\n      layout: 'list',\r\n      visible: false,\r\n      position: { x: 200, y: 50 },\r\n      size: { x: 400, y: 500 }\r\n    }\r\n\r\n    // Quest list will be populated dynamically\r\n    const questList = this.createElement({\r\n      type: UIElementType.PANEL,\r\n      position: { x: 10, y: 40 },\r\n      size: { x: 380, y: 450 },\r\n      data: {\r\n        scrollable: true,\r\n        quests: []\r\n      }\r\n    })\r\n    quest.elements.set(questList.id, questList)\r\n\r\n    this.interfaces.set('quest', quest)\r\n  }\r\n\r\n  /**\r\n   * Create skills interface\r\n   */\r\n  private createSkillsInterface(): void {\r\n    const skills: UIInterface = {\r\n      id: 'skills',\r\n      name: 'Skills',\r\n      elements: new Map(),\r\n      layout: 'grid',\r\n      visible: false,\r\n      position: { x: -280, y: 50 },\r\n      size: { x: 260, y: 400 }\r\n    }\r\n\r\n    // Skill icons in 3x8 grid\r\n    const skillNames = [\r\n      'Attack', 'Strength', 'Defence', 'Ranged', 'Prayer', 'Magic',\r\n      'Runecraft', 'Construction', 'Hitpoints', 'Agility', 'Herblore', 'Thieving',\r\n      'Crafting', 'Fletching', 'Slayer', 'Hunter', 'Mining', 'Smithing',\r\n      'Fishing', 'Cooking', 'Firemaking', 'Woodcutting', 'Farming'\r\n    ]\r\n\r\n    skillNames.forEach((skill, index) => {\r\n      const row = Math.floor(index / 3)\r\n      const col = index % 3\r\n      \r\n      const skillIcon = this.createElement({\r\n        type: UIElementType.ICON,\r\n        position: { \r\n          x: 10 + col * 80,\r\n          y: 40 + row * 45\r\n        },\r\n        size: { x: 75, y: 40 },\r\n        data: {\r\n          skill: skill.toLowerCase(),\r\n          level: 1,\r\n          experience: 0,\r\n          showTooltip: true\r\n        }\r\n      })\r\n      skills.elements.set(skillIcon.id, skillIcon)\r\n    })\r\n\r\n    this.interfaces.set('skills', skills)\r\n  }\r\n\r\n  /**\r\n   * Create context menu\r\n   */\r\n  private createContextMenu(): void {\r\n    const contextMenu: UIInterface = {\r\n      id: 'context_menu',\r\n      name: 'Context Menu',\r\n      elements: new Map(),\r\n      layout: 'vertical',\r\n      visible: false,\r\n      position: { x: 0, y: 0 },\r\n      size: { x: 150, y: 0 } // Height calculated dynamically\r\n    }\r\n\r\n    this.interfaces.set('context_menu', contextMenu)\r\n  }\r\n\r\n  /**\r\n   * Create settings interface\r\n   */\r\n  private createSettingsInterface(): void {\r\n    const settings: UIInterface = {\r\n      id: 'settings',\r\n      name: 'Settings',\r\n      elements: new Map(),\r\n      layout: 'tabs',\r\n      visible: false,\r\n      position: { x: 150, y: 50 },\r\n      size: { x: 500, y: 400 }\r\n    }\r\n\r\n    // Setting categories\r\n    const categories = ['Graphics', 'Audio', 'Controls', 'Gameplay']\r\n    categories.forEach((category, index) => {\r\n      const tab = this.createElement({\r\n        type: UIElementType.BUTTON,\r\n        position: { x: 10 + index * 120, y: 10 },\r\n        size: { x: 110, y: 30 },\r\n        data: {\r\n          text: category,\r\n          action: 'switch_settings_tab'\r\n        }\r\n      })\r\n      settings.elements.set(tab.id, tab)\r\n    })\r\n\r\n    this.interfaces.set('settings', settings)\r\n  }\r\n\r\n  /**\r\n   * Create UI element\r\n   */\r\n  private createElement(options: Partial<UIElement>): UIElement {\r\n    return {\r\n      id: `ui_element_${this.elementIdCounter++}`,\r\n      type: options.type || UIElementType.PANEL,\r\n      position: options.position || { x: 0, y: 0 },\r\n      size: options.size || { x: 100, y: 100 },\r\n      visible: options.visible !== false,\r\n      interactive: options.interactive !== false,\r\n      layer: options.layer || 0,\r\n      children: options.children || [],\r\n      data: options.data || {}\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle player connect\r\n   */\r\n  private handlePlayerConnect(data: { playerId: string }): void {\r\n    const player = this.world.entities.get(data.playerId)\r\n    if (!player) return\r\n\r\n    // Add UI component\r\n    const uiComponent: UIComponent = {\r\n      type: 'ui',\r\n      elements: new Map(),\r\n      activeInterface: undefined,\r\n      hoveredElement: undefined,\r\n      focusedElement: undefined\r\n    }\r\n    player.addComponent('ui', uiComponent)\r\n\r\n    // Show default interfaces\r\n    this.showInterface(data.playerId, 'hud')\r\n    this.showInterface(data.playerId, 'chat')\r\n  }\r\n\r\n  /**\r\n   * Handle player disconnect\r\n   */\r\n  private handlePlayerDisconnect(data: { playerId: string }): void {\r\n    // Cleanup UI state for player\r\n  }\r\n\r\n  /**\r\n   * Show interface\r\n   */\r\n  public showInterface(playerId: string, interfaceId: string): void {\r\n    const player = this.world.entities.get(playerId)\r\n    if (!player) return\r\n\r\n    const uiComponent = player.getComponent('ui') as UIComponent\r\n    if (!uiComponent) return\r\n\r\n    const ui = this.interfaces.get(interfaceId)\r\n    if (!ui) return\r\n\r\n    // Add to active interfaces\r\n    this.activeInterfaces.add(interfaceId)\r\n    \r\n    // Update player's UI\r\n    uiComponent.activeInterface = interfaceId\r\n\r\n    this.world.events.emit('ui:interface_shown', {\r\n      playerId,\r\n      interfaceId\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Hide interface\r\n   */\r\n  public hideInterface(playerId: string, interfaceId: string): void {\r\n    const player = this.world.entities.get(playerId)\r\n    if (!player) return\r\n\r\n    const uiComponent = player.getComponent('ui') as UIComponent\r\n    if (!uiComponent) return\r\n\r\n    // Remove from active interfaces\r\n    this.activeInterfaces.delete(interfaceId)\r\n    \r\n    // Clear if it was the active interface\r\n    if (uiComponent.activeInterface === interfaceId) {\r\n      uiComponent.activeInterface = undefined\r\n    }\r\n\r\n    this.world.events.emit('ui:interface_hidden', {\r\n      playerId,\r\n      interfaceId\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Toggle interface\r\n   */\r\n  public toggleInterface(playerId: string, interfaceId: string): void {\r\n    if (this.activeInterfaces.has(interfaceId)) {\r\n      this.hideInterface(playerId, interfaceId)\r\n    } else {\r\n      this.showInterface(playerId, interfaceId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle click\r\n   */\r\n  private handleClick(data: { playerId: string; elementId: string; button: number }): void {\r\n    const element = this.findElement(data.elementId)\r\n    if (!element || !element.interactive) return\r\n\r\n    // Handle element-specific actions\r\n    if (element.data.action) {\r\n      this.handleAction(data.playerId, element.data.action, element)\r\n    }\r\n\r\n    this.world.events.emit('ui:element_clicked', {\r\n      playerId: data.playerId,\r\n      element,\r\n      button: data.button\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle hover\r\n   */\r\n  private handleHover(data: { playerId: string; elementId: string | null }): void {\r\n    const player = this.world.entities.get(data.playerId)\r\n    if (!player) return\r\n\r\n    const uiComponent = player.getComponent('ui') as UIComponent\r\n    if (!uiComponent) return\r\n\r\n    uiComponent.hoveredElement = data.elementId || undefined\r\n\r\n    if (data.elementId) {\r\n      const element = this.findElement(data.elementId)\r\n      if (element?.data.showTooltip) {\r\n        this.showTooltip(data.playerId, element)\r\n      }\r\n    } else {\r\n      this.hideTooltip(data.playerId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle drag\r\n   */\r\n  private handleDrag(data: { playerId: string; elementId: string; start: Vector2; end: Vector2 }): void {\r\n    const element = this.findElement(data.elementId)\r\n    if (!element || !element.data.draggable) return\r\n\r\n    // Handle dragging logic (e.g., moving items between slots)\r\n    this.world.events.emit('ui:element_dragged', {\r\n      playerId: data.playerId,\r\n      element,\r\n      start: data.start,\r\n      end: data.end\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Find element by ID\r\n   */\r\n  private findElement(elementId: string): UIElement | null {\r\n    for (const ui of this.interfaces.values()) {\r\n      const element = ui.elements.get(elementId)\r\n      if (element) return element\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Handle UI action\r\n   */\r\n  private handleAction(playerId: string, action: string, element: UIElement): void {\r\n    switch (action) {\r\n      case 'toggle_inventory':\r\n        this.toggleInterface(playerId, 'inventory')\r\n        break\r\n      case 'close_bank':\r\n        this.hideInterface(playerId, 'bank')\r\n        break\r\n      case 'close_shop':\r\n        this.hideInterface(playerId, 'shop')\r\n        break\r\n      case 'switch_bank_tab':\r\n        this.switchBankTab(playerId, element.data.tabIndex)\r\n        break\r\n      case 'switch_settings_tab':\r\n        this.switchSettingsTab(playerId, element.data.text)\r\n        break\r\n      default:\r\n        console.warn(`[UISystem] Unknown action: ${action}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch bank tab\r\n   */\r\n  private switchBankTab(playerId: string, tabIndex: number): void {\r\n    this.world.events.emit('bank:switch_tab', {\r\n      playerId,\r\n      tabIndex\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Switch settings tab\r\n   */\r\n  private switchSettingsTab(playerId: string, category: string): void {\r\n    // Update settings interface to show selected category\r\n  }\r\n\r\n  /**\r\n   * Show tooltip\r\n   */\r\n  private showTooltip(playerId: string, element: UIElement): void {\r\n    // Create and show tooltip element\r\n  }\r\n\r\n  /**\r\n   * Hide tooltip\r\n   */\r\n  private hideTooltip(playerId: string): void {\r\n    // Hide tooltip element\r\n  }\r\n\r\n  /**\r\n   * Update UI element\r\n   */\r\n  public updateElement(elementId: string, updates: Partial<UIElement>): void {\r\n    const element = this.findElement(elementId)\r\n    if (!element) return\r\n\r\n    Object.assign(element, updates)\r\n    \r\n    this.world.events.emit('ui:element_updated', {\r\n      elementId,\r\n      updates\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update HUD\r\n   */\r\n  public updateHUD(playerId: string, data: any): void {\r\n    const player = this.world.entities.get(playerId)\r\n    if (!player) return\r\n\r\n    // Update health bar\r\n    // Update prayer bar\r\n    // Update run energy\r\n    // Update combat level\r\n  }\r\n\r\n  /**\r\n   * Add chat message\r\n   */\r\n  public addChatMessage(message: {\r\n    type: 'game' | 'public' | 'private' | 'clan' | 'trade'\r\n    sender?: string\r\n    text: string\r\n    color?: string\r\n    timestamp?: number\r\n  }): void {\r\n    const chat = this.interfaces.get('chat')\r\n    if (!chat) return\r\n\r\n    const chatBox = Array.from(chat.elements.values()).find(e => e.type === UIElementType.CHAT_BOX)\r\n    if (!chatBox) return\r\n\r\n    // Add message to chat box\r\n    chatBox.data.messages.push({\r\n      ...message,\r\n      timestamp: message.timestamp || Date.now()\r\n    })\r\n\r\n    // Limit messages\r\n    if (chatBox.data.messages.length > chatBox.data.maxMessages) {\r\n      chatBox.data.messages.shift()\r\n    }\r\n\r\n    this.world.events.emit('chat:message_added', message)\r\n  }\r\n\r\n  /**\r\n   * Show context menu\r\n   */\r\n  public showContextMenu(playerId: string, position: Vector2, options: string[]): void {\r\n    const contextMenu = this.interfaces.get('context_menu')\r\n    if (!contextMenu) return\r\n\r\n    // Clear existing options\r\n    contextMenu.elements.clear()\r\n\r\n    // Add options\r\n    options.forEach((option, index) => {\r\n      const button = this.createElement({\r\n        type: UIElementType.BUTTON,\r\n        position: { x: 0, y: index * 25 },\r\n        size: { x: 150, y: 25 },\r\n        data: {\r\n          text: option,\r\n          action: `context_${option.toLowerCase().replace(' ', '_')}`\r\n        }\r\n      })\r\n      contextMenu.elements.set(button.id, button)\r\n    })\r\n\r\n    // Update position and size\r\n    contextMenu.position = position\r\n    contextMenu.size!.y = options.length * 25\r\n    contextMenu.visible = true\r\n\r\n    this.showInterface(playerId, 'context_menu')\r\n  }\r\n\r\n  /**\r\n   * Get active interfaces for player\r\n   */\r\n  public getActiveInterfaces(playerId: string): string[] {\r\n    const player = this.world.entities.get(playerId)\r\n    if (!player) return []\r\n\r\n    const uiComponent = player.getComponent('ui') as UIComponent\r\n    if (!uiComponent) return []\r\n\r\n    return Array.from(this.activeInterfaces)\r\n  }\r\n\r\n  /**\r\n   * Serialize UI state\r\n   */\r\n  serialize(): any {\r\n    return {\r\n      interfaces: Object.fromEntries(\r\n        Array.from(this.interfaces.entries()).map(([id, ui]) => [\r\n          id,\r\n          {\r\n            ...ui,\r\n            elements: Object.fromEntries(ui.elements)\r\n          }\r\n        ])\r\n      ),\r\n      activeInterfaces: Array.from(this.activeInterfaces),\r\n      theme: this.theme\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deserialize UI state\r\n   */\r\n  deserialize(data: any): void {\r\n    if (data.interfaces) {\r\n      this.interfaces = new Map(\r\n        Object.entries(data.interfaces).map(([id, ui]: [string, any]) => [\r\n          id,\r\n          {\r\n            ...ui,\r\n            elements: new Map(Object.entries(ui.elements || {}))\r\n          }\r\n        ])\r\n      )\r\n    }\r\n    \r\n    if (data.activeInterfaces) {\r\n      this.activeInterfaces = new Set(data.activeInterfaces)\r\n    }\r\n    \r\n    if (data.theme) {\r\n      this.theme = data.theme\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update loop\r\n   */\r\n  update(_delta: number): void {\r\n    // Update animations\r\n    // Update tooltips\r\n    // Update drag operations\r\n  }\r\n\r\n  /**\r\n   * Set up keybinding listener\r\n   */\r\n  private setupKeybindingListener(): void {\r\n    window.addEventListener('rpg:keybinding', (event: any) => {\r\n      const { action, pressed } = event.detail\r\n      this.handleKeybinding(action, pressed)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle keybinding action\r\n   */\r\n  private handleKeybinding(action: string, pressed: boolean): void {\r\n    // Handle UI window toggles\r\n    if (pressed) {\r\n      switch (action) {\r\n        case 'toggle_inventory':\r\n          this.toggleWindow('inventory')\r\n          break\r\n        case 'toggle_bank':\r\n          this.toggleWindow('bank')\r\n          break\r\n        case 'toggle_skills':\r\n          this.toggleWindow('skills')\r\n          break\r\n        case 'toggle_quest_journal':\r\n          this.toggleWindow('quest')\r\n          break\r\n        case 'toggle_world_map':\r\n          this.toggleWindow('worldMap')\r\n          break\r\n        case 'toggle_prayer':\r\n          this.toggleWindow('prayer')\r\n          break\r\n        case 'toggle_options':\r\n          this.toggleWindow('settings')\r\n          break\r\n        case 'close_all_windows':\r\n          this.closeAllWindows()\r\n          break\r\n        case 'open_chat':\r\n          this.focusChat()\r\n          break\r\n      }\r\n    }\r\n    \r\n    // Handle movement (continuous actions)\r\n    if (action.startsWith('move_') || action === 'run') {\r\n      this.handleMovement(action, pressed)\r\n    }\r\n    \r\n    // Handle quick actions\r\n    if (pressed && action.startsWith('skill_')) {\r\n      this.handleSkillAction(action)\r\n    }\r\n    \r\n    // Handle combat actions\r\n    if (pressed && action.startsWith('combat_style_')) {\r\n      this.handleCombatStyle(action)\r\n    }\r\n    \r\n    // Emit to world for non-UI actions\r\n    this.world.events.emit('ui:keybinding', { action, pressed })\r\n  }\r\n\r\n  /**\r\n   * Toggle a window\r\n   */\r\n  private toggleWindow(windowName: string): void {\r\n    const iface = this.interfaces.get(windowName)\r\n    if (iface && !iface.alwaysVisible) {\r\n      iface.visible = !iface.visible\r\n      \r\n      // Update active interfaces\r\n      if (iface.visible) {\r\n        this.activeInterfaces.add(windowName)\r\n      } else {\r\n        this.activeInterfaces.delete(windowName)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close all windows\r\n   */\r\n  private closeAllWindows(): void {\r\n    this.interfaces.forEach((iface, name) => {\r\n      if (!iface.alwaysVisible) {\r\n        iface.visible = false\r\n        this.activeInterfaces.delete(name)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Focus chat\r\n   */\r\n  private focusChat(): void {\r\n    const chatInterface = this.interfaces.get('chat')\r\n    if (chatInterface) {\r\n      chatInterface.visible = true\r\n      this.activeInterfaces.add('chat')\r\n      // TODO: Focus chat input element\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle movement keys\r\n   */\r\n  private handleMovement(action: string, pressed: boolean): void {\r\n    if (!this.keybindingSystem) return\r\n    \r\n    // Get the local player ID from UI component\r\n    const localPlayerId = this.getLocalPlayerId()\r\n    if (!localPlayerId) return\r\n    \r\n    const player = this.world.entities.get(localPlayerId)\r\n    if (!player) return\r\n    \r\n    const movement = (this.world as any).getSystem('movement')\r\n    if (!movement) return\r\n    \r\n    // Get current movement state\r\n    const moveState = this.keybindingSystem.getActiveMovement()\r\n    \r\n    // Calculate movement vector\r\n    let dx = 0, dz = 0\r\n    if (moveState.forward) dz += 1\r\n    if (moveState.backward) dz -= 1\r\n    if (moveState.left) dx -= 1\r\n    if (moveState.right) dx += 1\r\n    \r\n    // Normalize diagonal movement\r\n    if (dx !== 0 && dz !== 0) {\r\n      const mag = Math.sqrt(dx * dx + dz * dz)\r\n      dx /= mag\r\n      dz /= mag\r\n    }\r\n    \r\n    // Apply movement\r\n    if (dx !== 0 || dz !== 0) {\r\n      const speed = moveState.run ? 2.0 : 1.0\r\n      const position = (player as any).position\r\n      if (position) {\r\n        const newPosition = {\r\n          x: position.x + dx * speed,\r\n          y: position.y,\r\n          z: position.z + dz * speed\r\n        }\r\n        \r\n        movement.moveEntity(player, newPosition)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get local player ID\r\n   */\r\n  private getLocalPlayerId(): string | null {\r\n    // This would normally come from the client state\r\n    // For now, return the first player entity\r\n    for (const [id, entity] of this.world.entities) {\r\n      if ((entity as any).type === 'player') {\r\n        return id\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Handle skill actions\r\n   */\r\n  private handleSkillAction(action: string): void {\r\n    const localPlayerId = this.getLocalPlayerId()\r\n    if (!localPlayerId) return\r\n    \r\n    const player = this.world.entities.get(localPlayerId)\r\n    if (!player) return\r\n    \r\n    switch (action) {\r\n      case 'skill_woodcutting':\r\n        this.performNearestAction('tree', 'chop')\r\n        break\r\n      case 'skill_mining':\r\n        this.performNearestAction('rock', 'mine')\r\n        break\r\n      case 'skill_fishing':\r\n        this.performNearestAction('fishing_spot', 'fish')\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform action on nearest entity\r\n   */\r\n  private performNearestAction(entityType: string, action: string): void {\r\n    const localPlayerId = this.getLocalPlayerId()\r\n    if (!localPlayerId) return\r\n    \r\n    const player = this.world.entities.get(localPlayerId)\r\n    if (!player) return\r\n    \r\n    const playerPos = (player as any).position\r\n    if (!playerPos) return\r\n    \r\n    // Find nearest entity of type\r\n    let nearest: Entity | null = null\r\n    let nearestDist = Infinity\r\n    \r\n    for (const [id, entity] of this.world.entities) {\r\n      if ((entity as any).type === entityType) {\r\n        const entityPos = (entity as any).position\r\n        if (entityPos) {\r\n          const dist = this.getDistance(playerPos, entityPos)\r\n          if (dist < nearestDist) {\r\n            nearest = entity\r\n            nearestDist = dist\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (nearest && nearestDist < 10) {\r\n      this.world.events.emit('ui:interact', {\r\n        playerId: localPlayerId,\r\n        entity: nearest,\r\n        action: action\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle combat style\r\n   */\r\n  private handleCombatStyle(action: string): void {\r\n    const localPlayerId = this.getLocalPlayerId()\r\n    if (!localPlayerId) return\r\n    \r\n    const style = action.replace('combat_style_', '')\r\n    const combat = (this.world as any).getSystem('combat')\r\n    if (combat && typeof combat.setCombatStyle === 'function') {\r\n      const player = this.world.entities.get(localPlayerId)\r\n      if (player) {\r\n        combat.setCombatStyle(player, style)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get distance between positions\r\n   */\r\n  private getDistance(pos1: any, pos2: any): number {\r\n    const dx = pos1.x - pos2.x\r\n    const dz = pos1.z - pos2.z\r\n    return Math.sqrt(dx * dx + dz * dz)\r\n  }\r\n\r\n  /**\r\n   * Get keybinding system\r\n   */\r\n  getKeybindingSystem(): KeybindingSystem | null {\r\n    return this.keybindingSystem\r\n  }\r\n}\r\n\r\ninterface UIInterface {\r\n  id: string\r\n  name: string\r\n  elements: Map<string, UIElement>\r\n  layout: 'fixed' | 'grid' | 'vertical' | 'horizontal' | 'tabs' | 'list'\r\n  visible: boolean\r\n  alwaysVisible?: boolean\r\n  position?: Vector2\r\n  size?: Vector2\r\n} ", "// RPG plugin export\nexport * from './systems/ConstructionSystem'\nexport * from './types'\n\nimport type { World } from '../types'\n\n// Import all RPG systems\nimport { CombatSystem } from './systems/CombatSystem'\nimport { InventorySystem } from './systems/InventorySystem'\nimport { QuestSystem } from './systems/QuestSystem'\nimport { SkillsSystem } from './systems/SkillsSystem'\nimport { BankingSystem } from './systems/BankingSystem'\nimport { TradingSystem } from './systems/TradingSystem'\nimport { NavigationSystem } from './systems/NavigationSystem'\nimport { LootSystem } from './systems/LootSystem'\nimport { SpawningSystem } from './systems/SpawningSystem'\nimport { NPCSystem } from './systems/NPCSystem'\nimport { StatsSystem } from './systems/StatsSystem'\nimport { MovementSystem } from './systems/MovementSystem'\nimport { DeathRespawnSystem } from './systems/DeathRespawnSystem'\nimport { PvPSystem } from './systems/PvPSystem'\nimport { ShopSystem } from './systems/ShopSystem'\nimport { GrandExchangeSystem } from './systems/GrandExchangeSystem'\nimport { PrayerSystem } from './systems/PrayerSystem'\nimport { MagicSystem } from './systems/MagicSystem'\nimport { ConstructionSystem } from './systems/ConstructionSystem'\nimport { MinigameSystem } from './systems/MinigameSystem'\nimport { ClanSystem } from './systems/ClanSystem'\nimport { VisualRepresentationSystem } from './systems/VisualRepresentationSystem'\nimport { AgentPlayerSystem } from './systems/AgentPlayerSystem'\nimport { ItemSpawnSystem } from './systems/ItemSpawnSystem'\nimport { ResourceSpawnSystem } from './systems/ResourceSpawnSystem'\nimport { UISystem } from './ui/UISystem'\n\n// Plugin definition\nexport const HyperfyRPGPlugin = {\n  name: 'hyperfy-rpg',\n  description: 'RuneScape-style RPG mechanics for Hyperfy',\n  systems: [],\n  \n  /**\n   * Initialize the RPG plugin with the given world\n   */\n  async init(world: World, config?: any): Promise<void> {\n    console.log('[HyperfyRPGPlugin] Initializing RPG plugin...', {\n      worldType: config?.worldType || 'unknown',\n      isServer: config?.isServer || false,\n      systems: config?.systems || []\n    })\n    \n    // Register all RPG systems\n    const systems = [\n      { name: 'stats', system: StatsSystem },\n      { name: 'movement', system: MovementSystem },\n      { name: 'combat', system: CombatSystem },\n      { name: 'inventory', system: InventorySystem },\n      { name: 'quest', system: QuestSystem },\n      { name: 'skills', system: SkillsSystem },\n      { name: 'banking', system: BankingSystem },\n      { name: 'trading', system: TradingSystem },\n      { name: 'navigation', system: NavigationSystem },\n      { name: 'loot', system: LootSystem },\n      { name: 'spawning', system: SpawningSystem },\n      { name: 'npc', system: NPCSystem },\n      { name: 'deathRespawn', system: DeathRespawnSystem },\n      { name: 'pvp', system: PvPSystem },\n      { name: 'shop', system: ShopSystem },\n      { name: 'grandExchange', system: GrandExchangeSystem },\n      { name: 'prayer', system: PrayerSystem },\n      { name: 'magic', system: MagicSystem },\n      { name: 'construction', system: ConstructionSystem },\n      { name: 'minigame', system: MinigameSystem },\n      { name: 'clan', system: ClanSystem },\n      { name: 'visualRepresentation', system: VisualRepresentationSystem },\n      { name: 'agentPlayer', system: AgentPlayerSystem },\n      { name: 'itemSpawn', system: ItemSpawnSystem },\n      { name: 'resourceSpawn', system: ResourceSpawnSystem },\n      { name: 'ui', system: UISystem }\n    ]\n    \n    // Register each system with the world\n    for (const { name, system } of systems) {\n      try {\n        (world as any).register?.(name, system)\n        console.log(`[HyperfyRPGPlugin] Registered ${name} system`)\n      } catch (error) {\n        console.error(`[HyperfyRPGPlugin] Failed to register ${name} system:`, error)\n      }\n    }\n    \n    // Store RPG systems on the world for easy access\n    ;(world as any).rpgSystems = {}\n    for (const { name } of systems) {\n      const systemInstance = (world as any).getSystem?.(name)\n      if (systemInstance) {\n        ;(world as any).rpgSystems[name] = systemInstance\n      }\n    }\n    \n    console.log('[HyperfyRPGPlugin] RPG plugin initialized successfully with', Object.keys((world as any).rpgSystems || {}).length, 'systems')\n  }\n}\n\n// Add world manager export\nexport { RPGWorldManager } from './RPGWorldManager'\n\n// Main RPG app setup - now with world initialization\nexport const setupRPGWorld = async (world: World): Promise<void> => {\n  console.log('Setting up RPG World...')\n  \n  // Import world manager\n  const { RPGWorldManager } = await import('./RPGWorldManager')\n  \n  // Create and store world manager\n  const worldManager = new RPGWorldManager(world)\n  ;(world as any).rpgManager = worldManager\n  \n  // Initialize the RPG world\n  await worldManager.initialize()\n}\n\n// Helper to check if RPG is ready\nexport const isRPGReady = (world: World): boolean => {\n  const worldManager = (world as any).rpgManager\n  return worldManager ? worldManager.isReady() : false\n}\n\n// Helper to get RPG status\nexport const getRPGStatus = (world: World): any => {\n  const worldManager = (world as any).rpgManager\n  return worldManager ? worldManager.getStatus() : null\n}"],
  "mappings": "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",
  "names": ["EventEmitter", "BufferAttribute", "leftBounds", "uint16Array", "uint32Array", "root", "offset", "count", "Vector3", "areIntersecting", "closestPointLineToLine", "Vector2", "temp1", "temp2", "closestPointsSegmentToSegment", "Plane", "Line3", "sphereIntersectTriangle", "triangle", "Triangle", "Sphere", "matrix", "Matrix4", "closestPointToPoint", "_box1", "_box2", "Box3", "float32Array", "nodeIndex32", "nodeIndex16", "temp", "REVISION", "ray", "BackSide", "DoubleSide", "_traverse", "byteOffset", "_raycast", "_xyzFields", "_raycastFirst", "boundingBox", "triangle2", "invertedMat", "obb", "obb2", "_intersectsGeometry", "tempMatrix", "temp3", "temp4", "FrontSide", "box", "Object3D", "Mesh", "BufferGeometry", "Group", "LineBasicMaterial", "MeshBasicMaterial", "Ray", "BatchedMesh", "acceleratedRaycast", "l", "computeBoundsTree", "disposeBoundsTree", "RedFormat", "RGFormat", "RGBAFormat", "RedIntegerFormat", "RGIntegerFormat", "RGBAIntegerFormat", "DataTexture", "NearestFilter", "FloatType", "UnsignedIntType", "IntType", "UnsignedByteType", "ByteType", "ShortType", "UnsignedShortType", "Vector4", "Matrix3", "BVHShaderGLSL.bvh_struct_definitions", "BVHShaderGLSL.bvh_distance_functions", "BVHShaderGLSL.common_functions", "BVHShaderGLSL.bvh_ray_functions", "EventEmitter", "EquipmentSlot", "totalQuantity", "entity", "playerId", "questId", "item", "path", "BufferGeometry", "Camera", "CanvasTexture", "Color", "DataTexture", "Euler", "Fog", "Group", "InstancedBufferAttribute", "InstancedMesh", "Layers", "LinearFilter", "LinearSRGBColorSpace", "Material", "Matrix4", "Mesh", "MeshBasicMaterial", "Object3D", "PerspectiveCamera", "PlaneGeometry", "Quaternion", "Raycaster", "SRGBColorSpace", "Scene", "SphereGeometry", "Texture", "TextureLoader", "VideoTexture", "WebGLRenderer", "THREE_ORIGINAL", "THREE_ORIGINAL", "Quaternion", "Euler", "Object3D", "Mesh", "SphereGeometry", "MeshBasicMaterial", "Color", "Fog", "Scene", "Group", "Camera", "WebGLRenderer", "TextureLoader", "InstancedMesh", "InstancedBufferAttribute", "Raycaster", "Layers", "Matrix4", "Material", "Texture", "BufferGeometry", "PlaneGeometry", "PerspectiveCamera", "CanvasTexture", "DataTexture", "VideoTexture", "LinearFilter", "LinearSRGBColorSpace", "SRGBColorSpace", "RPGEntity", "RPGEntity", "RPGEntity", "entity", "LogLevel", "definition", "entity", "path", "deathData", "queue", "clan", "war", "Symbol", "objectProto", "nativeObjectToString", "symToStringTag", "isBoolean", "getRef", "self", "defaults", "Mesh", "self", "Mesh", "RPGEntity", "spawn", "path"]
}
