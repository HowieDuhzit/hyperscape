// Test World: Character Movement and Physics
// This test world specifically tests character controller movement on terrain
// with visual verification of physics behavior

app.configure([
  {
    key: 'testSeed',
    type: 'number',
    label: 'Test Seed',
    initial: 54321,
    min: 1,
    max: 999999,
    hint: 'Seed for deterministic terrain generation'
  },
  {
    key: 'showTrails',
    type: 'toggle',
    label: 'Show Movement Trails',
    initial: true,
    hint: 'Show colored trails for character movement'
  },
  {
    key: 'autoTest',
    type: 'toggle',
    label: 'Auto Test Movement',
    initial: true,
    hint: 'Automatically test movement patterns'
  }
])

// Import required systems
import { ProceduralTerrain } from '../../core/systems/ProceduralTerrain.js'

// Test state
let terrain = null
let testController = null
let testResults = []
let errorLog = []
let movementTrail = []
let testPhase = 0
let testTimer = 0

// Colors for visual testing
const COLORS = {
  PLAYER: 0x0000ff,        // Blue
  GROUND_MARKER: 0x00ff00, // Green
  MOVEMENT_TRAIL: 0xff00ff, // Magenta
  TERRAIN_SAMPLE: 0x654321, // Brown
  JUMP_MARKER: 0xffff00,   // Yellow
  COLLISION_MARKER: 0xff0000, // Red
  TARGET_POSITION: 0x00ffff  // Cyan
}

// Test movement patterns
const MOVEMENT_TESTS = [
  {
    name: 'Forward Movement',
    startPos: { x: 0, y: 5, z: 0 },
    targetPos: { x: 0, y: 5, z: 10 },
    movement: { x: 0, y: 0, z: 1 },
    duration: 2000,
    expectedResult: 'Player moves forward on terrain'
  },
  {
    name: 'Backward Movement',
    startPos: { x: 0, y: 5, z: 10 },
    targetPos: { x: 0, y: 5, z: 0 },
    movement: { x: 0, y: 0, z: -1 },
    duration: 2000,
    expectedResult: 'Player moves backward on terrain'
  },
  {
    name: 'Left Strafe',
    startPos: { x: 0, y: 5, z: 0 },
    targetPos: { x: -10, y: 5, z: 0 },
    movement: { x: -1, y: 0, z: 0 },
    duration: 2000,
    expectedResult: 'Player strafes left on terrain'
  },
  {
    name: 'Right Strafe',
    startPos: { x: -10, y: 5, z: 0 },
    targetPos: { x: 0, y: 5, z: 0 },
    movement: { x: 1, y: 0, z: 0 },
    duration: 2000,
    expectedResult: 'Player strafes right on terrain'
  },
  {
    name: 'Diagonal Movement',
    startPos: { x: 0, y: 5, z: 0 },
    targetPos: { x: 10, y: 5, z: 10 },
    movement: { x: 1, y: 0, z: 1 },
    duration: 3000,
    expectedResult: 'Player moves diagonally on terrain'
  },
  {
    name: 'Jump Test',
    startPos: { x: 0, y: 5, z: 0 },
    targetPos: { x: 0, y: 5, z: 0 },
    movement: { x: 0, y: 1, z: 0 },
    duration: 1000,
    expectedResult: 'Player jumps and lands on terrain'
  },
  {
    name: 'Terrain Following',
    startPos: { x: -20, y: 5, z: -20 },
    targetPos: { x: 20, y: 5, z: 20 },
    movement: { x: 1, y: 0, z: 1 },
    duration: 4000,
    expectedResult: 'Player follows terrain height changes'
  }
]

// Initialize character movement test
async function initCharacterMovementTest() {
  console.log('[CharacterMovementTest] Initializing character movement test...')
  
  try {
    // Create terrain first
    terrain = new ProceduralTerrain(world, {
      seed: props.testSeed,
      biomeCount: 4,
      worldSize: 200,
      chunkSize: 50,
      chunkResolution: 32,
      maxHeight: 15,
      waterLevel: 0
    })
    
    await terrain.init()
    console.log('[CharacterMovementTest] Terrain initialized')
    
    // Create test character controller
    createTestCharacter()
    
    // Create terrain visualization
    createTerrainVisualization()
    
    // Create test markers
    createTestMarkers()
    
    // Start automated testing if enabled
    if (props.autoTest) {
      startAutomatedTesting()
    }
    
    console.log('[CharacterMovementTest] Character movement test ready')
    
  } catch (error) {
    console.error('[CharacterMovementTest] Test initialization failed:', error)
    errorLog.push(`Initialization failed: ${error.message}`)
  }
}

// Create test character controller
function createTestCharacter() {
  console.log('[CharacterMovementTest] Creating test character...')
  
  // Create character controller
  testController = app.create('controller')
  testController.radius = 0.5
  testController.height = 1.8
  testController.visible = true
  testController.layer = 'player'
  testController.tag = 'test_character'
  
  // Position character on terrain
  const spawnHeight = terrain.getHeightAt(0, 0)
  testController.position.set(0, spawnHeight + 2, 0)
  
  // Add to world
  world.add(testController)
  
  // Create visual representation
  const geometry = new THREE.CapsuleGeometry(0.5, 1.8, 4, 8)
  const material = new THREE.MeshBasicMaterial({ color: COLORS.PLAYER })
  const mesh = new THREE.Mesh(geometry, material)
  mesh.position.copy(testController.position)
  app.add(mesh)
  
  // Store mesh reference for updates
  testController.visualMesh = mesh
  
  console.log('[CharacterMovementTest] Test character created')
}

// Create terrain visualization
function createTerrainVisualization() {
  console.log('[CharacterMovementTest] Creating terrain visualization...')
  
  // Create terrain sample points
  const sampleCount = 15
  const sampleSize = 80
  
  for (let x = 0; x < sampleCount; x++) {
    for (let z = 0; z < sampleCount; z++) {
      const worldX = (x / sampleCount - 0.5) * sampleSize
      const worldZ = (z / sampleCount - 0.5) * sampleSize
      
      const height = terrain.getHeightAt(worldX, worldZ)
      const walkable = terrain.isWalkable(worldX, worldZ)
      
      // Create terrain marker
      const geometry = new THREE.BoxGeometry(1, 0.5, 1)
      const material = new THREE.MeshBasicMaterial({ 
        color: walkable ? COLORS.TERRAIN_SAMPLE : COLORS.COLLISION_MARKER,
        transparent: true,
        opacity: 0.3
      })
      const cube = new THREE.Mesh(geometry, material)
      
      cube.position.set(worldX, height, worldZ)
      app.add(cube)
    }
  }
}

// Create test markers
function createTestMarkers() {
  console.log('[CharacterMovementTest] Creating test markers...')
  
  // Create markers for each test
  for (let i = 0; i < MOVEMENT_TESTS.length; i++) {
    const test = MOVEMENT_TESTS[i]
    
    // Start position marker
    const startGeometry = new THREE.SphereGeometry(1, 8, 8)
    const startMaterial = new THREE.MeshBasicMaterial({ color: COLORS.GROUND_MARKER })
    const startSphere = new THREE.Mesh(startGeometry, startMaterial)
    
    const startHeight = terrain.getHeightAt(test.startPos.x, test.startPos.z)
    startSphere.position.set(test.startPos.x, startHeight + 1, test.startPos.z)
    app.add(startSphere)
    
    // Target position marker
    const targetGeometry = new THREE.SphereGeometry(1, 8, 8)
    const targetMaterial = new THREE.MeshBasicMaterial({ color: COLORS.TARGET_POSITION })
    const targetSphere = new THREE.Mesh(targetGeometry, targetMaterial)
    
    const targetHeight = terrain.getHeightAt(test.targetPos.x, test.targetPos.z)
    targetSphere.position.set(test.targetPos.x, targetHeight + 1, test.targetPos.z)
    app.add(targetSphere)
    
    // Test number label
    const labelGeometry = new THREE.ConeGeometry(0.5, 2, 8)
    const labelMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff })
    const labelCone = new THREE.Mesh(labelGeometry, labelMaterial)
    
    labelCone.position.set(test.startPos.x, startHeight + 4, test.startPos.z)
    app.add(labelCone)
  }
}

// Start automated testing
function startAutomatedTesting() {
  console.log('[CharacterMovementTest] Starting automated testing...')
  
  testPhase = 0
  testTimer = 0
  
  // Start first test
  startMovementTest(MOVEMENT_TESTS[testPhase])
}

// Start individual movement test
function startMovementTest(test) {
  console.log(`[CharacterMovementTest] Starting test: ${test.name}`)
  
  // Clear previous trail
  movementTrail = []
  
  // Move character to start position
  const startHeight = terrain.getHeightAt(test.startPos.x, test.startPos.z)
  testController.teleport(new THREE.Vector3(test.startPos.x, startHeight + 2, test.startPos.z))
  
  // Update visual
  testController.visualMesh.position.copy(testController.position)
  
  // Record start position
  recordMovementPoint(testController.position.clone(), 'start')
  
  console.log(`[CharacterMovementTest] Test ${test.name} started at (${test.startPos.x}, ${startHeight + 2}, ${test.startPos.z})`)
}

// Record movement point for trail
function recordMovementPoint(position, type = 'movement') {
  movementTrail.push({
    position: position.clone(),
    type,
    timestamp: Date.now()
  })
  
  // Create visual trail marker
  if (props.showTrails) {
    const geometry = new THREE.SphereGeometry(0.2, 4, 4)
    const material = new THREE.MeshBasicMaterial({ 
      color: type === 'start' ? COLORS.GROUND_MARKER : 
             type === 'end' ? COLORS.TARGET_POSITION : 
             COLORS.MOVEMENT_TRAIL
    })
    const sphere = new THREE.Mesh(geometry, material)
    
    sphere.position.copy(position)
    app.add(sphere)
  }
}

// Update movement test
function updateMovementTest(deltaTime) {
  if (testPhase >= MOVEMENT_TESTS.length) return
  
  const test = MOVEMENT_TESTS[testPhase]
  testTimer += deltaTime * 1000
  
  // Apply movement
  const moveVector = new THREE.Vector3(
    test.movement.x * deltaTime * 5,
    test.movement.y * deltaTime * 8,
    test.movement.z * deltaTime * 5
  )
  
  // Apply gravity if not grounded
  if (!testController.isGrounded) {
    moveVector.y -= 9.81 * deltaTime
  }
  
  // Move character
  testController.move(moveVector)
  
  // Update visual
  testController.visualMesh.position.copy(testController.position)
  
  // Record movement
  recordMovementPoint(testController.position.clone())
  
  // Check if test is complete
  if (testTimer >= test.duration) {
    completeMovementTest(test)
  }
}

// Complete movement test
function completeMovementTest(test) {
  console.log(`[CharacterMovementTest] Completing test: ${test.name}`)
  
  // Record end position
  recordMovementPoint(testController.position.clone(), 'end')
  
  // Analyze test results
  const testResult = analyzeMovementTest(test)
  testResults.push(testResult)
  
  console.log(`[CharacterMovementTest] Test ${test.name} ${testResult.passed ? 'PASSED' : 'FAILED'}`)
  
  // Move to next test
  testPhase++
  testTimer = 0
  
  if (testPhase < MOVEMENT_TESTS.length) {
    // Wait before next test
    setTimeout(() => {
      startMovementTest(MOVEMENT_TESTS[testPhase])
    }, 1000)
  } else {
    // All tests complete
    displayTestResults()
  }
}

// Analyze movement test results
function analyzeMovementTest(test) {
  const result = {
    testName: test.name,
    passed: true,
    errors: [],
    warnings: [],
    data: {}
  }
  
  try {
    const startPos = movementTrail[0].position
    const endPos = movementTrail[movementTrail.length - 1].position
    
    // Calculate distance traveled
    const distanceTraveled = startPos.distanceTo(endPos)
    result.data.distanceTraveled = distanceTraveled
    
    // Check if character moved
    if (distanceTraveled < 0.1 && test.name !== 'Jump Test') {
      result.errors.push('Character did not move')
      result.passed = false
    }
    
    // Check if character stayed on terrain
    let offTerrainCount = 0
    for (const point of movementTrail) {
      const terrainHeight = terrain.getHeightAt(point.position.x, point.position.z)
      if (point.position.y < terrainHeight - 2) {
        offTerrainCount++
      }
    }
    
    if (offTerrainCount > movementTrail.length * 0.1) {
      result.warnings.push(`Character went below terrain ${offTerrainCount} times`)
    }
    
    // Check for expected direction
    if (test.movement.x !== 0) {
      const actualDeltaX = endPos.x - startPos.x
      if (Math.sign(actualDeltaX) !== Math.sign(test.movement.x)) {
        result.errors.push(`Movement direction incorrect: expected ${test.movement.x > 0 ? 'positive' : 'negative'} X, got ${actualDeltaX}`)
        result.passed = false
      }
    }
    
    if (test.movement.z !== 0) {
      const actualDeltaZ = endPos.z - startPos.z
      if (Math.sign(actualDeltaZ) !== Math.sign(test.movement.z)) {
        result.errors.push(`Movement direction incorrect: expected ${test.movement.z > 0 ? 'positive' : 'negative'} Z, got ${actualDeltaZ}`)
        result.passed = false
      }
    }
    
    // Special checks for jump test
    if (test.name === 'Jump Test') {
      let maxHeight = startPos.y
      for (const point of movementTrail) {
        if (point.position.y > maxHeight) {
          maxHeight = point.position.y
        }
      }
      
      const jumpHeight = maxHeight - startPos.y
      result.data.jumpHeight = jumpHeight
      
      if (jumpHeight < 0.5) {
        result.errors.push('Character did not jump high enough')
        result.passed = false
      }
    }
    
    // Check controller properties
    if (typeof testController.isGrounded !== 'boolean') {
      result.errors.push('isGrounded property not working')
      result.passed = false
    }
    
    result.data.finalPosition = endPos
    result.data.trailLength = movementTrail.length
    result.data.isGrounded = testController.isGrounded
    
  } catch (error) {
    result.errors.push(`Test analysis failed: ${error.message}`)
    result.passed = false
  }
  
  return result
}

// Display test results
function displayTestResults() {
  console.log('\n=== CHARACTER MOVEMENT TEST RESULTS ===')
  
  const totalTests = testResults.length
  const passedTests = testResults.filter(r => r.passed).length
  const failedTests = totalTests - passedTests
  
  console.log(`Total Tests: ${totalTests}`)
  console.log(`Passed: ${passedTests}`)
  console.log(`Failed: ${failedTests}`)
  console.log(`Success Rate: ${((passedTests / totalTests) * 100).toFixed(1)}%`)
  
  for (const result of testResults) {
    console.log(`\n${result.testName}: ${result.passed ? 'PASS' : 'FAIL'}`)
    
    if (result.errors.length > 0) {
      console.log('  Errors:')
      for (const error of result.errors) {
        console.log(`    - ${error}`)
      }
    }
    
    if (result.warnings.length > 0) {
      console.log('  Warnings:')
      for (const warning of result.warnings) {
        console.log(`    - ${warning}`)
      }
    }
    
    if (Object.keys(result.data).length > 0) {
      console.log('  Data:', result.data)
    }
  }
  
  if (errorLog.length > 0) {
    console.log('\n=== ERROR LOG ===')
    for (const error of errorLog) {
      console.log(error)
    }
  }
  
  console.log('\n=== CHARACTER MOVEMENT TEST COMPLETE ===')
}

// Manual movement controls
function setupManualControls() {
  const movement = {
    forward: false,
    backward: false,
    left: false,
    right: false,
    jump: false
  }
  
  function handleKeyDown(event) {
    switch(event.code) {
      case 'KeyW': movement.forward = true; break
      case 'KeyS': movement.backward = true; break
      case 'KeyA': movement.left = true; break
      case 'KeyD': movement.right = true; break
      case 'Space': movement.jump = true; event.preventDefault(); break
    }
  }
  
  function handleKeyUp(event) {
    switch(event.code) {
      case 'KeyW': movement.forward = false; break
      case 'KeyS': movement.backward = false; break
      case 'KeyA': movement.left = false; break
      case 'KeyD': movement.right = false; break
      case 'Space': movement.jump = false; break
    }
  }
  
  if (typeof window !== 'undefined') {
    window.addEventListener('keydown', handleKeyDown)
    window.addEventListener('keyup', handleKeyUp)
  }
  
  // Manual movement update
  app.on('update', (deltaTime) => {
    if (!props.autoTest && testController) {
      const velocity = new THREE.Vector3()
      
      if (movement.forward) velocity.z -= 5
      if (movement.backward) velocity.z += 5
      if (movement.left) velocity.x -= 5
      if (movement.right) velocity.x += 5
      if (movement.jump && testController.isGrounded) velocity.y = 8
      
      // Apply gravity
      if (!testController.isGrounded) {
        velocity.y -= 9.81 * deltaTime
      }
      
      if (velocity.length() > 0) {
        testController.move(velocity.clone().multiplyScalar(deltaTime))
        testController.visualMesh.position.copy(testController.position)
        
        // Record manual movement
        recordMovementPoint(testController.position.clone())
      }
    }
  })
}

// Setup lighting
function setupLighting() {
  const ambientLight = new THREE.AmbientLight(0x404040, 0.6)
  app.add(ambientLight)
  
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)
  directionalLight.position.set(50, 50, 50)
  app.add(directionalLight)
}

// Initialize when app starts
app.on('start', async () => {
  console.log('[CharacterMovementTest] Starting character movement test...')
  
  setupLighting()
  await initCharacterMovementTest()
  setupManualControls()
  
  console.log('[CharacterMovementTest] Character movement test initialized!')
})

// Update loop
app.on('update', (deltaTime) => {
  if (props.autoTest && testPhase < MOVEMENT_TESTS.length) {
    updateMovementTest(deltaTime)
  }
})

// Cleanup
app.on('destroy', () => {
  console.log('[CharacterMovementTest] Cleaning up...')
  
  if (terrain) {
    terrain.clearChunks()
  }
  
  if (typeof window !== 'undefined') {
    window.removeEventListener('keydown', () => {})
    window.removeEventListener('keyup', () => {})
  }
})